
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 e0 14 00 	lgdtl  0x14e018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 e0 14 c0       	mov    $0xc014e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 04 32 15 c0       	mov    $0xc0153204,%edx
c0100035:	b8 d0 ee 14 c0       	mov    $0xc014eed0,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d0 ee 14 c0 	movl   $0xc014eed0,(%esp)
c0100051:	e8 dc 53 01 00       	call   c0115432 <memset>

    cons_init();                // init the console
c0100056:	e8 7d 17 00 00       	call   c01017d8 <cons_init>

    const char *message = "mff's os is loading ...";
c010005b:	c7 45 f4 c0 55 11 c0 	movl   $0xc01155c0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 d8 55 11 c0 	movl   $0xc01155d8,(%esp)
c0100070:	e8 f0 02 00 00       	call   c0100365 <cprintf>

    print_kerninfo();
c0100075:	e8 f8 09 00 00       	call   c0100a72 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a7 00 00 00       	call   c0100126 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 7e 56 00 00       	call   c0105702 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 2d 21 00 00       	call   c01021b6 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 7f 22 00 00       	call   c010230d <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 6f 85 00 00       	call   c0108602 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 bc e3 00 00       	call   c010e454 <sched_init>
    proc_init();                // init process table
c0100098:	e8 5d dc 00 00       	call   c010dcfa <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 67 18 00 00       	call   c0101909 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 2f 6d 00 00       	call   c0106dd6 <swap_init>
    fs_init();                  // init fs
c01000a7:	e8 74 ae 00 00       	call   c010af20 <fs_init>
    
    clock_init();               // init clock interrupt
c01000ac:	e8 dd 0e 00 00       	call   c0100f8e <clock_init>
    intr_enable();              // enable irq interrupt
c01000b1:	e8 6e 20 00 00       	call   c0102124 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b6:	e8 4d de 00 00       	call   c010df08 <cpu_idle>

c01000bb <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bb:	55                   	push   %ebp
c01000bc:	89 e5                	mov    %esp,%ebp
c01000be:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c8:	00 
c01000c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d0:	00 
c01000d1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d8:	e8 d9 0d 00 00       	call   c0100eb6 <mon_backtrace>
}
c01000dd:	c9                   	leave  
c01000de:	c3                   	ret    

c01000df <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000df:	55                   	push   %ebp
c01000e0:	89 e5                	mov    %esp,%ebp
c01000e2:	53                   	push   %ebx
c01000e3:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e6:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000ec:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fe:	89 04 24             	mov    %eax,(%esp)
c0100101:	e8 b5 ff ff ff       	call   c01000bb <grade_backtrace2>
}
c0100106:	83 c4 14             	add    $0x14,%esp
c0100109:	5b                   	pop    %ebx
c010010a:	5d                   	pop    %ebp
c010010b:	c3                   	ret    

c010010c <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010c:	55                   	push   %ebp
c010010d:	89 e5                	mov    %esp,%ebp
c010010f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100112:	8b 45 10             	mov    0x10(%ebp),%eax
c0100115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100119:	8b 45 08             	mov    0x8(%ebp),%eax
c010011c:	89 04 24             	mov    %eax,(%esp)
c010011f:	e8 bb ff ff ff       	call   c01000df <grade_backtrace1>
}
c0100124:	c9                   	leave  
c0100125:	c3                   	ret    

c0100126 <grade_backtrace>:

void
grade_backtrace(void) {
c0100126:	55                   	push   %ebp
c0100127:	89 e5                	mov    %esp,%ebp
c0100129:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012c:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100131:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100138:	ff 
c0100139:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100144:	e8 c3 ff ff ff       	call   c010010c <grade_backtrace0>
}
c0100149:	c9                   	leave  
c010014a:	c3                   	ret    

c010014b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014b:	55                   	push   %ebp
c010014c:	89 e5                	mov    %esp,%ebp
c010014e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100151:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100154:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100157:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100161:	0f b7 c0             	movzwl %ax,%eax
c0100164:	83 e0 03             	and    $0x3,%eax
c0100167:	89 c2                	mov    %eax,%edx
c0100169:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010016e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100172:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100176:	c7 04 24 dd 55 11 c0 	movl   $0xc01155dd,(%esp)
c010017d:	e8 e3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100182:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100186:	0f b7 d0             	movzwl %ax,%edx
c0100189:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010018e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100196:	c7 04 24 eb 55 11 c0 	movl   $0xc01155eb,(%esp)
c010019d:	e8 c3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a6:	0f b7 d0             	movzwl %ax,%edx
c01001a9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ae:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b6:	c7 04 24 f9 55 11 c0 	movl   $0xc01155f9,(%esp)
c01001bd:	e8 a3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c6:	0f b7 d0             	movzwl %ax,%edx
c01001c9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d6:	c7 04 24 07 56 11 c0 	movl   $0xc0115607,(%esp)
c01001dd:	e8 83 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e6:	0f b7 d0             	movzwl %ax,%edx
c01001e9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f6:	c7 04 24 15 56 11 c0 	movl   $0xc0115615,(%esp)
c01001fd:	e8 63 01 00 00       	call   c0100365 <cprintf>
    round ++;
c0100202:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c0100207:	83 c0 01             	add    $0x1,%eax
c010020a:	a3 e0 ee 14 c0       	mov    %eax,0xc014eee0
}
c010020f:	c9                   	leave  
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100221:	e8 25 ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	c7 04 24 24 56 11 c0 	movl   $0xc0115624,(%esp)
c010022d:	e8 33 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_user();
c0100232:	e8 da ff ff ff       	call   c0100211 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100237:	e8 0f ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023c:	c7 04 24 44 56 11 c0 	movl   $0xc0115644,(%esp)
c0100243:	e8 1d 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_kernel();
c0100248:	e8 c9 ff ff ff       	call   c0100216 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024d:	e8 f9 fe ff ff       	call   c010014b <lab1_print_cur_status>
}
c0100252:	c9                   	leave  
c0100253:	c3                   	ret    

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 63 56 11 c0 	movl   $0xc0115663,(%esp)
c010026e:	e8 f2 00 00 00       	call   c0100365 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010027a:	e8 6e 01 00 00       	call   c01003ed <getchar>
c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100286:	79 07                	jns    c010028f <readline+0x3b>
            return NULL;
c0100288:	b8 00 00 00 00       	mov    $0x0,%eax
c010028d:	eb 79                	jmp    c0100308 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100293:	7e 28                	jle    c01002bd <readline+0x69>
c0100295:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029c:	7f 1f                	jg     c01002bd <readline+0x69>
            cputchar(c);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	89 04 24             	mov    %eax,(%esp)
c01002a4:	e8 e2 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ac:	8d 50 01             	lea    0x1(%eax),%edx
c01002af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b5:	88 90 00 ef 14 c0    	mov    %dl,-0x3feb1100(%eax)
c01002bb:	eb 46                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002bd:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c1:	75 17                	jne    c01002da <readline+0x86>
c01002c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c7:	7e 11                	jle    c01002da <readline+0x86>
            cputchar(c);
c01002c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cc:	89 04 24             	mov    %eax,(%esp)
c01002cf:	e8 b7 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d8:	eb 29                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002da:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002de:	74 06                	je     c01002e6 <readline+0x92>
c01002e0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e4:	75 1d                	jne    c0100303 <readline+0xaf>
            cputchar(c);
c01002e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e9:	89 04 24             	mov    %eax,(%esp)
c01002ec:	e8 9a 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f4:	05 00 ef 14 c0       	add    $0xc014ef00,%eax
c01002f9:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002fc:	b8 00 ef 14 c0       	mov    $0xc014ef00,%eax
c0100301:	eb 05                	jmp    c0100308 <readline+0xb4>
        }
    }
c0100303:	e9 72 ff ff ff       	jmp    c010027a <readline+0x26>
}
c0100308:	c9                   	leave  
c0100309:	c3                   	ret    

c010030a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010030a:	55                   	push   %ebp
c010030b:	89 e5                	mov    %esp,%ebp
c010030d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100310:	8b 45 08             	mov    0x8(%ebp),%eax
c0100313:	89 04 24             	mov    %eax,(%esp)
c0100316:	e8 e9 14 00 00       	call   c0101804 <cons_putc>
    (*cnt) ++;
c010031b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010031e:	8b 00                	mov    (%eax),%eax
c0100320:	8d 50 01             	lea    0x1(%eax),%edx
c0100323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100326:	89 10                	mov    %edx,(%eax)
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010033a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010033e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100353:	ff 
c0100354:	c7 04 24 0a 03 10 c0 	movl   $0xc010030a,(%esp)
c010035b:	e8 82 47 01 00       	call   c0114ae2 <vprintfmt>
    return cnt;
c0100360:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036b:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 a7 ff ff ff       	call   c010032a <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 68 14 00 00       	call   c0101804 <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 4a ff ff ff       	call   c010030a <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	8d 50 01             	lea    0x1(%eax),%edx
c01003c6:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c9:	0f b6 00             	movzbl (%eax),%eax
c01003cc:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003cf:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d3:	75 d8                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e3:	e8 22 ff ff ff       	call   c010030a <cputch>
    return cnt;
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003eb:	c9                   	leave  
c01003ec:	c3                   	ret    

c01003ed <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ed:	55                   	push   %ebp
c01003ee:	89 e5                	mov    %esp,%ebp
c01003f0:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f3:	e8 48 14 00 00       	call   c0101840 <cons_getc>
c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003ff:	74 f2                	je     c01003f3 <getchar+0x6>
        /* do nothing */;
    return c;
c0100401:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100404:	c9                   	leave  
c0100405:	c3                   	ret    

c0100406 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100406:	55                   	push   %ebp
c0100407:	89 e5                	mov    %esp,%ebp
c0100409:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010040c:	8b 45 08             	mov    0x8(%ebp),%eax
c010040f:	89 04 24             	mov    %eax,(%esp)
c0100412:	e8 c5 4c 01 00       	call   c01150dc <strlen>
c0100417:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010041d:	83 c0 01             	add    $0x1,%eax
c0100420:	89 04 24             	mov    %eax,(%esp)
c0100423:	e8 32 48 00 00       	call   c0104c5a <kmalloc>
c0100428:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010042b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010042f:	74 24                	je     c0100455 <strdup+0x4f>
        memcpy(dst, src, len);
c0100431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100434:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100438:	8b 45 08             	mov    0x8(%ebp),%eax
c010043b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010043f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100442:	89 04 24             	mov    %eax,(%esp)
c0100445:	e8 ca 50 01 00       	call   c0115514 <memcpy>
        dst[len] = '\0';
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100450:	01 d0                	add    %edx,%eax
c0100452:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100455:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100458:	c9                   	leave  
c0100459:	c3                   	ret    

c010045a <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010045a:	55                   	push   %ebp
c010045b:	89 e5                	mov    %esp,%ebp
c010045d:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	89 04 24             	mov    %eax,(%esp)
c0100466:	e8 71 4c 01 00       	call   c01150dc <strlen>
c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100471:	89 04 24             	mov    %eax,(%esp)
c0100474:	e8 63 4c 01 00       	call   c01150dc <strlen>
c0100479:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010047f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100482:	01 d0                	add    %edx,%eax
c0100484:	83 c0 01             	add    $0x1,%eax
c0100487:	89 04 24             	mov    %eax,(%esp)
c010048a:	e8 cb 47 00 00       	call   c0104c5a <kmalloc>
c010048f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100495:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100498:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010049c:	74 44                	je     c01004e2 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010049e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01004a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004af:	89 04 24             	mov    %eax,(%esp)
c01004b2:	e8 5d 50 01 00       	call   c0115514 <memcpy>
c01004b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ce:	89 04 24             	mov    %eax,(%esp)
c01004d1:	e8 3e 50 01 00       	call   c0115514 <memcpy>
c01004d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d9:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004df:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004e5:	c9                   	leave  
c01004e6:	c3                   	ret    

c01004e7 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004e7:	55                   	push   %ebp
c01004e8:	89 e5                	mov    %esp,%ebp
c01004ea:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f0:	8b 00                	mov    (%eax),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01004f8:	8b 00                	mov    (%eax),%eax
c01004fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100504:	e9 d2 00 00 00       	jmp    c01005db <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010050c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010050f:	01 d0                	add    %edx,%eax
c0100511:	89 c2                	mov    %eax,%edx
c0100513:	c1 ea 1f             	shr    $0x1f,%edx
c0100516:	01 d0                	add    %edx,%eax
c0100518:	d1 f8                	sar    %eax
c010051a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010051d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100520:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100523:	eb 04                	jmp    c0100529 <stab_binsearch+0x42>
            m --;
c0100525:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052f:	7c 1f                	jl     c0100550 <stab_binsearch+0x69>
c0100531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100534:	89 d0                	mov    %edx,%eax
c0100536:	01 c0                	add    %eax,%eax
c0100538:	01 d0                	add    %edx,%eax
c010053a:	c1 e0 02             	shl    $0x2,%eax
c010053d:	89 c2                	mov    %eax,%edx
c010053f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100542:	01 d0                	add    %edx,%eax
c0100544:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100548:	0f b6 c0             	movzbl %al,%eax
c010054b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054e:	75 d5                	jne    c0100525 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100553:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100556:	7d 0b                	jge    c0100563 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055b:	83 c0 01             	add    $0x1,%eax
c010055e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100561:	eb 78                	jmp    c01005db <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010056a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010056d:	89 d0                	mov    %edx,%eax
c010056f:	01 c0                	add    %eax,%eax
c0100571:	01 d0                	add    %edx,%eax
c0100573:	c1 e0 02             	shl    $0x2,%eax
c0100576:	89 c2                	mov    %eax,%edx
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	01 d0                	add    %edx,%eax
c010057d:	8b 40 08             	mov    0x8(%eax),%eax
c0100580:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100583:	73 13                	jae    c0100598 <stab_binsearch+0xb1>
            *region_left = m;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010058b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100590:	83 c0 01             	add    $0x1,%eax
c0100593:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100596:	eb 43                	jmp    c01005db <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010059b:	89 d0                	mov    %edx,%eax
c010059d:	01 c0                	add    %eax,%eax
c010059f:	01 d0                	add    %edx,%eax
c01005a1:	c1 e0 02             	shl    $0x2,%eax
c01005a4:	89 c2                	mov    %eax,%edx
c01005a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01005a9:	01 d0                	add    %edx,%eax
c01005ab:	8b 40 08             	mov    0x8(%eax),%eax
c01005ae:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005b1:	76 16                	jbe    c01005c9 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01005bc:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c1:	83 e8 01             	sub    $0x1,%eax
c01005c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005c7:	eb 12                	jmp    c01005db <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 10                	mov    %edx,(%eax)
            l = m;
c01005d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005d7:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005de:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005e1:	0f 8e 22 ff ff ff    	jle    c0100509 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005eb:	75 0f                	jne    c01005fc <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f0:	8b 00                	mov    (%eax),%eax
c01005f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005f8:	89 10                	mov    %edx,(%eax)
c01005fa:	eb 3f                	jmp    c010063b <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ff:	8b 00                	mov    (%eax),%eax
c0100601:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100604:	eb 04                	jmp    c010060a <stab_binsearch+0x123>
c0100606:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010060a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060d:	8b 00                	mov    (%eax),%eax
c010060f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100612:	7d 1f                	jge    c0100633 <stab_binsearch+0x14c>
c0100614:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100617:	89 d0                	mov    %edx,%eax
c0100619:	01 c0                	add    %eax,%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	c1 e0 02             	shl    $0x2,%eax
c0100620:	89 c2                	mov    %eax,%edx
c0100622:	8b 45 08             	mov    0x8(%ebp),%eax
c0100625:	01 d0                	add    %edx,%eax
c0100627:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010062b:	0f b6 c0             	movzbl %al,%eax
c010062e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100631:	75 d3                	jne    c0100606 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100636:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100639:	89 10                	mov    %edx,(%eax)
    }
}
c010063b:	c9                   	leave  
c010063c:	c3                   	ret    

c010063d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010063d:	55                   	push   %ebp
c010063e:	89 e5                	mov    %esp,%ebp
c0100640:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	c7 00 68 56 11 c0    	movl   $0xc0115668,(%eax)
    info->eip_line = 0;
c010064c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100659:	c7 40 08 68 56 11 c0 	movl   $0xc0115668,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100660:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100663:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010066a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100670:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010067d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100684:	76 21                	jbe    c01006a7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100686:	c7 45 f4 c0 9b 11 c0 	movl   $0xc0119bc0,-0xc(%ebp)
        stab_end = __STAB_END__;
c010068d:	c7 45 f0 6c f3 13 c0 	movl   $0xc013f36c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100694:	c7 45 ec 6d f3 13 c0 	movl   $0xc013f36d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010069b:	c7 45 e8 5c bc 14 c0 	movl   $0xc014bc5c,-0x18(%ebp)
c01006a2:	e9 ea 00 00 00       	jmp    c0100791 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006a7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	74 11                	je     c01006c8 <debuginfo_eip+0x8b>
c01006b7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006bc:	8b 40 18             	mov    0x18(%eax),%eax
c01006bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006c6:	75 0a                	jne    c01006d2 <debuginfo_eip+0x95>
            return -1;
c01006c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cd:	e9 9e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006dc:	00 
c01006dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006e4:	00 
c01006e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006ec:	89 04 24             	mov    %eax,(%esp)
c01006ef:	e8 38 88 00 00       	call   c0108f2c <user_mem_check>
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	75 0a                	jne    c0100702 <debuginfo_eip+0xc5>
            return -1;
c01006f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006fd:	e9 6e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100705:	8b 00                	mov    (%eax),%eax
c0100707:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070d:	8b 40 04             	mov    0x4(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100716:	8b 40 08             	mov    0x8(%eax),%eax
c0100719:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010071c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100722:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100725:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072b:	29 c2                	sub    %eax,%edx
c010072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100730:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100737:	00 
c0100738:	89 54 24 08          	mov    %edx,0x8(%esp)
c010073c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100740:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100743:	89 04 24             	mov    %eax,(%esp)
c0100746:	e8 e1 87 00 00       	call   c0108f2c <user_mem_check>
c010074b:	85 c0                	test   %eax,%eax
c010074d:	75 0a                	jne    c0100759 <debuginfo_eip+0x11c>
            return -1;
c010074f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100754:	e9 17 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100759:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010075c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010075f:	29 c2                	sub    %eax,%edx
c0100761:	89 d0                	mov    %edx,%eax
c0100763:	89 c2                	mov    %eax,%edx
c0100765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076f:	00 
c0100770:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100774:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100778:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077b:	89 04 24             	mov    %eax,(%esp)
c010077e:	e8 a9 87 00 00       	call   c0108f2c <user_mem_check>
c0100783:	85 c0                	test   %eax,%eax
c0100785:	75 0a                	jne    c0100791 <debuginfo_eip+0x154>
            return -1;
c0100787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078c:	e9 df 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100797:	76 0d                	jbe    c01007a6 <debuginfo_eip+0x169>
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	83 e8 01             	sub    $0x1,%eax
c010079f:	0f b6 00             	movzbl (%eax),%eax
c01007a2:	84 c0                	test   %al,%al
c01007a4:	74 0a                	je     c01007b0 <debuginfo_eip+0x173>
        return -1;
c01007a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ab:	e9 c0 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bd:	29 c2                	sub    %eax,%edx
c01007bf:	89 d0                	mov    %edx,%eax
c01007c1:	c1 f8 02             	sar    $0x2,%eax
c01007c4:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007ca:	83 e8 01             	sub    $0x1,%eax
c01007cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007d7:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007de:	00 
c01007df:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	89 04 24             	mov    %eax,(%esp)
c01007f3:	e8 ef fc ff ff       	call   c01004e7 <stab_binsearch>
    if (lfile == 0)
c01007f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007fb:	85 c0                	test   %eax,%eax
c01007fd:	75 0a                	jne    c0100809 <debuginfo_eip+0x1cc>
        return -1;
c01007ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100804:	e9 67 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100809:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010080c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010080f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100812:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100815:	8b 45 08             	mov    0x8(%ebp),%eax
c0100818:	89 44 24 10          	mov    %eax,0x10(%esp)
c010081c:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100823:	00 
c0100824:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100827:	89 44 24 08          	mov    %eax,0x8(%esp)
c010082b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010082e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100835:	89 04 24             	mov    %eax,(%esp)
c0100838:	e8 aa fc ff ff       	call   c01004e7 <stab_binsearch>

    if (lfun <= rfun) {
c010083d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100840:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100843:	39 c2                	cmp    %eax,%edx
c0100845:	7f 7c                	jg     c01008c3 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010084a:	89 c2                	mov    %eax,%edx
c010084c:	89 d0                	mov    %edx,%eax
c010084e:	01 c0                	add    %eax,%eax
c0100850:	01 d0                	add    %edx,%eax
c0100852:	c1 e0 02             	shl    $0x2,%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	8b 10                	mov    (%eax),%edx
c010085e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100861:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100864:	29 c1                	sub    %eax,%ecx
c0100866:	89 c8                	mov    %ecx,%eax
c0100868:	39 c2                	cmp    %eax,%edx
c010086a:	73 22                	jae    c010088e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010086c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010086f:	89 c2                	mov    %eax,%edx
c0100871:	89 d0                	mov    %edx,%eax
c0100873:	01 c0                	add    %eax,%eax
c0100875:	01 d0                	add    %edx,%eax
c0100877:	c1 e0 02             	shl    $0x2,%eax
c010087a:	89 c2                	mov    %eax,%edx
c010087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087f:	01 d0                	add    %edx,%eax
c0100881:	8b 10                	mov    (%eax),%edx
c0100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100886:	01 c2                	add    %eax,%edx
c0100888:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010088e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	89 d0                	mov    %edx,%eax
c0100895:	01 c0                	add    %eax,%eax
c0100897:	01 d0                	add    %edx,%eax
c0100899:	c1 e0 02             	shl    $0x2,%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a1:	01 d0                	add    %edx,%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 b8 49 01 00       	call   c01152a6 <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 c1 fb ff ff       	call   c01004e7 <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 24                	jg     c0100954 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	89 c2                	mov    %eax,%edx
c0100940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100943:	01 d0                	add    %edx,%eax
c0100945:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100949:	0f b7 d0             	movzwl %ax,%edx
c010094c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094f:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100952:	eb 13                	jmp    c0100967 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100959:	e9 12 01 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100961:	83 e8 01             	sub    $0x1,%eax
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100967:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010096a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010096d:	39 c2                	cmp    %eax,%edx
c010096f:	7c 56                	jl     c01009c7 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100971:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100974:	89 c2                	mov    %eax,%edx
c0100976:	89 d0                	mov    %edx,%eax
c0100978:	01 c0                	add    %eax,%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	c1 e0 02             	shl    $0x2,%eax
c010097f:	89 c2                	mov    %eax,%edx
c0100981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100984:	01 d0                	add    %edx,%eax
c0100986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010098a:	3c 84                	cmp    $0x84,%al
c010098c:	74 39                	je     c01009c7 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010098e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100991:	89 c2                	mov    %eax,%edx
c0100993:	89 d0                	mov    %edx,%eax
c0100995:	01 c0                	add    %eax,%eax
c0100997:	01 d0                	add    %edx,%eax
c0100999:	c1 e0 02             	shl    $0x2,%eax
c010099c:	89 c2                	mov    %eax,%edx
c010099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a1:	01 d0                	add    %edx,%eax
c01009a3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009a7:	3c 64                	cmp    $0x64,%al
c01009a9:	75 b3                	jne    c010095e <debuginfo_eip+0x321>
c01009ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ae:	89 c2                	mov    %eax,%edx
c01009b0:	89 d0                	mov    %edx,%eax
c01009b2:	01 c0                	add    %eax,%eax
c01009b4:	01 d0                	add    %edx,%eax
c01009b6:	c1 e0 02             	shl    $0x2,%eax
c01009b9:	89 c2                	mov    %eax,%edx
c01009bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009be:	01 d0                	add    %edx,%eax
c01009c0:	8b 40 08             	mov    0x8(%eax),%eax
c01009c3:	85 c0                	test   %eax,%eax
c01009c5:	74 97                	je     c010095e <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009cd:	39 c2                	cmp    %eax,%edx
c01009cf:	7c 46                	jl     c0100a17 <debuginfo_eip+0x3da>
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	89 c2                	mov    %eax,%edx
c01009d6:	89 d0                	mov    %edx,%eax
c01009d8:	01 c0                	add    %eax,%eax
c01009da:	01 d0                	add    %edx,%eax
c01009dc:	c1 e0 02             	shl    $0x2,%eax
c01009df:	89 c2                	mov    %eax,%edx
c01009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e4:	01 d0                	add    %edx,%eax
c01009e6:	8b 10                	mov    (%eax),%edx
c01009e8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ee:	29 c1                	sub    %eax,%ecx
c01009f0:	89 c8                	mov    %ecx,%eax
c01009f2:	39 c2                	cmp    %eax,%edx
c01009f4:	73 21                	jae    c0100a17 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f9:	89 c2                	mov    %eax,%edx
c01009fb:	89 d0                	mov    %edx,%eax
c01009fd:	01 c0                	add    %eax,%eax
c01009ff:	01 d0                	add    %edx,%eax
c0100a01:	c1 e0 02             	shl    $0x2,%eax
c0100a04:	89 c2                	mov    %eax,%edx
c0100a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a09:	01 d0                	add    %edx,%eax
c0100a0b:	8b 10                	mov    (%eax),%edx
c0100a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a10:	01 c2                	add    %eax,%edx
c0100a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a15:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a1d:	39 c2                	cmp    %eax,%edx
c0100a1f:	7d 4a                	jge    c0100a6b <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a24:	83 c0 01             	add    $0x1,%eax
c0100a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a2a:	eb 18                	jmp    c0100a44 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a2f:	8b 40 14             	mov    0x14(%eax),%eax
c0100a32:	8d 50 01             	lea    0x1(%eax),%edx
c0100a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a38:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3e:	83 c0 01             	add    $0x1,%eax
c0100a41:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a44:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a4a:	39 c2                	cmp    %eax,%edx
c0100a4c:	7d 1d                	jge    c0100a6b <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a51:	89 c2                	mov    %eax,%edx
c0100a53:	89 d0                	mov    %edx,%eax
c0100a55:	01 c0                	add    %eax,%eax
c0100a57:	01 d0                	add    %edx,%eax
c0100a59:	c1 e0 02             	shl    $0x2,%eax
c0100a5c:	89 c2                	mov    %eax,%edx
c0100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a61:	01 d0                	add    %edx,%eax
c0100a63:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a67:	3c a0                	cmp    $0xa0,%al
c0100a69:	74 c1                	je     c0100a2c <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a70:	c9                   	leave  
c0100a71:	c3                   	ret    

c0100a72 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a72:	55                   	push   %ebp
c0100a73:	89 e5                	mov    %esp,%ebp
c0100a75:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a78:	c7 04 24 72 56 11 c0 	movl   $0xc0115672,(%esp)
c0100a7f:	e8 e1 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a84:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0100a8b:	c0 
c0100a8c:	c7 04 24 8b 56 11 c0 	movl   $0xc011568b,(%esp)
c0100a93:	e8 cd f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a98:	c7 44 24 04 bb 55 11 	movl   $0xc01155bb,0x4(%esp)
c0100a9f:	c0 
c0100aa0:	c7 04 24 a3 56 11 c0 	movl   $0xc01156a3,(%esp)
c0100aa7:	e8 b9 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100aac:	c7 44 24 04 d0 ee 14 	movl   $0xc014eed0,0x4(%esp)
c0100ab3:	c0 
c0100ab4:	c7 04 24 bb 56 11 c0 	movl   $0xc01156bb,(%esp)
c0100abb:	e8 a5 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100ac0:	c7 44 24 04 04 32 15 	movl   $0xc0153204,0x4(%esp)
c0100ac7:	c0 
c0100ac8:	c7 04 24 d3 56 11 c0 	movl   $0xc01156d3,(%esp)
c0100acf:	e8 91 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ad4:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0100ad9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100adf:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100ae4:	29 c2                	sub    %eax,%edx
c0100ae6:	89 d0                	mov    %edx,%eax
c0100ae8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aee:	85 c0                	test   %eax,%eax
c0100af0:	0f 48 c2             	cmovs  %edx,%eax
c0100af3:	c1 f8 0a             	sar    $0xa,%eax
c0100af6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100afa:	c7 04 24 ec 56 11 c0 	movl   $0xc01156ec,(%esp)
c0100b01:	e8 5f f8 ff ff       	call   c0100365 <cprintf>
}
c0100b06:	c9                   	leave  
c0100b07:	c3                   	ret    

c0100b08 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b08:	55                   	push   %ebp
c0100b09:	89 e5                	mov    %esp,%ebp
c0100b0b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b11:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b1b:	89 04 24             	mov    %eax,(%esp)
c0100b1e:	e8 1a fb ff ff       	call   c010063d <debuginfo_eip>
c0100b23:	85 c0                	test   %eax,%eax
c0100b25:	74 15                	je     c0100b3c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2e:	c7 04 24 16 57 11 c0 	movl   $0xc0115716,(%esp)
c0100b35:	e8 2b f8 ff ff       	call   c0100365 <cprintf>
c0100b3a:	eb 6d                	jmp    c0100ba9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b43:	eb 1c                	jmp    c0100b61 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4b:	01 d0                	add    %edx,%eax
c0100b4d:	0f b6 00             	movzbl (%eax),%eax
c0100b50:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b59:	01 ca                	add    %ecx,%edx
c0100b5b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b67:	7f dc                	jg     c0100b45 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b69:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	01 d0                	add    %edx,%eax
c0100b74:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b7d:	89 d1                	mov    %edx,%ecx
c0100b7f:	29 c1                	sub    %eax,%ecx
c0100b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b87:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b8b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b91:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b95:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b9d:	c7 04 24 32 57 11 c0 	movl   $0xc0115732,(%esp)
c0100ba4:	e8 bc f7 ff ff       	call   c0100365 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ba9:	c9                   	leave  
c0100baa:	c3                   	ret    

c0100bab <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bab:	55                   	push   %ebp
c0100bac:	89 e5                	mov    %esp,%ebp
c0100bae:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bb1:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bba:	c9                   	leave  
c0100bbb:	c3                   	ret    

c0100bbc <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bbc:	55                   	push   %ebp
c0100bbd:	89 e5                	mov    %esp,%ebp
c0100bbf:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bc2:	89 e8                	mov    %ebp,%eax
c0100bc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100bc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100bcd:	e8 d9 ff ff ff       	call   c0100bab <read_eip>
c0100bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100bd5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bdc:	e9 88 00 00 00       	jmp    c0100c69 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bef:	c7 04 24 44 57 11 c0 	movl   $0xc0115744,(%esp)
c0100bf6:	e8 6a f7 ff ff       	call   c0100365 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfe:	83 c0 08             	add    $0x8,%eax
c0100c01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100c04:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c0b:	eb 25                	jmp    c0100c32 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c1a:	01 d0                	add    %edx,%eax
c0100c1c:	8b 00                	mov    (%eax),%eax
c0100c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c22:	c7 04 24 60 57 11 c0 	movl   $0xc0115760,(%esp)
c0100c29:	e8 37 f7 ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100c2e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100c32:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100c36:	7e d5                	jle    c0100c0d <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100c38:	c7 04 24 68 57 11 c0 	movl   $0xc0115768,(%esp)
c0100c3f:	e8 21 f7 ff ff       	call   c0100365 <cprintf>
        print_debuginfo(eip - 1);
c0100c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c47:	83 e8 01             	sub    $0x1,%eax
c0100c4a:	89 04 24             	mov    %eax,(%esp)
c0100c4d:	e8 b6 fe ff ff       	call   c0100b08 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c55:	83 c0 04             	add    $0x4,%eax
c0100c58:	8b 00                	mov    (%eax),%eax
c0100c5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c60:	8b 00                	mov    (%eax),%eax
c0100c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100c65:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c6d:	74 0a                	je     c0100c79 <print_stackframe+0xbd>
c0100c6f:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c73:	0f 8e 68 ff ff ff    	jle    c0100be1 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100c79:	c9                   	leave  
c0100c7a:	c3                   	ret    

c0100c7b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c7b:	55                   	push   %ebp
c0100c7c:	89 e5                	mov    %esp,%ebp
c0100c7e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c88:	eb 0c                	jmp    c0100c96 <parse+0x1b>
            *buf ++ = '\0';
c0100c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8d:	8d 50 01             	lea    0x1(%eax),%edx
c0100c90:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c93:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c99:	0f b6 00             	movzbl (%eax),%eax
c0100c9c:	84 c0                	test   %al,%al
c0100c9e:	74 1d                	je     c0100cbd <parse+0x42>
c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca3:	0f b6 00             	movzbl (%eax),%eax
c0100ca6:	0f be c0             	movsbl %al,%eax
c0100ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cad:	c7 04 24 ec 57 11 c0 	movl   $0xc01157ec,(%esp)
c0100cb4:	e8 ba 45 01 00       	call   c0115273 <strchr>
c0100cb9:	85 c0                	test   %eax,%eax
c0100cbb:	75 cd                	jne    c0100c8a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc0:	0f b6 00             	movzbl (%eax),%eax
c0100cc3:	84 c0                	test   %al,%al
c0100cc5:	75 02                	jne    c0100cc9 <parse+0x4e>
            break;
c0100cc7:	eb 67                	jmp    c0100d30 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cc9:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100ccd:	75 14                	jne    c0100ce3 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100ccf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cd6:	00 
c0100cd7:	c7 04 24 f1 57 11 c0 	movl   $0xc01157f1,(%esp)
c0100cde:	e8 82 f6 ff ff       	call   c0100365 <cprintf>
        }
        argv[argc ++] = buf;
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	8d 50 01             	lea    0x1(%eax),%edx
c0100ce9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cf6:	01 c2                	add    %eax,%edx
c0100cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfb:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cfd:	eb 04                	jmp    c0100d03 <parse+0x88>
            buf ++;
c0100cff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d06:	0f b6 00             	movzbl (%eax),%eax
c0100d09:	84 c0                	test   %al,%al
c0100d0b:	74 1d                	je     c0100d2a <parse+0xaf>
c0100d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d10:	0f b6 00             	movzbl (%eax),%eax
c0100d13:	0f be c0             	movsbl %al,%eax
c0100d16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d1a:	c7 04 24 ec 57 11 c0 	movl   $0xc01157ec,(%esp)
c0100d21:	e8 4d 45 01 00       	call   c0115273 <strchr>
c0100d26:	85 c0                	test   %eax,%eax
c0100d28:	74 d5                	je     c0100cff <parse+0x84>
            buf ++;
        }
    }
c0100d2a:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d2b:	e9 66 ff ff ff       	jmp    c0100c96 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d33:	c9                   	leave  
c0100d34:	c3                   	ret    

c0100d35 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d35:	55                   	push   %ebp
c0100d36:	89 e5                	mov    %esp,%ebp
c0100d38:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d3b:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d45:	89 04 24             	mov    %eax,(%esp)
c0100d48:	e8 2e ff ff ff       	call   c0100c7b <parse>
c0100d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d54:	75 0a                	jne    c0100d60 <runcmd+0x2b>
        return 0;
c0100d56:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d5b:	e9 85 00 00 00       	jmp    c0100de5 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d67:	eb 5c                	jmp    c0100dc5 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d69:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6f:	89 d0                	mov    %edx,%eax
c0100d71:	01 c0                	add    %eax,%eax
c0100d73:	01 d0                	add    %edx,%eax
c0100d75:	c1 e0 02             	shl    $0x2,%eax
c0100d78:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100d7d:	8b 00                	mov    (%eax),%eax
c0100d7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d83:	89 04 24             	mov    %eax,(%esp)
c0100d86:	e8 49 44 01 00       	call   c01151d4 <strcmp>
c0100d8b:	85 c0                	test   %eax,%eax
c0100d8d:	75 32                	jne    c0100dc1 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d92:	89 d0                	mov    %edx,%eax
c0100d94:	01 c0                	add    %eax,%eax
c0100d96:	01 d0                	add    %edx,%eax
c0100d98:	c1 e0 02             	shl    $0x2,%eax
c0100d9b:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100da0:	8b 40 08             	mov    0x8(%eax),%eax
c0100da3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100da6:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100da9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100dac:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100db0:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100db3:	83 c2 04             	add    $0x4,%edx
c0100db6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100dba:	89 0c 24             	mov    %ecx,(%esp)
c0100dbd:	ff d0                	call   *%eax
c0100dbf:	eb 24                	jmp    c0100de5 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc8:	83 f8 02             	cmp    $0x2,%eax
c0100dcb:	76 9c                	jbe    c0100d69 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100dcd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dd4:	c7 04 24 0f 58 11 c0 	movl   $0xc011580f,(%esp)
c0100ddb:	e8 85 f5 ff ff       	call   c0100365 <cprintf>
    return 0;
c0100de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100de5:	c9                   	leave  
c0100de6:	c3                   	ret    

c0100de7 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100de7:	55                   	push   %ebp
c0100de8:	89 e5                	mov    %esp,%ebp
c0100dea:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ded:	c7 04 24 28 58 11 c0 	movl   $0xc0115828,(%esp)
c0100df4:	e8 6c f5 ff ff       	call   c0100365 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100df9:	c7 04 24 50 58 11 c0 	movl   $0xc0115850,(%esp)
c0100e00:	e8 60 f5 ff ff       	call   c0100365 <cprintf>

    if (tf != NULL) {
c0100e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e09:	74 0b                	je     c0100e16 <kmonitor+0x2f>
        print_trapframe(tf);
c0100e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0e:	89 04 24             	mov    %eax,(%esp)
c0100e11:	e8 ac 16 00 00       	call   c01024c2 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e16:	c7 04 24 75 58 11 c0 	movl   $0xc0115875,(%esp)
c0100e1d:	e8 32 f4 ff ff       	call   c0100254 <readline>
c0100e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e29:	74 18                	je     c0100e43 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e35:	89 04 24             	mov    %eax,(%esp)
c0100e38:	e8 f8 fe ff ff       	call   c0100d35 <runcmd>
c0100e3d:	85 c0                	test   %eax,%eax
c0100e3f:	79 02                	jns    c0100e43 <kmonitor+0x5c>
                break;
c0100e41:	eb 02                	jmp    c0100e45 <kmonitor+0x5e>
            }
        }
    }
c0100e43:	eb d1                	jmp    c0100e16 <kmonitor+0x2f>
}
c0100e45:	c9                   	leave  
c0100e46:	c3                   	ret    

c0100e47 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e47:	55                   	push   %ebp
c0100e48:	89 e5                	mov    %esp,%ebp
c0100e4a:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e54:	eb 3f                	jmp    c0100e95 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e59:	89 d0                	mov    %edx,%eax
c0100e5b:	01 c0                	add    %eax,%eax
c0100e5d:	01 d0                	add    %edx,%eax
c0100e5f:	c1 e0 02             	shl    $0x2,%eax
c0100e62:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e67:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6d:	89 d0                	mov    %edx,%eax
c0100e6f:	01 c0                	add    %eax,%eax
c0100e71:	01 d0                	add    %edx,%eax
c0100e73:	c1 e0 02             	shl    $0x2,%eax
c0100e76:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e7b:	8b 00                	mov    (%eax),%eax
c0100e7d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e85:	c7 04 24 79 58 11 c0 	movl   $0xc0115879,(%esp)
c0100e8c:	e8 d4 f4 ff ff       	call   c0100365 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e91:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e98:	83 f8 02             	cmp    $0x2,%eax
c0100e9b:	76 b9                	jbe    c0100e56 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea2:	c9                   	leave  
c0100ea3:	c3                   	ret    

c0100ea4 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100ea4:	55                   	push   %ebp
c0100ea5:	89 e5                	mov    %esp,%ebp
c0100ea7:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100eaa:	e8 c3 fb ff ff       	call   c0100a72 <print_kerninfo>
    return 0;
c0100eaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb4:	c9                   	leave  
c0100eb5:	c3                   	ret    

c0100eb6 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100eb6:	55                   	push   %ebp
c0100eb7:	89 e5                	mov    %esp,%ebp
c0100eb9:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ebc:	e8 fb fc ff ff       	call   c0100bbc <print_stackframe>
    return 0;
c0100ec1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ec6:	c9                   	leave  
c0100ec7:	c3                   	ret    

c0100ec8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100ec8:	55                   	push   %ebp
c0100ec9:	89 e5                	mov    %esp,%ebp
c0100ecb:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100ece:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
c0100ed3:	85 c0                	test   %eax,%eax
c0100ed5:	74 02                	je     c0100ed9 <__panic+0x11>
        goto panic_dead;
c0100ed7:	eb 48                	jmp    c0100f21 <__panic+0x59>
    }
    is_panic = 1;
c0100ed9:	c7 05 00 f3 14 c0 01 	movl   $0x1,0xc014f300
c0100ee0:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ee3:	8d 45 14             	lea    0x14(%ebp),%eax
c0100ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eec:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ef7:	c7 04 24 82 58 11 c0 	movl   $0xc0115882,(%esp)
c0100efe:	e8 62 f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f0d:	89 04 24             	mov    %eax,(%esp)
c0100f10:	e8 15 f4 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f15:	c7 04 24 9e 58 11 c0 	movl   $0xc011589e,(%esp)
c0100f1c:	e8 44 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100f21:	e8 04 12 00 00       	call   c010212a <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f2d:	e8 b5 fe ff ff       	call   c0100de7 <kmonitor>
    }
c0100f32:	eb f2                	jmp    c0100f26 <__panic+0x5e>

c0100f34 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f34:	55                   	push   %ebp
c0100f35:	89 e5                	mov    %esp,%ebp
c0100f37:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f3a:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4e:	c7 04 24 a0 58 11 c0 	movl   $0xc01158a0,(%esp)
c0100f55:	e8 0b f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f61:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f64:	89 04 24             	mov    %eax,(%esp)
c0100f67:	e8 be f3 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f6c:	c7 04 24 9e 58 11 c0 	movl   $0xc011589e,(%esp)
c0100f73:	e8 ed f3 ff ff       	call   c0100365 <cprintf>
    va_end(ap);
}
c0100f78:	c9                   	leave  
c0100f79:	c3                   	ret    

c0100f7a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f7d:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
}
c0100f82:	5d                   	pop    %ebp
c0100f83:	c3                   	ret    

c0100f84 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f84:	55                   	push   %ebp
c0100f85:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f87:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c0100f8c:	5d                   	pop    %ebp
c0100f8d:	c3                   	ret    

c0100f8e <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f8e:	55                   	push   %ebp
c0100f8f:	89 e5                	mov    %esp,%ebp
c0100f91:	83 ec 28             	sub    $0x28,%esp
c0100f94:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f9a:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f9e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100fa2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fa6:	ee                   	out    %al,(%dx)
c0100fa7:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100fad:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100fb1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fb5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fb9:	ee                   	out    %al,(%dx)
c0100fba:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fc0:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fc4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fc8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fcc:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fcd:	c7 05 10 30 15 c0 00 	movl   $0x0,0xc0153010
c0100fd4:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fd7:	c7 04 24 be 58 11 c0 	movl   $0xc01158be,(%esp)
c0100fde:	e8 82 f3 ff ff       	call   c0100365 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fe3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fea:	e8 99 11 00 00       	call   c0102188 <pic_enable>
}
c0100fef:	c9                   	leave  
c0100ff0:	c3                   	ret    

c0100ff1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ff1:	55                   	push   %ebp
c0100ff2:	89 e5                	mov    %esp,%ebp
c0100ff4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ff7:	9c                   	pushf  
c0100ff8:	58                   	pop    %eax
c0100ff9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100fff:	25 00 02 00 00       	and    $0x200,%eax
c0101004:	85 c0                	test   %eax,%eax
c0101006:	74 0c                	je     c0101014 <__intr_save+0x23>
        intr_disable();
c0101008:	e8 1d 11 00 00       	call   c010212a <intr_disable>
        return 1;
c010100d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101012:	eb 05                	jmp    c0101019 <__intr_save+0x28>
    }
    return 0;
c0101014:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101019:	c9                   	leave  
c010101a:	c3                   	ret    

c010101b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010101b:	55                   	push   %ebp
c010101c:	89 e5                	mov    %esp,%ebp
c010101e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101025:	74 05                	je     c010102c <__intr_restore+0x11>
        intr_enable();
c0101027:	e8 f8 10 00 00       	call   c0102124 <intr_enable>
    }
}
c010102c:	c9                   	leave  
c010102d:	c3                   	ret    

c010102e <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010102e:	55                   	push   %ebp
c010102f:	89 e5                	mov    %esp,%ebp
c0101031:	83 ec 10             	sub    $0x10,%esp
c0101034:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010103e:	89 c2                	mov    %eax,%edx
c0101040:	ec                   	in     (%dx),%al
c0101041:	88 45 fd             	mov    %al,-0x3(%ebp)
c0101044:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010104a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010104e:	89 c2                	mov    %eax,%edx
c0101050:	ec                   	in     (%dx),%al
c0101051:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101054:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c010105a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010105e:	89 c2                	mov    %eax,%edx
c0101060:	ec                   	in     (%dx),%al
c0101061:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101064:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c010106a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010106e:	89 c2                	mov    %eax,%edx
c0101070:	ec                   	in     (%dx),%al
c0101071:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101074:	c9                   	leave  
c0101075:	c3                   	ret    

c0101076 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101076:	55                   	push   %ebp
c0101077:	89 e5                	mov    %esp,%ebp
c0101079:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010107c:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101083:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101086:	0f b7 00             	movzwl (%eax),%eax
c0101089:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010108d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101090:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101095:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101098:	0f b7 00             	movzwl (%eax),%eax
c010109b:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010109f:	74 12                	je     c01010b3 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010a1:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01010a8:	66 c7 05 26 f3 14 c0 	movw   $0x3b4,0xc014f326
c01010af:	b4 03 
c01010b1:	eb 13                	jmp    c01010c6 <cga_init+0x50>
    } else {
        *cp = was;
c01010b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010ba:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010bd:	66 c7 05 26 f3 14 c0 	movw   $0x3d4,0xc014f326
c01010c4:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010c6:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010cd:	0f b7 c0             	movzwl %ax,%eax
c01010d0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010d4:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010e1:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010e8:	83 c0 01             	add    $0x1,%eax
c01010eb:	0f b7 c0             	movzwl %ax,%eax
c01010ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f2:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c01010f6:	89 c2                	mov    %eax,%edx
c01010f8:	ec                   	in     (%dx),%al
c01010f9:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01010fc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101100:	0f b6 c0             	movzbl %al,%eax
c0101103:	c1 e0 08             	shl    $0x8,%eax
c0101106:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101109:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101110:	0f b7 c0             	movzwl %ax,%eax
c0101113:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101117:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010111b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010111f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101123:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101124:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010112b:	83 c0 01             	add    $0x1,%eax
c010112e:	0f b7 c0             	movzwl %ax,%eax
c0101131:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101135:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101139:	89 c2                	mov    %eax,%edx
c010113b:	ec                   	in     (%dx),%al
c010113c:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010113f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101143:	0f b6 c0             	movzbl %al,%eax
c0101146:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101149:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010114c:	a3 20 f3 14 c0       	mov    %eax,0xc014f320
    crt_pos = pos;
c0101151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101154:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
}
c010115a:	c9                   	leave  
c010115b:	c3                   	ret    

c010115c <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010115c:	55                   	push   %ebp
c010115d:	89 e5                	mov    %esp,%ebp
c010115f:	83 ec 48             	sub    $0x48,%esp
c0101162:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101168:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010116c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101170:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101174:	ee                   	out    %al,(%dx)
c0101175:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010117b:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010117f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101183:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101187:	ee                   	out    %al,(%dx)
c0101188:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010118e:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101192:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101196:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010119a:	ee                   	out    %al,(%dx)
c010119b:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011a1:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011a5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011a9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011ad:	ee                   	out    %al,(%dx)
c01011ae:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011b4:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011b8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011bc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011c0:	ee                   	out    %al,(%dx)
c01011c1:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011c7:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011cb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011cf:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011d3:	ee                   	out    %al,(%dx)
c01011d4:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01011da:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01011de:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01011e2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01011e6:	ee                   	out    %al,(%dx)
c01011e7:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011ed:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01011f1:	89 c2                	mov    %eax,%edx
c01011f3:	ec                   	in     (%dx),%al
c01011f4:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01011f7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01011fb:	3c ff                	cmp    $0xff,%al
c01011fd:	0f 95 c0             	setne  %al
c0101200:	0f b6 c0             	movzbl %al,%eax
c0101203:	a3 28 f3 14 c0       	mov    %eax,0xc014f328
c0101208:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010120e:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101212:	89 c2                	mov    %eax,%edx
c0101214:	ec                   	in     (%dx),%al
c0101215:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101218:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010121e:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101222:	89 c2                	mov    %eax,%edx
c0101224:	ec                   	in     (%dx),%al
c0101225:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101228:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c010122d:	85 c0                	test   %eax,%eax
c010122f:	74 0c                	je     c010123d <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101231:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101238:	e8 4b 0f 00 00       	call   c0102188 <pic_enable>
    }
}
c010123d:	c9                   	leave  
c010123e:	c3                   	ret    

c010123f <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010123f:	55                   	push   %ebp
c0101240:	89 e5                	mov    %esp,%ebp
c0101242:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101245:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010124c:	eb 09                	jmp    c0101257 <lpt_putc_sub+0x18>
        delay();
c010124e:	e8 db fd ff ff       	call   c010102e <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101253:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101257:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010125d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101261:	89 c2                	mov    %eax,%edx
c0101263:	ec                   	in     (%dx),%al
c0101264:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101267:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010126b:	84 c0                	test   %al,%al
c010126d:	78 09                	js     c0101278 <lpt_putc_sub+0x39>
c010126f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101276:	7e d6                	jle    c010124e <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101278:	8b 45 08             	mov    0x8(%ebp),%eax
c010127b:	0f b6 c0             	movzbl %al,%eax
c010127e:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101284:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101287:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010128b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010128f:	ee                   	out    %al,(%dx)
c0101290:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101296:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010129a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010129e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012a2:	ee                   	out    %al,(%dx)
c01012a3:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012a9:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01012ad:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012b1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012b5:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012b6:	c9                   	leave  
c01012b7:	c3                   	ret    

c01012b8 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012b8:	55                   	push   %ebp
c01012b9:	89 e5                	mov    %esp,%ebp
c01012bb:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012be:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012c2:	74 0d                	je     c01012d1 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01012c7:	89 04 24             	mov    %eax,(%esp)
c01012ca:	e8 70 ff ff ff       	call   c010123f <lpt_putc_sub>
c01012cf:	eb 24                	jmp    c01012f5 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012d8:	e8 62 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub(' ');
c01012dd:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01012e4:	e8 56 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub('\b');
c01012e9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012f0:	e8 4a ff ff ff       	call   c010123f <lpt_putc_sub>
    }
}
c01012f5:	c9                   	leave  
c01012f6:	c3                   	ret    

c01012f7 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01012f7:	55                   	push   %ebp
c01012f8:	89 e5                	mov    %esp,%ebp
c01012fa:	53                   	push   %ebx
c01012fb:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01012fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101301:	b0 00                	mov    $0x0,%al
c0101303:	85 c0                	test   %eax,%eax
c0101305:	75 07                	jne    c010130e <cga_putc+0x17>
        c |= 0x0700;
c0101307:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101311:	0f b6 c0             	movzbl %al,%eax
c0101314:	83 f8 0a             	cmp    $0xa,%eax
c0101317:	74 4c                	je     c0101365 <cga_putc+0x6e>
c0101319:	83 f8 0d             	cmp    $0xd,%eax
c010131c:	74 57                	je     c0101375 <cga_putc+0x7e>
c010131e:	83 f8 08             	cmp    $0x8,%eax
c0101321:	0f 85 88 00 00 00    	jne    c01013af <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101327:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010132e:	66 85 c0             	test   %ax,%ax
c0101331:	74 30                	je     c0101363 <cga_putc+0x6c>
            crt_pos --;
c0101333:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010133a:	83 e8 01             	sub    $0x1,%eax
c010133d:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101343:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101348:	0f b7 15 24 f3 14 c0 	movzwl 0xc014f324,%edx
c010134f:	0f b7 d2             	movzwl %dx,%edx
c0101352:	01 d2                	add    %edx,%edx
c0101354:	01 c2                	add    %eax,%edx
c0101356:	8b 45 08             	mov    0x8(%ebp),%eax
c0101359:	b0 00                	mov    $0x0,%al
c010135b:	83 c8 20             	or     $0x20,%eax
c010135e:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101361:	eb 72                	jmp    c01013d5 <cga_putc+0xde>
c0101363:	eb 70                	jmp    c01013d5 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101365:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010136c:	83 c0 50             	add    $0x50,%eax
c010136f:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101375:	0f b7 1d 24 f3 14 c0 	movzwl 0xc014f324,%ebx
c010137c:	0f b7 0d 24 f3 14 c0 	movzwl 0xc014f324,%ecx
c0101383:	0f b7 c1             	movzwl %cx,%eax
c0101386:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010138c:	c1 e8 10             	shr    $0x10,%eax
c010138f:	89 c2                	mov    %eax,%edx
c0101391:	66 c1 ea 06          	shr    $0x6,%dx
c0101395:	89 d0                	mov    %edx,%eax
c0101397:	c1 e0 02             	shl    $0x2,%eax
c010139a:	01 d0                	add    %edx,%eax
c010139c:	c1 e0 04             	shl    $0x4,%eax
c010139f:	29 c1                	sub    %eax,%ecx
c01013a1:	89 ca                	mov    %ecx,%edx
c01013a3:	89 d8                	mov    %ebx,%eax
c01013a5:	29 d0                	sub    %edx,%eax
c01013a7:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
        break;
c01013ad:	eb 26                	jmp    c01013d5 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01013af:	8b 0d 20 f3 14 c0    	mov    0xc014f320,%ecx
c01013b5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013bc:	8d 50 01             	lea    0x1(%eax),%edx
c01013bf:	66 89 15 24 f3 14 c0 	mov    %dx,0xc014f324
c01013c6:	0f b7 c0             	movzwl %ax,%eax
c01013c9:	01 c0                	add    %eax,%eax
c01013cb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01013d1:	66 89 02             	mov    %ax,(%edx)
        break;
c01013d4:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013d5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013dc:	66 3d cf 07          	cmp    $0x7cf,%ax
c01013e0:	76 5b                	jbe    c010143d <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01013e2:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013e7:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01013ed:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013f2:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01013f9:	00 
c01013fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01013fe:	89 04 24             	mov    %eax,(%esp)
c0101401:	e8 6b 40 01 00       	call   c0115471 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101406:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010140d:	eb 15                	jmp    c0101424 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010140f:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101414:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101417:	01 d2                	add    %edx,%edx
c0101419:	01 d0                	add    %edx,%eax
c010141b:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101420:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101424:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010142b:	7e e2                	jle    c010140f <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010142d:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101434:	83 e8 50             	sub    $0x50,%eax
c0101437:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010143d:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101444:	0f b7 c0             	movzwl %ax,%eax
c0101447:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010144b:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010144f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101453:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101457:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101458:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010145f:	66 c1 e8 08          	shr    $0x8,%ax
c0101463:	0f b6 c0             	movzbl %al,%eax
c0101466:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c010146d:	83 c2 01             	add    $0x1,%edx
c0101470:	0f b7 d2             	movzwl %dx,%edx
c0101473:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101477:	88 45 ed             	mov    %al,-0x13(%ebp)
c010147a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010147e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101482:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101483:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010148a:	0f b7 c0             	movzwl %ax,%eax
c010148d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101491:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101495:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101499:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010149d:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010149e:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01014a5:	0f b6 c0             	movzbl %al,%eax
c01014a8:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c01014af:	83 c2 01             	add    $0x1,%edx
c01014b2:	0f b7 d2             	movzwl %dx,%edx
c01014b5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014b9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014bc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014c0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014c4:	ee                   	out    %al,(%dx)
}
c01014c5:	83 c4 34             	add    $0x34,%esp
c01014c8:	5b                   	pop    %ebx
c01014c9:	5d                   	pop    %ebp
c01014ca:	c3                   	ret    

c01014cb <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014cb:	55                   	push   %ebp
c01014cc:	89 e5                	mov    %esp,%ebp
c01014ce:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014d8:	eb 09                	jmp    c01014e3 <serial_putc_sub+0x18>
        delay();
c01014da:	e8 4f fb ff ff       	call   c010102e <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01014e3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014ed:	89 c2                	mov    %eax,%edx
c01014ef:	ec                   	in     (%dx),%al
c01014f0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014f3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01014f7:	0f b6 c0             	movzbl %al,%eax
c01014fa:	83 e0 20             	and    $0x20,%eax
c01014fd:	85 c0                	test   %eax,%eax
c01014ff:	75 09                	jne    c010150a <serial_putc_sub+0x3f>
c0101501:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101508:	7e d0                	jle    c01014da <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010150a:	8b 45 08             	mov    0x8(%ebp),%eax
c010150d:	0f b6 c0             	movzbl %al,%eax
c0101510:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101516:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101519:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010151d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101521:	ee                   	out    %al,(%dx)
}
c0101522:	c9                   	leave  
c0101523:	c3                   	ret    

c0101524 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101524:	55                   	push   %ebp
c0101525:	89 e5                	mov    %esp,%ebp
c0101527:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010152a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010152e:	74 0d                	je     c010153d <serial_putc+0x19>
        serial_putc_sub(c);
c0101530:	8b 45 08             	mov    0x8(%ebp),%eax
c0101533:	89 04 24             	mov    %eax,(%esp)
c0101536:	e8 90 ff ff ff       	call   c01014cb <serial_putc_sub>
c010153b:	eb 24                	jmp    c0101561 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010153d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101544:	e8 82 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub(' ');
c0101549:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101550:	e8 76 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub('\b');
c0101555:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010155c:	e8 6a ff ff ff       	call   c01014cb <serial_putc_sub>
    }
}
c0101561:	c9                   	leave  
c0101562:	c3                   	ret    

c0101563 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101563:	55                   	push   %ebp
c0101564:	89 e5                	mov    %esp,%ebp
c0101566:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101569:	eb 33                	jmp    c010159e <cons_intr+0x3b>
        if (c != 0) {
c010156b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010156f:	74 2d                	je     c010159e <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101571:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c0101576:	8d 50 01             	lea    0x1(%eax),%edx
c0101579:	89 15 44 f5 14 c0    	mov    %edx,0xc014f544
c010157f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101582:	88 90 40 f3 14 c0    	mov    %dl,-0x3feb0cc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101588:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010158d:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101592:	75 0a                	jne    c010159e <cons_intr+0x3b>
                cons.wpos = 0;
c0101594:	c7 05 44 f5 14 c0 00 	movl   $0x0,0xc014f544
c010159b:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010159e:	8b 45 08             	mov    0x8(%ebp),%eax
c01015a1:	ff d0                	call   *%eax
c01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015a6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01015aa:	75 bf                	jne    c010156b <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01015ac:	c9                   	leave  
c01015ad:	c3                   	ret    

c01015ae <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01015ae:	55                   	push   %ebp
c01015af:	89 e5                	mov    %esp,%ebp
c01015b1:	83 ec 10             	sub    $0x10,%esp
c01015b4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015be:	89 c2                	mov    %eax,%edx
c01015c0:	ec                   	in     (%dx),%al
c01015c1:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 07                	jne    c01015d9 <serial_proc_data+0x2b>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	eb 2a                	jmp    c0101603 <serial_proc_data+0x55>
c01015d9:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015df:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01015e3:	89 c2                	mov    %eax,%edx
c01015e5:	ec                   	in     (%dx),%al
c01015e6:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01015e9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01015ed:	0f b6 c0             	movzbl %al,%eax
c01015f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01015f3:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01015f7:	75 07                	jne    c0101600 <serial_proc_data+0x52>
        c = '\b';
c01015f9:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101600:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101603:	c9                   	leave  
c0101604:	c3                   	ret    

c0101605 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101605:	55                   	push   %ebp
c0101606:	89 e5                	mov    %esp,%ebp
c0101608:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010160b:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c0101610:	85 c0                	test   %eax,%eax
c0101612:	74 0c                	je     c0101620 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101614:	c7 04 24 ae 15 10 c0 	movl   $0xc01015ae,(%esp)
c010161b:	e8 43 ff ff ff       	call   c0101563 <cons_intr>
    }
}
c0101620:	c9                   	leave  
c0101621:	c3                   	ret    

c0101622 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101622:	55                   	push   %ebp
c0101623:	89 e5                	mov    %esp,%ebp
c0101625:	83 ec 38             	sub    $0x38,%esp
c0101628:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010162e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101632:	89 c2                	mov    %eax,%edx
c0101634:	ec                   	in     (%dx),%al
c0101635:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101638:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010163c:	0f b6 c0             	movzbl %al,%eax
c010163f:	83 e0 01             	and    $0x1,%eax
c0101642:	85 c0                	test   %eax,%eax
c0101644:	75 0a                	jne    c0101650 <kbd_proc_data+0x2e>
        return -1;
c0101646:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010164b:	e9 59 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
c0101650:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101656:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010165a:	89 c2                	mov    %eax,%edx
c010165c:	ec                   	in     (%dx),%al
c010165d:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101660:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101664:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101667:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010166b:	75 17                	jne    c0101684 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010166d:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101672:	83 c8 40             	or     $0x40,%eax
c0101675:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c010167a:	b8 00 00 00 00       	mov    $0x0,%eax
c010167f:	e9 25 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	84 c0                	test   %al,%al
c010168a:	79 47                	jns    c01016d3 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010168c:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101691:	83 e0 40             	and    $0x40,%eax
c0101694:	85 c0                	test   %eax,%eax
c0101696:	75 09                	jne    c01016a1 <kbd_proc_data+0x7f>
c0101698:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010169c:	83 e0 7f             	and    $0x7f,%eax
c010169f:	eb 04                	jmp    c01016a5 <kbd_proc_data+0x83>
c01016a1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a5:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01016a8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016ac:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016b3:	83 c8 40             	or     $0x40,%eax
c01016b6:	0f b6 c0             	movzbl %al,%eax
c01016b9:	f7 d0                	not    %eax
c01016bb:	89 c2                	mov    %eax,%edx
c01016bd:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016c2:	21 d0                	and    %edx,%eax
c01016c4:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c01016c9:	b8 00 00 00 00       	mov    $0x0,%eax
c01016ce:	e9 d6 00 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016d3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016d8:	83 e0 40             	and    $0x40,%eax
c01016db:	85 c0                	test   %eax,%eax
c01016dd:	74 11                	je     c01016f0 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016df:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016e3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016e8:	83 e0 bf             	and    $0xffffffbf,%eax
c01016eb:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    }

    shift |= shiftcode[data];
c01016f0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016f4:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016fb:	0f b6 d0             	movzbl %al,%edx
c01016fe:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101703:	09 d0                	or     %edx,%eax
c0101705:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    shift ^= togglecode[data];
c010170a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010170e:	0f b6 80 60 e1 14 c0 	movzbl -0x3feb1ea0(%eax),%eax
c0101715:	0f b6 d0             	movzbl %al,%edx
c0101718:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c010171d:	31 d0                	xor    %edx,%eax
c010171f:	a3 48 f5 14 c0       	mov    %eax,0xc014f548

    c = charcode[shift & (CTL | SHIFT)][data];
c0101724:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101729:	83 e0 03             	and    $0x3,%eax
c010172c:	8b 14 85 60 e5 14 c0 	mov    -0x3feb1aa0(,%eax,4),%edx
c0101733:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101737:	01 d0                	add    %edx,%eax
c0101739:	0f b6 00             	movzbl (%eax),%eax
c010173c:	0f b6 c0             	movzbl %al,%eax
c010173f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101742:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101747:	83 e0 08             	and    $0x8,%eax
c010174a:	85 c0                	test   %eax,%eax
c010174c:	74 22                	je     c0101770 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010174e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101752:	7e 0c                	jle    c0101760 <kbd_proc_data+0x13e>
c0101754:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101758:	7f 06                	jg     c0101760 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010175a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010175e:	eb 10                	jmp    c0101770 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101760:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101764:	7e 0a                	jle    c0101770 <kbd_proc_data+0x14e>
c0101766:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010176a:	7f 04                	jg     c0101770 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010176c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101770:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101775:	f7 d0                	not    %eax
c0101777:	83 e0 06             	and    $0x6,%eax
c010177a:	85 c0                	test   %eax,%eax
c010177c:	75 28                	jne    c01017a6 <kbd_proc_data+0x184>
c010177e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101785:	75 1f                	jne    c01017a6 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101787:	c7 04 24 d9 58 11 c0 	movl   $0xc01158d9,(%esp)
c010178e:	e8 d2 eb ff ff       	call   c0100365 <cprintf>
c0101793:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101799:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010179d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01017a1:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01017a5:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01017a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017a9:	c9                   	leave  
c01017aa:	c3                   	ret    

c01017ab <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01017ab:	55                   	push   %ebp
c01017ac:	89 e5                	mov    %esp,%ebp
c01017ae:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01017b1:	c7 04 24 22 16 10 c0 	movl   $0xc0101622,(%esp)
c01017b8:	e8 a6 fd ff ff       	call   c0101563 <cons_intr>
}
c01017bd:	c9                   	leave  
c01017be:	c3                   	ret    

c01017bf <kbd_init>:

static void
kbd_init(void) {
c01017bf:	55                   	push   %ebp
c01017c0:	89 e5                	mov    %esp,%ebp
c01017c2:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017c5:	e8 e1 ff ff ff       	call   c01017ab <kbd_intr>
    pic_enable(IRQ_KBD);
c01017ca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017d1:	e8 b2 09 00 00       	call   c0102188 <pic_enable>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017de:	e8 93 f8 ff ff       	call   c0101076 <cga_init>
    serial_init();
c01017e3:	e8 74 f9 ff ff       	call   c010115c <serial_init>
    kbd_init();
c01017e8:	e8 d2 ff ff ff       	call   c01017bf <kbd_init>
    if (!serial_exists) {
c01017ed:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c01017f2:	85 c0                	test   %eax,%eax
c01017f4:	75 0c                	jne    c0101802 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017f6:	c7 04 24 e5 58 11 c0 	movl   $0xc01158e5,(%esp)
c01017fd:	e8 63 eb ff ff       	call   c0100365 <cprintf>
    }
}
c0101802:	c9                   	leave  
c0101803:	c3                   	ret    

c0101804 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101804:	55                   	push   %ebp
c0101805:	89 e5                	mov    %esp,%ebp
c0101807:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010180a:	e8 e2 f7 ff ff       	call   c0100ff1 <__intr_save>
c010180f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101812:	8b 45 08             	mov    0x8(%ebp),%eax
c0101815:	89 04 24             	mov    %eax,(%esp)
c0101818:	e8 9b fa ff ff       	call   c01012b8 <lpt_putc>
        cga_putc(c);
c010181d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101820:	89 04 24             	mov    %eax,(%esp)
c0101823:	e8 cf fa ff ff       	call   c01012f7 <cga_putc>
        serial_putc(c);
c0101828:	8b 45 08             	mov    0x8(%ebp),%eax
c010182b:	89 04 24             	mov    %eax,(%esp)
c010182e:	e8 f1 fc ff ff       	call   c0101524 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101836:	89 04 24             	mov    %eax,(%esp)
c0101839:	e8 dd f7 ff ff       	call   c010101b <__intr_restore>
}
c010183e:	c9                   	leave  
c010183f:	c3                   	ret    

c0101840 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101840:	55                   	push   %ebp
c0101841:	89 e5                	mov    %esp,%ebp
c0101843:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010184d:	e8 9f f7 ff ff       	call   c0100ff1 <__intr_save>
c0101852:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101855:	e8 ab fd ff ff       	call   c0101605 <serial_intr>
        kbd_intr();
c010185a:	e8 4c ff ff ff       	call   c01017ab <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010185f:	8b 15 40 f5 14 c0    	mov    0xc014f540,%edx
c0101865:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010186a:	39 c2                	cmp    %eax,%edx
c010186c:	74 31                	je     c010189f <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010186e:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c0101873:	8d 50 01             	lea    0x1(%eax),%edx
c0101876:	89 15 40 f5 14 c0    	mov    %edx,0xc014f540
c010187c:	0f b6 80 40 f3 14 c0 	movzbl -0x3feb0cc0(%eax),%eax
c0101883:	0f b6 c0             	movzbl %al,%eax
c0101886:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101889:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c010188e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101893:	75 0a                	jne    c010189f <cons_getc+0x5f>
                cons.rpos = 0;
c0101895:	c7 05 40 f5 14 c0 00 	movl   $0x0,0xc014f540
c010189c:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010189f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018a2:	89 04 24             	mov    %eax,(%esp)
c01018a5:	e8 71 f7 ff ff       	call   c010101b <__intr_restore>
    return c;
c01018aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01018ad:	c9                   	leave  
c01018ae:	c3                   	ret    

c01018af <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	83 ec 14             	sub    $0x14,%esp
c01018b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018bc:	90                   	nop
c01018bd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018c1:	83 c0 07             	add    $0x7,%eax
c01018c4:	0f b7 c0             	movzwl %ax,%eax
c01018c7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018cb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018cf:	89 c2                	mov    %eax,%edx
c01018d1:	ec                   	in     (%dx),%al
c01018d2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018d5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01018d9:	0f b6 c0             	movzbl %al,%eax
c01018dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018e2:	25 80 00 00 00       	and    $0x80,%eax
c01018e7:	85 c0                	test   %eax,%eax
c01018e9:	75 d2                	jne    c01018bd <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018ef:	74 11                	je     c0101902 <ide_wait_ready+0x53>
c01018f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018f4:	83 e0 21             	and    $0x21,%eax
c01018f7:	85 c0                	test   %eax,%eax
c01018f9:	74 07                	je     c0101902 <ide_wait_ready+0x53>
        return -1;
c01018fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101900:	eb 05                	jmp    c0101907 <ide_wait_ready+0x58>
    }
    return 0;
c0101902:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101907:	c9                   	leave  
c0101908:	c3                   	ret    

c0101909 <ide_init>:

void
ide_init(void) {
c0101909:	55                   	push   %ebp
c010190a:	89 e5                	mov    %esp,%ebp
c010190c:	57                   	push   %edi
c010190d:	53                   	push   %ebx
c010190e:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101914:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010191a:	e9 d6 02 00 00       	jmp    c0101bf5 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010191f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101923:	c1 e0 03             	shl    $0x3,%eax
c0101926:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010192d:	29 c2                	sub    %eax,%edx
c010192f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101935:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101938:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010193c:	66 d1 e8             	shr    %ax
c010193f:	0f b7 c0             	movzwl %ax,%eax
c0101942:	0f b7 04 85 04 59 11 	movzwl -0x3feea6fc(,%eax,4),%eax
c0101949:	c0 
c010194a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010194e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101952:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101959:	00 
c010195a:	89 04 24             	mov    %eax,(%esp)
c010195d:	e8 4d ff ff ff       	call   c01018af <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101962:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101966:	83 e0 01             	and    $0x1,%eax
c0101969:	c1 e0 04             	shl    $0x4,%eax
c010196c:	83 c8 e0             	or     $0xffffffe0,%eax
c010196f:	0f b6 c0             	movzbl %al,%eax
c0101972:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101976:	83 c2 06             	add    $0x6,%edx
c0101979:	0f b7 d2             	movzwl %dx,%edx
c010197c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101980:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101983:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101987:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010198b:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010198c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101990:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101997:	00 
c0101998:	89 04 24             	mov    %eax,(%esp)
c010199b:	e8 0f ff ff ff       	call   c01018af <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01019a0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019a4:	83 c0 07             	add    $0x7,%eax
c01019a7:	0f b7 c0             	movzwl %ax,%eax
c01019aa:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01019ae:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01019b2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019b6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019ba:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019c6:	00 
c01019c7:	89 04 24             	mov    %eax,(%esp)
c01019ca:	e8 e0 fe ff ff       	call   c01018af <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019d3:	83 c0 07             	add    $0x7,%eax
c01019d6:	0f b7 c0             	movzwl %ax,%eax
c01019d9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019dd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01019e1:	89 c2                	mov    %eax,%edx
c01019e3:	ec                   	in     (%dx),%al
c01019e4:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01019e7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01019eb:	84 c0                	test   %al,%al
c01019ed:	0f 84 f7 01 00 00    	je     c0101bea <ide_init+0x2e1>
c01019f3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019f7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019fe:	00 
c01019ff:	89 04 24             	mov    %eax,(%esp)
c0101a02:	e8 a8 fe ff ff       	call   c01018af <ide_wait_ready>
c0101a07:	85 c0                	test   %eax,%eax
c0101a09:	0f 85 db 01 00 00    	jne    c0101bea <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101a0f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a13:	c1 e0 03             	shl    $0x3,%eax
c0101a16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1d:	29 c2                	sub    %eax,%edx
c0101a1f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101a25:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a28:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a2c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a2f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a35:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a38:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a3f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a42:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a45:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a48:	89 cb                	mov    %ecx,%ebx
c0101a4a:	89 df                	mov    %ebx,%edi
c0101a4c:	89 c1                	mov    %eax,%ecx
c0101a4e:	fc                   	cld    
c0101a4f:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a51:	89 c8                	mov    %ecx,%eax
c0101a53:	89 fb                	mov    %edi,%ebx
c0101a55:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a58:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a5b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a67:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a73:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a78:	85 c0                	test   %eax,%eax
c0101a7a:	74 0e                	je     c0101a8a <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a7f:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a88:	eb 09                	jmp    c0101a93 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a8d:	8b 40 78             	mov    0x78(%eax),%eax
c0101a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a93:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a97:	c1 e0 03             	shl    $0x3,%eax
c0101a9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa1:	29 c2                	sub    %eax,%edx
c0101aa3:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101aac:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101aaf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ab3:	c1 e0 03             	shl    $0x3,%eax
c0101ab6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101abd:	29 c2                	sub    %eax,%edx
c0101abf:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ac8:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101acb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ace:	83 c0 62             	add    $0x62,%eax
c0101ad1:	0f b7 00             	movzwl (%eax),%eax
c0101ad4:	0f b7 c0             	movzwl %ax,%eax
c0101ad7:	25 00 02 00 00       	and    $0x200,%eax
c0101adc:	85 c0                	test   %eax,%eax
c0101ade:	75 24                	jne    c0101b04 <ide_init+0x1fb>
c0101ae0:	c7 44 24 0c 0c 59 11 	movl   $0xc011590c,0xc(%esp)
c0101ae7:	c0 
c0101ae8:	c7 44 24 08 4f 59 11 	movl   $0xc011594f,0x8(%esp)
c0101aef:	c0 
c0101af0:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101af7:	00 
c0101af8:	c7 04 24 64 59 11 c0 	movl   $0xc0115964,(%esp)
c0101aff:	e8 c4 f3 ff ff       	call   c0100ec8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101b04:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b08:	c1 e0 03             	shl    $0x3,%eax
c0101b0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b12:	29 c2                	sub    %eax,%edx
c0101b14:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101b1a:	83 c0 0c             	add    $0xc,%eax
c0101b1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b23:	83 c0 36             	add    $0x36,%eax
c0101b26:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b29:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b37:	eb 34                	jmp    c0101b6d <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b3f:	01 c2                	add    %eax,%edx
c0101b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b44:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b4a:	01 c8                	add    %ecx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	88 02                	mov    %al,(%edx)
c0101b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b54:	8d 50 01             	lea    0x1(%eax),%edx
c0101b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b5a:	01 c2                	add    %eax,%edx
c0101b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b5f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b62:	01 c8                	add    %ecx,%eax
c0101b64:	0f b6 00             	movzbl (%eax),%eax
c0101b67:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b69:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b70:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b73:	72 c4                	jb     c0101b39 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b78:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b7b:	01 d0                	add    %edx,%eax
c0101b7d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b83:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b86:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b89:	85 c0                	test   %eax,%eax
c0101b8b:	74 0f                	je     c0101b9c <ide_init+0x293>
c0101b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b90:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b93:	01 d0                	add    %edx,%eax
c0101b95:	0f b6 00             	movzbl (%eax),%eax
c0101b98:	3c 20                	cmp    $0x20,%al
c0101b9a:	74 d9                	je     c0101b75 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b9c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ba0:	c1 e0 03             	shl    $0x3,%eax
c0101ba3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101baa:	29 c2                	sub    %eax,%edx
c0101bac:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bb2:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101bb5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bb9:	c1 e0 03             	shl    $0x3,%eax
c0101bbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bc3:	29 c2                	sub    %eax,%edx
c0101bc5:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bcb:	8b 50 08             	mov    0x8(%eax),%edx
c0101bce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bd2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bde:	c7 04 24 76 59 11 c0 	movl   $0xc0115976,(%esp)
c0101be5:	e8 7b e7 ff ff       	call   c0100365 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bee:	83 c0 01             	add    $0x1,%eax
c0101bf1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101bf5:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101bfa:	0f 86 1f fd ff ff    	jbe    c010191f <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101c00:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101c07:	e8 7c 05 00 00       	call   c0102188 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101c0c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101c13:	e8 70 05 00 00       	call   c0102188 <pic_enable>
}
c0101c18:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c1e:	5b                   	pop    %ebx
c0101c1f:	5f                   	pop    %edi
c0101c20:	5d                   	pop    %ebp
c0101c21:	c3                   	ret    

c0101c22 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c22:	55                   	push   %ebp
c0101c23:	89 e5                	mov    %esp,%ebp
c0101c25:	83 ec 04             	sub    $0x4,%esp
c0101c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c2f:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c34:	77 24                	ja     c0101c5a <ide_device_valid+0x38>
c0101c36:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c3a:	c1 e0 03             	shl    $0x3,%eax
c0101c3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c44:	29 c2                	sub    %eax,%edx
c0101c46:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c4c:	0f b6 00             	movzbl (%eax),%eax
c0101c4f:	84 c0                	test   %al,%al
c0101c51:	74 07                	je     c0101c5a <ide_device_valid+0x38>
c0101c53:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c58:	eb 05                	jmp    c0101c5f <ide_device_valid+0x3d>
c0101c5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c5f:	c9                   	leave  
c0101c60:	c3                   	ret    

c0101c61 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c61:	55                   	push   %ebp
c0101c62:	89 e5                	mov    %esp,%ebp
c0101c64:	83 ec 08             	sub    $0x8,%esp
c0101c67:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c6a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c6e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c72:	89 04 24             	mov    %eax,(%esp)
c0101c75:	e8 a8 ff ff ff       	call   c0101c22 <ide_device_valid>
c0101c7a:	85 c0                	test   %eax,%eax
c0101c7c:	74 1b                	je     c0101c99 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c7e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c82:	c1 e0 03             	shl    $0x3,%eax
c0101c85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c8c:	29 c2                	sub    %eax,%edx
c0101c8e:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c94:	8b 40 08             	mov    0x8(%eax),%eax
c0101c97:	eb 05                	jmp    c0101c9e <ide_device_size+0x3d>
    }
    return 0;
c0101c99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c9e:	c9                   	leave  
c0101c9f:	c3                   	ret    

c0101ca0 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ca0:	55                   	push   %ebp
c0101ca1:	89 e5                	mov    %esp,%ebp
c0101ca3:	57                   	push   %edi
c0101ca4:	53                   	push   %ebx
c0101ca5:	83 ec 50             	sub    $0x50,%esp
c0101ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cab:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101caf:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101cb6:	77 24                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cb8:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101cbd:	77 1d                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cbf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101cc3:	c1 e0 03             	shl    $0x3,%eax
c0101cc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ccd:	29 c2                	sub    %eax,%edx
c0101ccf:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101cd5:	0f b6 00             	movzbl (%eax),%eax
c0101cd8:	84 c0                	test   %al,%al
c0101cda:	75 24                	jne    c0101d00 <ide_read_secs+0x60>
c0101cdc:	c7 44 24 0c 94 59 11 	movl   $0xc0115994,0xc(%esp)
c0101ce3:	c0 
c0101ce4:	c7 44 24 08 4f 59 11 	movl   $0xc011594f,0x8(%esp)
c0101ceb:	c0 
c0101cec:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101cf3:	00 
c0101cf4:	c7 04 24 64 59 11 c0 	movl   $0xc0115964,(%esp)
c0101cfb:	e8 c8 f1 ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101d00:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101d07:	77 0f                	ja     c0101d18 <ide_read_secs+0x78>
c0101d09:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d0c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101d0f:	01 d0                	add    %edx,%eax
c0101d11:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d16:	76 24                	jbe    c0101d3c <ide_read_secs+0x9c>
c0101d18:	c7 44 24 0c bc 59 11 	movl   $0xc01159bc,0xc(%esp)
c0101d1f:	c0 
c0101d20:	c7 44 24 08 4f 59 11 	movl   $0xc011594f,0x8(%esp)
c0101d27:	c0 
c0101d28:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d2f:	00 
c0101d30:	c7 04 24 64 59 11 c0 	movl   $0xc0115964,(%esp)
c0101d37:	e8 8c f1 ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d3c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d40:	66 d1 e8             	shr    %ax
c0101d43:	0f b7 c0             	movzwl %ax,%eax
c0101d46:	0f b7 04 85 04 59 11 	movzwl -0x3feea6fc(,%eax,4),%eax
c0101d4d:	c0 
c0101d4e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d52:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d56:	66 d1 e8             	shr    %ax
c0101d59:	0f b7 c0             	movzwl %ax,%eax
c0101d5c:	0f b7 04 85 06 59 11 	movzwl -0x3feea6fa(,%eax,4),%eax
c0101d63:	c0 
c0101d64:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d68:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d6c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d73:	00 
c0101d74:	89 04 24             	mov    %eax,(%esp)
c0101d77:	e8 33 fb ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d7c:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d80:	83 c0 02             	add    $0x2,%eax
c0101d83:	0f b7 c0             	movzwl %ax,%eax
c0101d86:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101d8a:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d8e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101d92:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101d96:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d97:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d9a:	0f b6 c0             	movzbl %al,%eax
c0101d9d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101da1:	83 c2 02             	add    $0x2,%edx
c0101da4:	0f b7 d2             	movzwl %dx,%edx
c0101da7:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101dab:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101dae:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101db2:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101db6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101db7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dba:	0f b6 c0             	movzbl %al,%eax
c0101dbd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dc1:	83 c2 03             	add    $0x3,%edx
c0101dc4:	0f b7 d2             	movzwl %dx,%edx
c0101dc7:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101dcb:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101dce:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101dd2:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101dd6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101dd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dda:	c1 e8 08             	shr    $0x8,%eax
c0101ddd:	0f b6 c0             	movzbl %al,%eax
c0101de0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101de4:	83 c2 04             	add    $0x4,%edx
c0101de7:	0f b7 d2             	movzwl %dx,%edx
c0101dea:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101dee:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101df1:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101df5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101df9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dfd:	c1 e8 10             	shr    $0x10,%eax
c0101e00:	0f b6 c0             	movzbl %al,%eax
c0101e03:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e07:	83 c2 05             	add    $0x5,%edx
c0101e0a:	0f b7 d2             	movzwl %dx,%edx
c0101e0d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101e11:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e14:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e18:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e1c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e1d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e21:	83 e0 01             	and    $0x1,%eax
c0101e24:	c1 e0 04             	shl    $0x4,%eax
c0101e27:	89 c2                	mov    %eax,%edx
c0101e29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e2c:	c1 e8 18             	shr    $0x18,%eax
c0101e2f:	83 e0 0f             	and    $0xf,%eax
c0101e32:	09 d0                	or     %edx,%eax
c0101e34:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e37:	0f b6 c0             	movzbl %al,%eax
c0101e3a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e3e:	83 c2 06             	add    $0x6,%edx
c0101e41:	0f b7 d2             	movzwl %dx,%edx
c0101e44:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e48:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e4b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e4f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e53:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e54:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e58:	83 c0 07             	add    $0x7,%eax
c0101e5b:	0f b7 c0             	movzwl %ax,%eax
c0101e5e:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e62:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e66:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e6a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e6e:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e76:	eb 5a                	jmp    c0101ed2 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e78:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e7c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e83:	00 
c0101e84:	89 04 24             	mov    %eax,(%esp)
c0101e87:	e8 23 fa ff ff       	call   c01018af <ide_wait_ready>
c0101e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e93:	74 02                	je     c0101e97 <ide_read_secs+0x1f7>
            goto out;
c0101e95:	eb 41                	jmp    c0101ed8 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e97:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101e9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ea1:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ea4:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101eab:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101eae:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101eb1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101eb4:	89 cb                	mov    %ecx,%ebx
c0101eb6:	89 df                	mov    %ebx,%edi
c0101eb8:	89 c1                	mov    %eax,%ecx
c0101eba:	fc                   	cld    
c0101ebb:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ebd:	89 c8                	mov    %ecx,%eax
c0101ebf:	89 fb                	mov    %edi,%ebx
c0101ec1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101ec4:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101ec7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ecb:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ed2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ed6:	75 a0                	jne    c0101e78 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101edb:	83 c4 50             	add    $0x50,%esp
c0101ede:	5b                   	pop    %ebx
c0101edf:	5f                   	pop    %edi
c0101ee0:	5d                   	pop    %ebp
c0101ee1:	c3                   	ret    

c0101ee2 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101ee2:	55                   	push   %ebp
c0101ee3:	89 e5                	mov    %esp,%ebp
c0101ee5:	56                   	push   %esi
c0101ee6:	53                   	push   %ebx
c0101ee7:	83 ec 50             	sub    $0x50,%esp
c0101eea:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eed:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ef1:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101ef8:	77 24                	ja     c0101f1e <ide_write_secs+0x3c>
c0101efa:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101eff:	77 1d                	ja     c0101f1e <ide_write_secs+0x3c>
c0101f01:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f05:	c1 e0 03             	shl    $0x3,%eax
c0101f08:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f0f:	29 c2                	sub    %eax,%edx
c0101f11:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101f17:	0f b6 00             	movzbl (%eax),%eax
c0101f1a:	84 c0                	test   %al,%al
c0101f1c:	75 24                	jne    c0101f42 <ide_write_secs+0x60>
c0101f1e:	c7 44 24 0c 94 59 11 	movl   $0xc0115994,0xc(%esp)
c0101f25:	c0 
c0101f26:	c7 44 24 08 4f 59 11 	movl   $0xc011594f,0x8(%esp)
c0101f2d:	c0 
c0101f2e:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101f35:	00 
c0101f36:	c7 04 24 64 59 11 c0 	movl   $0xc0115964,(%esp)
c0101f3d:	e8 86 ef ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f42:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f49:	77 0f                	ja     c0101f5a <ide_write_secs+0x78>
c0101f4b:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f4e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f51:	01 d0                	add    %edx,%eax
c0101f53:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f58:	76 24                	jbe    c0101f7e <ide_write_secs+0x9c>
c0101f5a:	c7 44 24 0c bc 59 11 	movl   $0xc01159bc,0xc(%esp)
c0101f61:	c0 
c0101f62:	c7 44 24 08 4f 59 11 	movl   $0xc011594f,0x8(%esp)
c0101f69:	c0 
c0101f6a:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f71:	00 
c0101f72:	c7 04 24 64 59 11 c0 	movl   $0xc0115964,(%esp)
c0101f79:	e8 4a ef ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f7e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f82:	66 d1 e8             	shr    %ax
c0101f85:	0f b7 c0             	movzwl %ax,%eax
c0101f88:	0f b7 04 85 04 59 11 	movzwl -0x3feea6fc(,%eax,4),%eax
c0101f8f:	c0 
c0101f90:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f94:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f98:	66 d1 e8             	shr    %ax
c0101f9b:	0f b7 c0             	movzwl %ax,%eax
c0101f9e:	0f b7 04 85 06 59 11 	movzwl -0x3feea6fa(,%eax,4),%eax
c0101fa5:	c0 
c0101fa6:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101faa:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fb5:	00 
c0101fb6:	89 04 24             	mov    %eax,(%esp)
c0101fb9:	e8 f1 f8 ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fbe:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fc2:	83 c0 02             	add    $0x2,%eax
c0101fc5:	0f b7 c0             	movzwl %ax,%eax
c0101fc8:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fcc:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fd0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101fd4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fd8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101fd9:	8b 45 14             	mov    0x14(%ebp),%eax
c0101fdc:	0f b6 c0             	movzbl %al,%eax
c0101fdf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fe3:	83 c2 02             	add    $0x2,%edx
c0101fe6:	0f b7 d2             	movzwl %dx,%edx
c0101fe9:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fed:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ff0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ff4:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ff8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ffc:	0f b6 c0             	movzbl %al,%eax
c0101fff:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102003:	83 c2 03             	add    $0x3,%edx
c0102006:	0f b7 d2             	movzwl %dx,%edx
c0102009:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010200d:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102010:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102014:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102018:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102019:	8b 45 0c             	mov    0xc(%ebp),%eax
c010201c:	c1 e8 08             	shr    $0x8,%eax
c010201f:	0f b6 c0             	movzbl %al,%eax
c0102022:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102026:	83 c2 04             	add    $0x4,%edx
c0102029:	0f b7 d2             	movzwl %dx,%edx
c010202c:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102030:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0102033:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102037:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010203b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010203f:	c1 e8 10             	shr    $0x10,%eax
c0102042:	0f b6 c0             	movzbl %al,%eax
c0102045:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102049:	83 c2 05             	add    $0x5,%edx
c010204c:	0f b7 d2             	movzwl %dx,%edx
c010204f:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102053:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102056:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010205a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010205e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010205f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102063:	83 e0 01             	and    $0x1,%eax
c0102066:	c1 e0 04             	shl    $0x4,%eax
c0102069:	89 c2                	mov    %eax,%edx
c010206b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010206e:	c1 e8 18             	shr    $0x18,%eax
c0102071:	83 e0 0f             	and    $0xf,%eax
c0102074:	09 d0                	or     %edx,%eax
c0102076:	83 c8 e0             	or     $0xffffffe0,%eax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102080:	83 c2 06             	add    $0x6,%edx
c0102083:	0f b7 d2             	movzwl %dx,%edx
c0102086:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010208a:	88 45 d9             	mov    %al,-0x27(%ebp)
c010208d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102091:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102095:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102096:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010209a:	83 c0 07             	add    $0x7,%eax
c010209d:	0f b7 c0             	movzwl %ax,%eax
c01020a0:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01020a4:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01020a8:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01020ac:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01020b0:	ee                   	out    %al,(%dx)

    int ret = 0;
c01020b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020b8:	eb 5a                	jmp    c0102114 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020ba:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020be:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020c5:	00 
c01020c6:	89 04 24             	mov    %eax,(%esp)
c01020c9:	e8 e1 f7 ff ff       	call   c01018af <ide_wait_ready>
c01020ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020d5:	74 02                	je     c01020d9 <ide_write_secs+0x1f7>
            goto out;
c01020d7:	eb 41                	jmp    c010211a <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020d9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01020e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020e6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020ed:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01020f0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01020f6:	89 cb                	mov    %ecx,%ebx
c01020f8:	89 de                	mov    %ebx,%esi
c01020fa:	89 c1                	mov    %eax,%ecx
c01020fc:	fc                   	cld    
c01020fd:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020ff:	89 c8                	mov    %ecx,%eax
c0102101:	89 f3                	mov    %esi,%ebx
c0102103:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102106:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102109:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010210d:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102114:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102118:	75 a0                	jne    c01020ba <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010211a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010211d:	83 c4 50             	add    $0x50,%esp
c0102120:	5b                   	pop    %ebx
c0102121:	5e                   	pop    %esi
c0102122:	5d                   	pop    %ebp
c0102123:	c3                   	ret    

c0102124 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102124:	55                   	push   %ebp
c0102125:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102127:	fb                   	sti    
    sti();
}
c0102128:	5d                   	pop    %ebp
c0102129:	c3                   	ret    

c010212a <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010212a:	55                   	push   %ebp
c010212b:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010212d:	fa                   	cli    
    cli();
}
c010212e:	5d                   	pop    %ebp
c010212f:	c3                   	ret    

c0102130 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102130:	55                   	push   %ebp
c0102131:	89 e5                	mov    %esp,%ebp
c0102133:	83 ec 14             	sub    $0x14,%esp
c0102136:	8b 45 08             	mov    0x8(%ebp),%eax
c0102139:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010213d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102141:	66 a3 70 e5 14 c0    	mov    %ax,0xc014e570
    if (did_init) {
c0102147:	a1 40 f6 14 c0       	mov    0xc014f640,%eax
c010214c:	85 c0                	test   %eax,%eax
c010214e:	74 36                	je     c0102186 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102150:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102154:	0f b6 c0             	movzbl %al,%eax
c0102157:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010215d:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102160:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102164:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102168:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102169:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010216d:	66 c1 e8 08          	shr    $0x8,%ax
c0102171:	0f b6 c0             	movzbl %al,%eax
c0102174:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010217a:	88 45 f9             	mov    %al,-0x7(%ebp)
c010217d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102181:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102185:	ee                   	out    %al,(%dx)
    }
}
c0102186:	c9                   	leave  
c0102187:	c3                   	ret    

c0102188 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102188:	55                   	push   %ebp
c0102189:	89 e5                	mov    %esp,%ebp
c010218b:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010218e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102191:	ba 01 00 00 00       	mov    $0x1,%edx
c0102196:	89 c1                	mov    %eax,%ecx
c0102198:	d3 e2                	shl    %cl,%edx
c010219a:	89 d0                	mov    %edx,%eax
c010219c:	f7 d0                	not    %eax
c010219e:	89 c2                	mov    %eax,%edx
c01021a0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01021a7:	21 d0                	and    %edx,%eax
c01021a9:	0f b7 c0             	movzwl %ax,%eax
c01021ac:	89 04 24             	mov    %eax,(%esp)
c01021af:	e8 7c ff ff ff       	call   c0102130 <pic_setmask>
}
c01021b4:	c9                   	leave  
c01021b5:	c3                   	ret    

c01021b6 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021b6:	55                   	push   %ebp
c01021b7:	89 e5                	mov    %esp,%ebp
c01021b9:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021bc:	c7 05 40 f6 14 c0 01 	movl   $0x1,0xc014f640
c01021c3:	00 00 00 
c01021c6:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021cc:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021d0:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021d4:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021d8:	ee                   	out    %al,(%dx)
c01021d9:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021df:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021e3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021e7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021eb:	ee                   	out    %al,(%dx)
c01021ec:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021f2:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021f6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021fa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021fe:	ee                   	out    %al,(%dx)
c01021ff:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102205:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102209:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010220d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102211:	ee                   	out    %al,(%dx)
c0102212:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102218:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010221c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102220:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102224:	ee                   	out    %al,(%dx)
c0102225:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010222b:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c010222f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102233:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102237:	ee                   	out    %al,(%dx)
c0102238:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010223e:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102242:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102246:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010224a:	ee                   	out    %al,(%dx)
c010224b:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102251:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102255:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102259:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010225d:	ee                   	out    %al,(%dx)
c010225e:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102264:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102268:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010226c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102270:	ee                   	out    %al,(%dx)
c0102271:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102277:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010227b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010227f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102283:	ee                   	out    %al,(%dx)
c0102284:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010228a:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c010228e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102292:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102296:	ee                   	out    %al,(%dx)
c0102297:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c010229d:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022a1:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022a5:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022a9:	ee                   	out    %al,(%dx)
c01022aa:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022b0:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022b4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022b8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022bc:	ee                   	out    %al,(%dx)
c01022bd:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022c3:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022c7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022cb:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022cf:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022d0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022d7:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022db:	74 12                	je     c01022ef <pic_init+0x139>
        pic_setmask(irq_mask);
c01022dd:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022e4:	0f b7 c0             	movzwl %ax,%eax
c01022e7:	89 04 24             	mov    %eax,(%esp)
c01022ea:	e8 41 fe ff ff       	call   c0102130 <pic_setmask>
    }
}
c01022ef:	c9                   	leave  
c01022f0:	c3                   	ret    

c01022f1 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022f1:	55                   	push   %ebp
c01022f2:	89 e5                	mov    %esp,%ebp
c01022f4:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022f7:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022fe:	00 
c01022ff:	c7 04 24 00 5a 11 c0 	movl   $0xc0115a00,(%esp)
c0102306:	e8 5a e0 ff ff       	call   c0100365 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c010230b:	c9                   	leave  
c010230c:	c3                   	ret    

c010230d <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010230d:	55                   	push   %ebp
c010230e:	89 e5                	mov    %esp,%ebp
c0102310:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102313:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010231a:	e9 c3 00 00 00       	jmp    c01023e2 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010231f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102322:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c0102329:	89 c2                	mov    %eax,%edx
c010232b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010232e:	66 89 14 c5 60 f6 14 	mov    %dx,-0x3feb09a0(,%eax,8)
c0102335:	c0 
c0102336:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102339:	66 c7 04 c5 62 f6 14 	movw   $0x8,-0x3feb099e(,%eax,8)
c0102340:	c0 08 00 
c0102343:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102346:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c010234d:	c0 
c010234e:	83 e2 e0             	and    $0xffffffe0,%edx
c0102351:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c0102358:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235b:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c0102362:	c0 
c0102363:	83 e2 1f             	and    $0x1f,%edx
c0102366:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c010236d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102370:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c0102377:	c0 
c0102378:	83 e2 f0             	and    $0xfffffff0,%edx
c010237b:	83 ca 0e             	or     $0xe,%edx
c010237e:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c0102385:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102388:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c010238f:	c0 
c0102390:	83 e2 ef             	and    $0xffffffef,%edx
c0102393:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c010239a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239d:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023a4:	c0 
c01023a5:	83 e2 9f             	and    $0xffffff9f,%edx
c01023a8:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023af:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023b2:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023b9:	c0 
c01023ba:	83 ca 80             	or     $0xffffff80,%edx
c01023bd:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c7:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c01023ce:	c1 e8 10             	shr    $0x10,%eax
c01023d1:	89 c2                	mov    %eax,%edx
c01023d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d6:	66 89 14 c5 66 f6 14 	mov    %dx,-0x3feb099a(,%eax,8)
c01023dd:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01023de:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023e5:	3d ff 00 00 00       	cmp    $0xff,%eax
c01023ea:	0f 86 2f ff ff ff    	jbe    c010231f <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c01023f0:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c01023f5:	66 a3 60 fa 14 c0    	mov    %ax,0xc014fa60
c01023fb:	66 c7 05 62 fa 14 c0 	movw   $0x8,0xc014fa62
c0102402:	08 00 
c0102404:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c010240b:	83 e0 e0             	and    $0xffffffe0,%eax
c010240e:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102413:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c010241a:	83 e0 1f             	and    $0x1f,%eax
c010241d:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102422:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102429:	83 c8 0f             	or     $0xf,%eax
c010242c:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102431:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102438:	83 e0 ef             	and    $0xffffffef,%eax
c010243b:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102440:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102447:	83 c8 60             	or     $0x60,%eax
c010244a:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c010244f:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c0102456:	83 c8 80             	or     $0xffffff80,%eax
c0102459:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c010245e:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c0102463:	c1 e8 10             	shr    $0x10,%eax
c0102466:	66 a3 66 fa 14 c0    	mov    %ax,0xc014fa66
c010246c:	c7 45 f8 80 e5 14 c0 	movl   $0xc014e580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102473:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102476:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102479:	c9                   	leave  
c010247a:	c3                   	ret    

c010247b <trapname>:

static const char *
trapname(int trapno) {
c010247b:	55                   	push   %ebp
c010247c:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010247e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102481:	83 f8 13             	cmp    $0x13,%eax
c0102484:	77 0c                	ja     c0102492 <trapname+0x17>
        return excnames[trapno];
c0102486:	8b 45 08             	mov    0x8(%ebp),%eax
c0102489:	8b 04 85 80 5e 11 c0 	mov    -0x3feea180(,%eax,4),%eax
c0102490:	eb 18                	jmp    c01024aa <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102492:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102496:	7e 0d                	jle    c01024a5 <trapname+0x2a>
c0102498:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010249c:	7f 07                	jg     c01024a5 <trapname+0x2a>
        return "Hardware Interrupt";
c010249e:	b8 0a 5a 11 c0       	mov    $0xc0115a0a,%eax
c01024a3:	eb 05                	jmp    c01024aa <trapname+0x2f>
    }
    return "(unknown trap)";
c01024a5:	b8 1d 5a 11 c0       	mov    $0xc0115a1d,%eax
}
c01024aa:	5d                   	pop    %ebp
c01024ab:	c3                   	ret    

c01024ac <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024ac:	55                   	push   %ebp
c01024ad:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024af:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b2:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024b6:	66 83 f8 08          	cmp    $0x8,%ax
c01024ba:	0f 94 c0             	sete   %al
c01024bd:	0f b6 c0             	movzbl %al,%eax
}
c01024c0:	5d                   	pop    %ebp
c01024c1:	c3                   	ret    

c01024c2 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024c2:	55                   	push   %ebp
c01024c3:	89 e5                	mov    %esp,%ebp
c01024c5:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01024cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024cf:	c7 04 24 5e 5a 11 c0 	movl   $0xc0115a5e,(%esp)
c01024d6:	e8 8a de ff ff       	call   c0100365 <cprintf>
    print_regs(&tf->tf_regs);
c01024db:	8b 45 08             	mov    0x8(%ebp),%eax
c01024de:	89 04 24             	mov    %eax,(%esp)
c01024e1:	e8 a1 01 00 00       	call   c0102687 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e9:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024ed:	0f b7 c0             	movzwl %ax,%eax
c01024f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024f4:	c7 04 24 6f 5a 11 c0 	movl   $0xc0115a6f,(%esp)
c01024fb:	e8 65 de ff ff       	call   c0100365 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102500:	8b 45 08             	mov    0x8(%ebp),%eax
c0102503:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102507:	0f b7 c0             	movzwl %ax,%eax
c010250a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010250e:	c7 04 24 82 5a 11 c0 	movl   $0xc0115a82,(%esp)
c0102515:	e8 4b de ff ff       	call   c0100365 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010251a:	8b 45 08             	mov    0x8(%ebp),%eax
c010251d:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102521:	0f b7 c0             	movzwl %ax,%eax
c0102524:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102528:	c7 04 24 95 5a 11 c0 	movl   $0xc0115a95,(%esp)
c010252f:	e8 31 de ff ff       	call   c0100365 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102534:	8b 45 08             	mov    0x8(%ebp),%eax
c0102537:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010253b:	0f b7 c0             	movzwl %ax,%eax
c010253e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102542:	c7 04 24 a8 5a 11 c0 	movl   $0xc0115aa8,(%esp)
c0102549:	e8 17 de ff ff       	call   c0100365 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010254e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102551:	8b 40 30             	mov    0x30(%eax),%eax
c0102554:	89 04 24             	mov    %eax,(%esp)
c0102557:	e8 1f ff ff ff       	call   c010247b <trapname>
c010255c:	8b 55 08             	mov    0x8(%ebp),%edx
c010255f:	8b 52 30             	mov    0x30(%edx),%edx
c0102562:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102566:	89 54 24 04          	mov    %edx,0x4(%esp)
c010256a:	c7 04 24 bb 5a 11 c0 	movl   $0xc0115abb,(%esp)
c0102571:	e8 ef dd ff ff       	call   c0100365 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102576:	8b 45 08             	mov    0x8(%ebp),%eax
c0102579:	8b 40 34             	mov    0x34(%eax),%eax
c010257c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102580:	c7 04 24 cd 5a 11 c0 	movl   $0xc0115acd,(%esp)
c0102587:	e8 d9 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010258c:	8b 45 08             	mov    0x8(%ebp),%eax
c010258f:	8b 40 38             	mov    0x38(%eax),%eax
c0102592:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102596:	c7 04 24 dc 5a 11 c0 	movl   $0xc0115adc,(%esp)
c010259d:	e8 c3 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a5:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025a9:	0f b7 c0             	movzwl %ax,%eax
c01025ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b0:	c7 04 24 eb 5a 11 c0 	movl   $0xc0115aeb,(%esp)
c01025b7:	e8 a9 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01025bf:	8b 40 40             	mov    0x40(%eax),%eax
c01025c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c6:	c7 04 24 fe 5a 11 c0 	movl   $0xc0115afe,(%esp)
c01025cd:	e8 93 dd ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025d9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025e0:	eb 3e                	jmp    c0102620 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e5:	8b 50 40             	mov    0x40(%eax),%edx
c01025e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025eb:	21 d0                	and    %edx,%eax
c01025ed:	85 c0                	test   %eax,%eax
c01025ef:	74 28                	je     c0102619 <print_trapframe+0x157>
c01025f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025f4:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c01025fb:	85 c0                	test   %eax,%eax
c01025fd:	74 1a                	je     c0102619 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01025ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102602:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c0102609:	89 44 24 04          	mov    %eax,0x4(%esp)
c010260d:	c7 04 24 0d 5b 11 c0 	movl   $0xc0115b0d,(%esp)
c0102614:	e8 4c dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102619:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010261d:	d1 65 f0             	shll   -0x10(%ebp)
c0102620:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102623:	83 f8 17             	cmp    $0x17,%eax
c0102626:	76 ba                	jbe    c01025e2 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102628:	8b 45 08             	mov    0x8(%ebp),%eax
c010262b:	8b 40 40             	mov    0x40(%eax),%eax
c010262e:	25 00 30 00 00       	and    $0x3000,%eax
c0102633:	c1 e8 0c             	shr    $0xc,%eax
c0102636:	89 44 24 04          	mov    %eax,0x4(%esp)
c010263a:	c7 04 24 11 5b 11 c0 	movl   $0xc0115b11,(%esp)
c0102641:	e8 1f dd ff ff       	call   c0100365 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102646:	8b 45 08             	mov    0x8(%ebp),%eax
c0102649:	89 04 24             	mov    %eax,(%esp)
c010264c:	e8 5b fe ff ff       	call   c01024ac <trap_in_kernel>
c0102651:	85 c0                	test   %eax,%eax
c0102653:	75 30                	jne    c0102685 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102655:	8b 45 08             	mov    0x8(%ebp),%eax
c0102658:	8b 40 44             	mov    0x44(%eax),%eax
c010265b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010265f:	c7 04 24 1a 5b 11 c0 	movl   $0xc0115b1a,(%esp)
c0102666:	e8 fa dc ff ff       	call   c0100365 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010266b:	8b 45 08             	mov    0x8(%ebp),%eax
c010266e:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102672:	0f b7 c0             	movzwl %ax,%eax
c0102675:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102679:	c7 04 24 29 5b 11 c0 	movl   $0xc0115b29,(%esp)
c0102680:	e8 e0 dc ff ff       	call   c0100365 <cprintf>
    }
}
c0102685:	c9                   	leave  
c0102686:	c3                   	ret    

c0102687 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102687:	55                   	push   %ebp
c0102688:	89 e5                	mov    %esp,%ebp
c010268a:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c010268d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102690:	8b 00                	mov    (%eax),%eax
c0102692:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102696:	c7 04 24 3c 5b 11 c0 	movl   $0xc0115b3c,(%esp)
c010269d:	e8 c3 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a5:	8b 40 04             	mov    0x4(%eax),%eax
c01026a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ac:	c7 04 24 4b 5b 11 c0 	movl   $0xc0115b4b,(%esp)
c01026b3:	e8 ad dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026bb:	8b 40 08             	mov    0x8(%eax),%eax
c01026be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026c2:	c7 04 24 5a 5b 11 c0 	movl   $0xc0115b5a,(%esp)
c01026c9:	e8 97 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d1:	8b 40 0c             	mov    0xc(%eax),%eax
c01026d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026d8:	c7 04 24 69 5b 11 c0 	movl   $0xc0115b69,(%esp)
c01026df:	e8 81 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e7:	8b 40 10             	mov    0x10(%eax),%eax
c01026ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ee:	c7 04 24 78 5b 11 c0 	movl   $0xc0115b78,(%esp)
c01026f5:	e8 6b dc ff ff       	call   c0100365 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01026fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01026fd:	8b 40 14             	mov    0x14(%eax),%eax
c0102700:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102704:	c7 04 24 87 5b 11 c0 	movl   $0xc0115b87,(%esp)
c010270b:	e8 55 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102710:	8b 45 08             	mov    0x8(%ebp),%eax
c0102713:	8b 40 18             	mov    0x18(%eax),%eax
c0102716:	89 44 24 04          	mov    %eax,0x4(%esp)
c010271a:	c7 04 24 96 5b 11 c0 	movl   $0xc0115b96,(%esp)
c0102721:	e8 3f dc ff ff       	call   c0100365 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102726:	8b 45 08             	mov    0x8(%ebp),%eax
c0102729:	8b 40 1c             	mov    0x1c(%eax),%eax
c010272c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102730:	c7 04 24 a5 5b 11 c0 	movl   $0xc0115ba5,(%esp)
c0102737:	e8 29 dc ff ff       	call   c0100365 <cprintf>
}
c010273c:	c9                   	leave  
c010273d:	c3                   	ret    

c010273e <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010273e:	55                   	push   %ebp
c010273f:	89 e5                	mov    %esp,%ebp
c0102741:	53                   	push   %ebx
c0102742:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102745:	8b 45 08             	mov    0x8(%ebp),%eax
c0102748:	8b 40 34             	mov    0x34(%eax),%eax
c010274b:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010274e:	85 c0                	test   %eax,%eax
c0102750:	74 07                	je     c0102759 <print_pgfault+0x1b>
c0102752:	b9 b4 5b 11 c0       	mov    $0xc0115bb4,%ecx
c0102757:	eb 05                	jmp    c010275e <print_pgfault+0x20>
c0102759:	b9 c5 5b 11 c0       	mov    $0xc0115bc5,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010275e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102761:	8b 40 34             	mov    0x34(%eax),%eax
c0102764:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102767:	85 c0                	test   %eax,%eax
c0102769:	74 07                	je     c0102772 <print_pgfault+0x34>
c010276b:	ba 57 00 00 00       	mov    $0x57,%edx
c0102770:	eb 05                	jmp    c0102777 <print_pgfault+0x39>
c0102772:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102777:	8b 45 08             	mov    0x8(%ebp),%eax
c010277a:	8b 40 34             	mov    0x34(%eax),%eax
c010277d:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102780:	85 c0                	test   %eax,%eax
c0102782:	74 07                	je     c010278b <print_pgfault+0x4d>
c0102784:	b8 55 00 00 00       	mov    $0x55,%eax
c0102789:	eb 05                	jmp    c0102790 <print_pgfault+0x52>
c010278b:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102790:	0f 20 d3             	mov    %cr2,%ebx
c0102793:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0102796:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102799:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010279d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027a5:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027a9:	c7 04 24 d4 5b 11 c0 	movl   $0xc0115bd4,(%esp)
c01027b0:	e8 b0 db ff ff       	call   c0100365 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027b5:	83 c4 34             	add    $0x34,%esp
c01027b8:	5b                   	pop    %ebx
c01027b9:	5d                   	pop    %ebp
c01027ba:	c3                   	ret    

c01027bb <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027bb:	55                   	push   %ebp
c01027bc:	89 e5                	mov    %esp,%ebp
c01027be:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027c1:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027c6:	85 c0                	test   %eax,%eax
c01027c8:	74 0b                	je     c01027d5 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01027cd:	89 04 24             	mov    %eax,(%esp)
c01027d0:	e8 69 ff ff ff       	call   c010273e <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027d5:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027da:	85 c0                	test   %eax,%eax
c01027dc:	74 3d                	je     c010281b <pgfault_handler+0x60>
        assert(current == idleproc);
c01027de:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c01027e4:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c01027e9:	39 c2                	cmp    %eax,%edx
c01027eb:	74 24                	je     c0102811 <pgfault_handler+0x56>
c01027ed:	c7 44 24 0c f7 5b 11 	movl   $0xc0115bf7,0xc(%esp)
c01027f4:	c0 
c01027f5:	c7 44 24 08 0b 5c 11 	movl   $0xc0115c0b,0x8(%esp)
c01027fc:	c0 
c01027fd:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102804:	00 
c0102805:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c010280c:	e8 b7 e6 ff ff       	call   c0100ec8 <__panic>
        mm = check_mm_struct;
c0102811:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0102816:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102819:	eb 46                	jmp    c0102861 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c010281b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102820:	85 c0                	test   %eax,%eax
c0102822:	75 32                	jne    c0102856 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102824:	8b 45 08             	mov    0x8(%ebp),%eax
c0102827:	89 04 24             	mov    %eax,(%esp)
c010282a:	e8 93 fc ff ff       	call   c01024c2 <print_trapframe>
            print_pgfault(tf);
c010282f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102832:	89 04 24             	mov    %eax,(%esp)
c0102835:	e8 04 ff ff ff       	call   c010273e <print_pgfault>
            panic("unhandled page fault.\n");
c010283a:	c7 44 24 08 31 5c 11 	movl   $0xc0115c31,0x8(%esp)
c0102841:	c0 
c0102842:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102849:	00 
c010284a:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c0102851:	e8 72 e6 ff ff       	call   c0100ec8 <__panic>
        }
        mm = current->mm;
c0102856:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010285b:	8b 40 18             	mov    0x18(%eax),%eax
c010285e:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102861:	0f 20 d0             	mov    %cr2,%eax
c0102864:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102867:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010286a:	89 c2                	mov    %eax,%edx
c010286c:	8b 45 08             	mov    0x8(%ebp),%eax
c010286f:	8b 40 34             	mov    0x34(%eax),%eax
c0102872:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102876:	89 44 24 04          	mov    %eax,0x4(%esp)
c010287a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010287d:	89 04 24             	mov    %eax,(%esp)
c0102880:	e8 8e 64 00 00       	call   c0108d13 <do_pgfault>
}
c0102885:	c9                   	leave  
c0102886:	c3                   	ret    

c0102887 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102887:	55                   	push   %ebp
c0102888:	89 e5                	mov    %esp,%ebp
c010288a:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c010288d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102894:	8b 45 08             	mov    0x8(%ebp),%eax
c0102897:	8b 40 30             	mov    0x30(%eax),%eax
c010289a:	83 f8 2f             	cmp    $0x2f,%eax
c010289d:	77 38                	ja     c01028d7 <trap_dispatch+0x50>
c010289f:	83 f8 2e             	cmp    $0x2e,%eax
c01028a2:	0f 83 cb 01 00 00    	jae    c0102a73 <trap_dispatch+0x1ec>
c01028a8:	83 f8 20             	cmp    $0x20,%eax
c01028ab:	0f 84 07 01 00 00    	je     c01029b8 <trap_dispatch+0x131>
c01028b1:	83 f8 20             	cmp    $0x20,%eax
c01028b4:	77 0a                	ja     c01028c0 <trap_dispatch+0x39>
c01028b6:	83 f8 0e             	cmp    $0xe,%eax
c01028b9:	74 3e                	je     c01028f9 <trap_dispatch+0x72>
c01028bb:	e9 6b 01 00 00       	jmp    c0102a2b <trap_dispatch+0x1a4>
c01028c0:	83 f8 21             	cmp    $0x21,%eax
c01028c3:	0f 84 30 01 00 00    	je     c01029f9 <trap_dispatch+0x172>
c01028c9:	83 f8 24             	cmp    $0x24,%eax
c01028cc:	0f 84 27 01 00 00    	je     c01029f9 <trap_dispatch+0x172>
c01028d2:	e9 54 01 00 00       	jmp    c0102a2b <trap_dispatch+0x1a4>
c01028d7:	83 f8 78             	cmp    $0x78,%eax
c01028da:	0f 82 4b 01 00 00    	jb     c0102a2b <trap_dispatch+0x1a4>
c01028e0:	83 f8 79             	cmp    $0x79,%eax
c01028e3:	0f 86 26 01 00 00    	jbe    c0102a0f <trap_dispatch+0x188>
c01028e9:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028ee:	0f 84 ba 00 00 00    	je     c01029ae <trap_dispatch+0x127>
c01028f4:	e9 32 01 00 00       	jmp    c0102a2b <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01028fc:	89 04 24             	mov    %eax,(%esp)
c01028ff:	e8 b7 fe ff ff       	call   c01027bb <pgfault_handler>
c0102904:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102907:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010290b:	0f 84 98 00 00 00    	je     c01029a9 <trap_dispatch+0x122>
            print_trapframe(tf);
c0102911:	8b 45 08             	mov    0x8(%ebp),%eax
c0102914:	89 04 24             	mov    %eax,(%esp)
c0102917:	e8 a6 fb ff ff       	call   c01024c2 <print_trapframe>
            if (current == NULL) {
c010291c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102921:	85 c0                	test   %eax,%eax
c0102923:	75 23                	jne    c0102948 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102925:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102928:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010292c:	c7 44 24 08 48 5c 11 	movl   $0xc0115c48,0x8(%esp)
c0102933:	c0 
c0102934:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010293b:	00 
c010293c:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c0102943:	e8 80 e5 ff ff       	call   c0100ec8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102948:	8b 45 08             	mov    0x8(%ebp),%eax
c010294b:	89 04 24             	mov    %eax,(%esp)
c010294e:	e8 59 fb ff ff       	call   c01024ac <trap_in_kernel>
c0102953:	85 c0                	test   %eax,%eax
c0102955:	74 23                	je     c010297a <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102957:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010295a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010295e:	c7 44 24 08 68 5c 11 	movl   $0xc0115c68,0x8(%esp)
c0102965:	c0 
c0102966:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010296d:	00 
c010296e:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c0102975:	e8 4e e5 ff ff       	call   c0100ec8 <__panic>
                }
                cprintf("killed by kernel.\n");
c010297a:	c7 04 24 96 5c 11 c0 	movl   $0xc0115c96,(%esp)
c0102981:	e8 df d9 ff ff       	call   c0100365 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102986:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102989:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010298d:	c7 44 24 08 ac 5c 11 	movl   $0xc0115cac,0x8(%esp)
c0102994:	c0 
c0102995:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010299c:	00 
c010299d:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c01029a4:	e8 1f e5 ff ff       	call   c0100ec8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029a9:	e9 c6 00 00 00       	jmp    c0102a74 <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029ae:	e8 ac c2 00 00       	call   c010ec5f <syscall>
        break;
c01029b3:	e9 bc 00 00 00       	jmp    c0102a74 <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
		ticks ++;
c01029b8:	a1 10 30 15 c0       	mov    0xc0153010,%eax
c01029bd:	83 c0 01             	add    $0x1,%eax
c01029c0:	a3 10 30 15 c0       	mov    %eax,0xc0153010
        assert(current != NULL);
c01029c5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01029ca:	85 c0                	test   %eax,%eax
c01029cc:	75 24                	jne    c01029f2 <trap_dispatch+0x16b>
c01029ce:	c7 44 24 0c d5 5c 11 	movl   $0xc0115cd5,0xc(%esp)
c01029d5:	c0 
c01029d6:	c7 44 24 08 0b 5c 11 	movl   $0xc0115c0b,0x8(%esp)
c01029dd:	c0 
c01029de:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c01029e5:	00 
c01029e6:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c01029ed:	e8 d6 e4 ff ff       	call   c0100ec8 <__panic>
        run_timer_list();
c01029f2:	e8 f3 bd 00 00       	call   c010e7ea <run_timer_list>
        break;
c01029f7:	eb 7b                	jmp    c0102a74 <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c01029f9:	e8 42 ee ff ff       	call   c0101840 <cons_getc>
c01029fe:	88 45 f3             	mov    %al,-0xd(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a01:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a05:	89 04 24             	mov    %eax,(%esp)
c0102a08:	e8 54 e5 00 00       	call   c0110f61 <dev_stdin_write>
        }
        break;
c0102a0d:	eb 65                	jmp    c0102a74 <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a0f:	c7 44 24 08 e5 5c 11 	movl   $0xc0115ce5,0x8(%esp)
c0102a16:	c0 
c0102a17:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0102a1e:	00 
c0102a1f:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c0102a26:	e8 9d e4 ff ff       	call   c0100ec8 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a2e:	89 04 24             	mov    %eax,(%esp)
c0102a31:	e8 8c fa ff ff       	call   c01024c2 <print_trapframe>
        if (current != NULL) {
c0102a36:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a3b:	85 c0                	test   %eax,%eax
c0102a3d:	74 18                	je     c0102a57 <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a3f:	c7 04 24 f5 5c 11 c0 	movl   $0xc0115cf5,(%esp)
c0102a46:	e8 1a d9 ff ff       	call   c0100365 <cprintf>
            do_exit(-E_KILLED);
c0102a4b:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a52:	e8 d8 9f 00 00       	call   c010ca2f <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a57:	c7 44 24 08 06 5d 11 	movl   $0xc0115d06,0x8(%esp)
c0102a5e:	c0 
c0102a5f:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c0102a66:	00 
c0102a67:	c7 04 24 20 5c 11 c0 	movl   $0xc0115c20,(%esp)
c0102a6e:	e8 55 e4 ff ff       	call   c0100ec8 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a73:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a74:	c9                   	leave  
c0102a75:	c3                   	ret    

c0102a76 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a76:	55                   	push   %ebp
c0102a77:	89 e5                	mov    %esp,%ebp
c0102a79:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a7c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a81:	85 c0                	test   %eax,%eax
c0102a83:	75 0d                	jne    c0102a92 <trap+0x1c>
        trap_dispatch(tf);
c0102a85:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a88:	89 04 24             	mov    %eax,(%esp)
c0102a8b:	e8 f7 fd ff ff       	call   c0102887 <trap_dispatch>
c0102a90:	eb 6c                	jmp    c0102afe <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a92:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a97:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a9d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102aa2:	8b 55 08             	mov    0x8(%ebp),%edx
c0102aa5:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102aa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aab:	89 04 24             	mov    %eax,(%esp)
c0102aae:	e8 f9 f9 ff ff       	call   c01024ac <trap_in_kernel>
c0102ab3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ab9:	89 04 24             	mov    %eax,(%esp)
c0102abc:	e8 c6 fd ff ff       	call   c0102887 <trap_dispatch>
    
        current->tf = otf;
c0102ac1:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ac6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ac9:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102acc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ad0:	75 2c                	jne    c0102afe <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102ad2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ad7:	8b 40 44             	mov    0x44(%eax),%eax
c0102ada:	83 e0 01             	and    $0x1,%eax
c0102add:	85 c0                	test   %eax,%eax
c0102adf:	74 0c                	je     c0102aed <trap+0x77>
                do_exit(-E_KILLED);
c0102ae1:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102ae8:	e8 42 9f 00 00       	call   c010ca2f <do_exit>
            }
            if (current->need_resched) {
c0102aed:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102af2:	8b 40 10             	mov    0x10(%eax),%eax
c0102af5:	85 c0                	test   %eax,%eax
c0102af7:	74 05                	je     c0102afe <trap+0x88>
                schedule();
c0102af9:	e8 5f ba 00 00       	call   c010e55d <schedule>
            }
        }
    }
}
c0102afe:	c9                   	leave  
c0102aff:	c3                   	ret    

c0102b00 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b00:	1e                   	push   %ds
    pushl %es
c0102b01:	06                   	push   %es
    pushl %fs
c0102b02:	0f a0                	push   %fs
    pushl %gs
c0102b04:	0f a8                	push   %gs
    pushal
c0102b06:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b07:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b0c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b0e:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b10:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b11:	e8 60 ff ff ff       	call   c0102a76 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b16:	5c                   	pop    %esp

c0102b17 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b17:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b18:	0f a9                	pop    %gs
    popl %fs
c0102b1a:	0f a1                	pop    %fs
    popl %es
c0102b1c:	07                   	pop    %es
    popl %ds
c0102b1d:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b1e:	83 c4 08             	add    $0x8,%esp
    iret
c0102b21:	cf                   	iret   

c0102b22 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b22:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b26:	e9 ec ff ff ff       	jmp    c0102b17 <__trapret>

c0102b2b <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b2b:	6a 00                	push   $0x0
  pushl $0
c0102b2d:	6a 00                	push   $0x0
  jmp __alltraps
c0102b2f:	e9 cc ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b34 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b34:	6a 00                	push   $0x0
  pushl $1
c0102b36:	6a 01                	push   $0x1
  jmp __alltraps
c0102b38:	e9 c3 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b3d <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b3d:	6a 00                	push   $0x0
  pushl $2
c0102b3f:	6a 02                	push   $0x2
  jmp __alltraps
c0102b41:	e9 ba ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b46 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b46:	6a 00                	push   $0x0
  pushl $3
c0102b48:	6a 03                	push   $0x3
  jmp __alltraps
c0102b4a:	e9 b1 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b4f <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b4f:	6a 00                	push   $0x0
  pushl $4
c0102b51:	6a 04                	push   $0x4
  jmp __alltraps
c0102b53:	e9 a8 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b58 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b58:	6a 00                	push   $0x0
  pushl $5
c0102b5a:	6a 05                	push   $0x5
  jmp __alltraps
c0102b5c:	e9 9f ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b61 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b61:	6a 00                	push   $0x0
  pushl $6
c0102b63:	6a 06                	push   $0x6
  jmp __alltraps
c0102b65:	e9 96 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b6a <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b6a:	6a 00                	push   $0x0
  pushl $7
c0102b6c:	6a 07                	push   $0x7
  jmp __alltraps
c0102b6e:	e9 8d ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b73 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b73:	6a 08                	push   $0x8
  jmp __alltraps
c0102b75:	e9 86 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b7a <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b7a:	6a 09                	push   $0x9
  jmp __alltraps
c0102b7c:	e9 7f ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b81 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b81:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b83:	e9 78 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b88 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b88:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b8a:	e9 71 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b8f <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b8f:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b91:	e9 6a ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b96 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b96:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b98:	e9 63 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b9d <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b9d:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b9f:	e9 5c ff ff ff       	jmp    c0102b00 <__alltraps>

c0102ba4 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102ba4:	6a 00                	push   $0x0
  pushl $15
c0102ba6:	6a 0f                	push   $0xf
  jmp __alltraps
c0102ba8:	e9 53 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bad <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bad:	6a 00                	push   $0x0
  pushl $16
c0102baf:	6a 10                	push   $0x10
  jmp __alltraps
c0102bb1:	e9 4a ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bb6 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bb6:	6a 11                	push   $0x11
  jmp __alltraps
c0102bb8:	e9 43 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bbd <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bbd:	6a 00                	push   $0x0
  pushl $18
c0102bbf:	6a 12                	push   $0x12
  jmp __alltraps
c0102bc1:	e9 3a ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bc6 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bc6:	6a 00                	push   $0x0
  pushl $19
c0102bc8:	6a 13                	push   $0x13
  jmp __alltraps
c0102bca:	e9 31 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bcf <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bcf:	6a 00                	push   $0x0
  pushl $20
c0102bd1:	6a 14                	push   $0x14
  jmp __alltraps
c0102bd3:	e9 28 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bd8 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bd8:	6a 00                	push   $0x0
  pushl $21
c0102bda:	6a 15                	push   $0x15
  jmp __alltraps
c0102bdc:	e9 1f ff ff ff       	jmp    c0102b00 <__alltraps>

c0102be1 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102be1:	6a 00                	push   $0x0
  pushl $22
c0102be3:	6a 16                	push   $0x16
  jmp __alltraps
c0102be5:	e9 16 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bea <vector23>:
.globl vector23
vector23:
  pushl $0
c0102bea:	6a 00                	push   $0x0
  pushl $23
c0102bec:	6a 17                	push   $0x17
  jmp __alltraps
c0102bee:	e9 0d ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bf3 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102bf3:	6a 00                	push   $0x0
  pushl $24
c0102bf5:	6a 18                	push   $0x18
  jmp __alltraps
c0102bf7:	e9 04 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bfc <vector25>:
.globl vector25
vector25:
  pushl $0
c0102bfc:	6a 00                	push   $0x0
  pushl $25
c0102bfe:	6a 19                	push   $0x19
  jmp __alltraps
c0102c00:	e9 fb fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c05 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c05:	6a 00                	push   $0x0
  pushl $26
c0102c07:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c09:	e9 f2 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c0e <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c0e:	6a 00                	push   $0x0
  pushl $27
c0102c10:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c12:	e9 e9 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c17 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c17:	6a 00                	push   $0x0
  pushl $28
c0102c19:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c1b:	e9 e0 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c20 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c20:	6a 00                	push   $0x0
  pushl $29
c0102c22:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c24:	e9 d7 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c29 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c29:	6a 00                	push   $0x0
  pushl $30
c0102c2b:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c2d:	e9 ce fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c32 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c32:	6a 00                	push   $0x0
  pushl $31
c0102c34:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c36:	e9 c5 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c3b <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c3b:	6a 00                	push   $0x0
  pushl $32
c0102c3d:	6a 20                	push   $0x20
  jmp __alltraps
c0102c3f:	e9 bc fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c44 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c44:	6a 00                	push   $0x0
  pushl $33
c0102c46:	6a 21                	push   $0x21
  jmp __alltraps
c0102c48:	e9 b3 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c4d <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c4d:	6a 00                	push   $0x0
  pushl $34
c0102c4f:	6a 22                	push   $0x22
  jmp __alltraps
c0102c51:	e9 aa fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c56 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c56:	6a 00                	push   $0x0
  pushl $35
c0102c58:	6a 23                	push   $0x23
  jmp __alltraps
c0102c5a:	e9 a1 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c5f <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c5f:	6a 00                	push   $0x0
  pushl $36
c0102c61:	6a 24                	push   $0x24
  jmp __alltraps
c0102c63:	e9 98 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c68 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c68:	6a 00                	push   $0x0
  pushl $37
c0102c6a:	6a 25                	push   $0x25
  jmp __alltraps
c0102c6c:	e9 8f fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c71 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c71:	6a 00                	push   $0x0
  pushl $38
c0102c73:	6a 26                	push   $0x26
  jmp __alltraps
c0102c75:	e9 86 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c7a <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c7a:	6a 00                	push   $0x0
  pushl $39
c0102c7c:	6a 27                	push   $0x27
  jmp __alltraps
c0102c7e:	e9 7d fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c83 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c83:	6a 00                	push   $0x0
  pushl $40
c0102c85:	6a 28                	push   $0x28
  jmp __alltraps
c0102c87:	e9 74 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c8c <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c8c:	6a 00                	push   $0x0
  pushl $41
c0102c8e:	6a 29                	push   $0x29
  jmp __alltraps
c0102c90:	e9 6b fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c95 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c95:	6a 00                	push   $0x0
  pushl $42
c0102c97:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c99:	e9 62 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c9e <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c9e:	6a 00                	push   $0x0
  pushl $43
c0102ca0:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102ca2:	e9 59 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ca7 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102ca7:	6a 00                	push   $0x0
  pushl $44
c0102ca9:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cab:	e9 50 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cb0 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cb0:	6a 00                	push   $0x0
  pushl $45
c0102cb2:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cb4:	e9 47 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cb9 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cb9:	6a 00                	push   $0x0
  pushl $46
c0102cbb:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cbd:	e9 3e fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cc2 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cc2:	6a 00                	push   $0x0
  pushl $47
c0102cc4:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cc6:	e9 35 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ccb <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ccb:	6a 00                	push   $0x0
  pushl $48
c0102ccd:	6a 30                	push   $0x30
  jmp __alltraps
c0102ccf:	e9 2c fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cd4 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cd4:	6a 00                	push   $0x0
  pushl $49
c0102cd6:	6a 31                	push   $0x31
  jmp __alltraps
c0102cd8:	e9 23 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cdd <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cdd:	6a 00                	push   $0x0
  pushl $50
c0102cdf:	6a 32                	push   $0x32
  jmp __alltraps
c0102ce1:	e9 1a fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ce6 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102ce6:	6a 00                	push   $0x0
  pushl $51
c0102ce8:	6a 33                	push   $0x33
  jmp __alltraps
c0102cea:	e9 11 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cef <vector52>:
.globl vector52
vector52:
  pushl $0
c0102cef:	6a 00                	push   $0x0
  pushl $52
c0102cf1:	6a 34                	push   $0x34
  jmp __alltraps
c0102cf3:	e9 08 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cf8 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102cf8:	6a 00                	push   $0x0
  pushl $53
c0102cfa:	6a 35                	push   $0x35
  jmp __alltraps
c0102cfc:	e9 ff fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d01 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d01:	6a 00                	push   $0x0
  pushl $54
c0102d03:	6a 36                	push   $0x36
  jmp __alltraps
c0102d05:	e9 f6 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d0a <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d0a:	6a 00                	push   $0x0
  pushl $55
c0102d0c:	6a 37                	push   $0x37
  jmp __alltraps
c0102d0e:	e9 ed fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d13 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d13:	6a 00                	push   $0x0
  pushl $56
c0102d15:	6a 38                	push   $0x38
  jmp __alltraps
c0102d17:	e9 e4 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d1c <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d1c:	6a 00                	push   $0x0
  pushl $57
c0102d1e:	6a 39                	push   $0x39
  jmp __alltraps
c0102d20:	e9 db fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d25 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d25:	6a 00                	push   $0x0
  pushl $58
c0102d27:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d29:	e9 d2 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d2e <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d2e:	6a 00                	push   $0x0
  pushl $59
c0102d30:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d32:	e9 c9 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d37 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d37:	6a 00                	push   $0x0
  pushl $60
c0102d39:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d3b:	e9 c0 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d40 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d40:	6a 00                	push   $0x0
  pushl $61
c0102d42:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d44:	e9 b7 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d49 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d49:	6a 00                	push   $0x0
  pushl $62
c0102d4b:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d4d:	e9 ae fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d52 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d52:	6a 00                	push   $0x0
  pushl $63
c0102d54:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d56:	e9 a5 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d5b <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d5b:	6a 00                	push   $0x0
  pushl $64
c0102d5d:	6a 40                	push   $0x40
  jmp __alltraps
c0102d5f:	e9 9c fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d64 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d64:	6a 00                	push   $0x0
  pushl $65
c0102d66:	6a 41                	push   $0x41
  jmp __alltraps
c0102d68:	e9 93 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d6d <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d6d:	6a 00                	push   $0x0
  pushl $66
c0102d6f:	6a 42                	push   $0x42
  jmp __alltraps
c0102d71:	e9 8a fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d76 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d76:	6a 00                	push   $0x0
  pushl $67
c0102d78:	6a 43                	push   $0x43
  jmp __alltraps
c0102d7a:	e9 81 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d7f <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d7f:	6a 00                	push   $0x0
  pushl $68
c0102d81:	6a 44                	push   $0x44
  jmp __alltraps
c0102d83:	e9 78 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d88 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d88:	6a 00                	push   $0x0
  pushl $69
c0102d8a:	6a 45                	push   $0x45
  jmp __alltraps
c0102d8c:	e9 6f fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d91 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d91:	6a 00                	push   $0x0
  pushl $70
c0102d93:	6a 46                	push   $0x46
  jmp __alltraps
c0102d95:	e9 66 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d9a <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d9a:	6a 00                	push   $0x0
  pushl $71
c0102d9c:	6a 47                	push   $0x47
  jmp __alltraps
c0102d9e:	e9 5d fd ff ff       	jmp    c0102b00 <__alltraps>

c0102da3 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102da3:	6a 00                	push   $0x0
  pushl $72
c0102da5:	6a 48                	push   $0x48
  jmp __alltraps
c0102da7:	e9 54 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dac <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dac:	6a 00                	push   $0x0
  pushl $73
c0102dae:	6a 49                	push   $0x49
  jmp __alltraps
c0102db0:	e9 4b fd ff ff       	jmp    c0102b00 <__alltraps>

c0102db5 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102db5:	6a 00                	push   $0x0
  pushl $74
c0102db7:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102db9:	e9 42 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dbe <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dbe:	6a 00                	push   $0x0
  pushl $75
c0102dc0:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dc2:	e9 39 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dc7 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dc7:	6a 00                	push   $0x0
  pushl $76
c0102dc9:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102dcb:	e9 30 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dd0 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dd0:	6a 00                	push   $0x0
  pushl $77
c0102dd2:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dd4:	e9 27 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dd9 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102dd9:	6a 00                	push   $0x0
  pushl $78
c0102ddb:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102ddd:	e9 1e fd ff ff       	jmp    c0102b00 <__alltraps>

c0102de2 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102de2:	6a 00                	push   $0x0
  pushl $79
c0102de4:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102de6:	e9 15 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102deb <vector80>:
.globl vector80
vector80:
  pushl $0
c0102deb:	6a 00                	push   $0x0
  pushl $80
c0102ded:	6a 50                	push   $0x50
  jmp __alltraps
c0102def:	e9 0c fd ff ff       	jmp    c0102b00 <__alltraps>

c0102df4 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102df4:	6a 00                	push   $0x0
  pushl $81
c0102df6:	6a 51                	push   $0x51
  jmp __alltraps
c0102df8:	e9 03 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dfd <vector82>:
.globl vector82
vector82:
  pushl $0
c0102dfd:	6a 00                	push   $0x0
  pushl $82
c0102dff:	6a 52                	push   $0x52
  jmp __alltraps
c0102e01:	e9 fa fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e06 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e06:	6a 00                	push   $0x0
  pushl $83
c0102e08:	6a 53                	push   $0x53
  jmp __alltraps
c0102e0a:	e9 f1 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e0f <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e0f:	6a 00                	push   $0x0
  pushl $84
c0102e11:	6a 54                	push   $0x54
  jmp __alltraps
c0102e13:	e9 e8 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e18 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e18:	6a 00                	push   $0x0
  pushl $85
c0102e1a:	6a 55                	push   $0x55
  jmp __alltraps
c0102e1c:	e9 df fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e21 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e21:	6a 00                	push   $0x0
  pushl $86
c0102e23:	6a 56                	push   $0x56
  jmp __alltraps
c0102e25:	e9 d6 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e2a <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e2a:	6a 00                	push   $0x0
  pushl $87
c0102e2c:	6a 57                	push   $0x57
  jmp __alltraps
c0102e2e:	e9 cd fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e33 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e33:	6a 00                	push   $0x0
  pushl $88
c0102e35:	6a 58                	push   $0x58
  jmp __alltraps
c0102e37:	e9 c4 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e3c <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e3c:	6a 00                	push   $0x0
  pushl $89
c0102e3e:	6a 59                	push   $0x59
  jmp __alltraps
c0102e40:	e9 bb fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e45 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e45:	6a 00                	push   $0x0
  pushl $90
c0102e47:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e49:	e9 b2 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e4e <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e4e:	6a 00                	push   $0x0
  pushl $91
c0102e50:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e52:	e9 a9 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e57 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e57:	6a 00                	push   $0x0
  pushl $92
c0102e59:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e5b:	e9 a0 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e60 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e60:	6a 00                	push   $0x0
  pushl $93
c0102e62:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e64:	e9 97 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e69 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e69:	6a 00                	push   $0x0
  pushl $94
c0102e6b:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e6d:	e9 8e fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e72 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e72:	6a 00                	push   $0x0
  pushl $95
c0102e74:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e76:	e9 85 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e7b <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e7b:	6a 00                	push   $0x0
  pushl $96
c0102e7d:	6a 60                	push   $0x60
  jmp __alltraps
c0102e7f:	e9 7c fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e84 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e84:	6a 00                	push   $0x0
  pushl $97
c0102e86:	6a 61                	push   $0x61
  jmp __alltraps
c0102e88:	e9 73 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e8d <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e8d:	6a 00                	push   $0x0
  pushl $98
c0102e8f:	6a 62                	push   $0x62
  jmp __alltraps
c0102e91:	e9 6a fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e96 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e96:	6a 00                	push   $0x0
  pushl $99
c0102e98:	6a 63                	push   $0x63
  jmp __alltraps
c0102e9a:	e9 61 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e9f <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e9f:	6a 00                	push   $0x0
  pushl $100
c0102ea1:	6a 64                	push   $0x64
  jmp __alltraps
c0102ea3:	e9 58 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ea8 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ea8:	6a 00                	push   $0x0
  pushl $101
c0102eaa:	6a 65                	push   $0x65
  jmp __alltraps
c0102eac:	e9 4f fc ff ff       	jmp    c0102b00 <__alltraps>

c0102eb1 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eb1:	6a 00                	push   $0x0
  pushl $102
c0102eb3:	6a 66                	push   $0x66
  jmp __alltraps
c0102eb5:	e9 46 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102eba <vector103>:
.globl vector103
vector103:
  pushl $0
c0102eba:	6a 00                	push   $0x0
  pushl $103
c0102ebc:	6a 67                	push   $0x67
  jmp __alltraps
c0102ebe:	e9 3d fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ec3 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ec3:	6a 00                	push   $0x0
  pushl $104
c0102ec5:	6a 68                	push   $0x68
  jmp __alltraps
c0102ec7:	e9 34 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ecc <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ecc:	6a 00                	push   $0x0
  pushl $105
c0102ece:	6a 69                	push   $0x69
  jmp __alltraps
c0102ed0:	e9 2b fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ed5 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ed5:	6a 00                	push   $0x0
  pushl $106
c0102ed7:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ed9:	e9 22 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ede <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ede:	6a 00                	push   $0x0
  pushl $107
c0102ee0:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102ee2:	e9 19 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ee7 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ee7:	6a 00                	push   $0x0
  pushl $108
c0102ee9:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102eeb:	e9 10 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ef0 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102ef0:	6a 00                	push   $0x0
  pushl $109
c0102ef2:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102ef4:	e9 07 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ef9 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102ef9:	6a 00                	push   $0x0
  pushl $110
c0102efb:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102efd:	e9 fe fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f02 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f02:	6a 00                	push   $0x0
  pushl $111
c0102f04:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f06:	e9 f5 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f0b <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f0b:	6a 00                	push   $0x0
  pushl $112
c0102f0d:	6a 70                	push   $0x70
  jmp __alltraps
c0102f0f:	e9 ec fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f14 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f14:	6a 00                	push   $0x0
  pushl $113
c0102f16:	6a 71                	push   $0x71
  jmp __alltraps
c0102f18:	e9 e3 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f1d <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f1d:	6a 00                	push   $0x0
  pushl $114
c0102f1f:	6a 72                	push   $0x72
  jmp __alltraps
c0102f21:	e9 da fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f26 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f26:	6a 00                	push   $0x0
  pushl $115
c0102f28:	6a 73                	push   $0x73
  jmp __alltraps
c0102f2a:	e9 d1 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f2f <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f2f:	6a 00                	push   $0x0
  pushl $116
c0102f31:	6a 74                	push   $0x74
  jmp __alltraps
c0102f33:	e9 c8 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f38 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f38:	6a 00                	push   $0x0
  pushl $117
c0102f3a:	6a 75                	push   $0x75
  jmp __alltraps
c0102f3c:	e9 bf fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f41 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f41:	6a 00                	push   $0x0
  pushl $118
c0102f43:	6a 76                	push   $0x76
  jmp __alltraps
c0102f45:	e9 b6 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f4a <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f4a:	6a 00                	push   $0x0
  pushl $119
c0102f4c:	6a 77                	push   $0x77
  jmp __alltraps
c0102f4e:	e9 ad fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f53 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f53:	6a 00                	push   $0x0
  pushl $120
c0102f55:	6a 78                	push   $0x78
  jmp __alltraps
c0102f57:	e9 a4 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f5c <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f5c:	6a 00                	push   $0x0
  pushl $121
c0102f5e:	6a 79                	push   $0x79
  jmp __alltraps
c0102f60:	e9 9b fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f65 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f65:	6a 00                	push   $0x0
  pushl $122
c0102f67:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f69:	e9 92 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f6e <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f6e:	6a 00                	push   $0x0
  pushl $123
c0102f70:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f72:	e9 89 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f77 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f77:	6a 00                	push   $0x0
  pushl $124
c0102f79:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f7b:	e9 80 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f80 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f80:	6a 00                	push   $0x0
  pushl $125
c0102f82:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f84:	e9 77 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f89 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f89:	6a 00                	push   $0x0
  pushl $126
c0102f8b:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f8d:	e9 6e fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f92 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f92:	6a 00                	push   $0x0
  pushl $127
c0102f94:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f96:	e9 65 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f9b <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f9b:	6a 00                	push   $0x0
  pushl $128
c0102f9d:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fa2:	e9 59 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fa7 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fa7:	6a 00                	push   $0x0
  pushl $129
c0102fa9:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fae:	e9 4d fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fb3 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fb3:	6a 00                	push   $0x0
  pushl $130
c0102fb5:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fba:	e9 41 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fbf <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fbf:	6a 00                	push   $0x0
  pushl $131
c0102fc1:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fc6:	e9 35 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fcb <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fcb:	6a 00                	push   $0x0
  pushl $132
c0102fcd:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fd2:	e9 29 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fd7 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fd7:	6a 00                	push   $0x0
  pushl $133
c0102fd9:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fde:	e9 1d fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fe3 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fe3:	6a 00                	push   $0x0
  pushl $134
c0102fe5:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102fea:	e9 11 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fef <vector135>:
.globl vector135
vector135:
  pushl $0
c0102fef:	6a 00                	push   $0x0
  pushl $135
c0102ff1:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102ff6:	e9 05 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102ffb <vector136>:
.globl vector136
vector136:
  pushl $0
c0102ffb:	6a 00                	push   $0x0
  pushl $136
c0102ffd:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103002:	e9 f9 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103007 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103007:	6a 00                	push   $0x0
  pushl $137
c0103009:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c010300e:	e9 ed fa ff ff       	jmp    c0102b00 <__alltraps>

c0103013 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103013:	6a 00                	push   $0x0
  pushl $138
c0103015:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010301a:	e9 e1 fa ff ff       	jmp    c0102b00 <__alltraps>

c010301f <vector139>:
.globl vector139
vector139:
  pushl $0
c010301f:	6a 00                	push   $0x0
  pushl $139
c0103021:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103026:	e9 d5 fa ff ff       	jmp    c0102b00 <__alltraps>

c010302b <vector140>:
.globl vector140
vector140:
  pushl $0
c010302b:	6a 00                	push   $0x0
  pushl $140
c010302d:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103032:	e9 c9 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103037 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103037:	6a 00                	push   $0x0
  pushl $141
c0103039:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010303e:	e9 bd fa ff ff       	jmp    c0102b00 <__alltraps>

c0103043 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103043:	6a 00                	push   $0x0
  pushl $142
c0103045:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010304a:	e9 b1 fa ff ff       	jmp    c0102b00 <__alltraps>

c010304f <vector143>:
.globl vector143
vector143:
  pushl $0
c010304f:	6a 00                	push   $0x0
  pushl $143
c0103051:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103056:	e9 a5 fa ff ff       	jmp    c0102b00 <__alltraps>

c010305b <vector144>:
.globl vector144
vector144:
  pushl $0
c010305b:	6a 00                	push   $0x0
  pushl $144
c010305d:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103062:	e9 99 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103067 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103067:	6a 00                	push   $0x0
  pushl $145
c0103069:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010306e:	e9 8d fa ff ff       	jmp    c0102b00 <__alltraps>

c0103073 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103073:	6a 00                	push   $0x0
  pushl $146
c0103075:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010307a:	e9 81 fa ff ff       	jmp    c0102b00 <__alltraps>

c010307f <vector147>:
.globl vector147
vector147:
  pushl $0
c010307f:	6a 00                	push   $0x0
  pushl $147
c0103081:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103086:	e9 75 fa ff ff       	jmp    c0102b00 <__alltraps>

c010308b <vector148>:
.globl vector148
vector148:
  pushl $0
c010308b:	6a 00                	push   $0x0
  pushl $148
c010308d:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103092:	e9 69 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103097 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103097:	6a 00                	push   $0x0
  pushl $149
c0103099:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010309e:	e9 5d fa ff ff       	jmp    c0102b00 <__alltraps>

c01030a3 <vector150>:
.globl vector150
vector150:
  pushl $0
c01030a3:	6a 00                	push   $0x0
  pushl $150
c01030a5:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030aa:	e9 51 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030af <vector151>:
.globl vector151
vector151:
  pushl $0
c01030af:	6a 00                	push   $0x0
  pushl $151
c01030b1:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030b6:	e9 45 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030bb <vector152>:
.globl vector152
vector152:
  pushl $0
c01030bb:	6a 00                	push   $0x0
  pushl $152
c01030bd:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030c2:	e9 39 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030c7 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030c7:	6a 00                	push   $0x0
  pushl $153
c01030c9:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030ce:	e9 2d fa ff ff       	jmp    c0102b00 <__alltraps>

c01030d3 <vector154>:
.globl vector154
vector154:
  pushl $0
c01030d3:	6a 00                	push   $0x0
  pushl $154
c01030d5:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030da:	e9 21 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030df <vector155>:
.globl vector155
vector155:
  pushl $0
c01030df:	6a 00                	push   $0x0
  pushl $155
c01030e1:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030e6:	e9 15 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030eb <vector156>:
.globl vector156
vector156:
  pushl $0
c01030eb:	6a 00                	push   $0x0
  pushl $156
c01030ed:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030f2:	e9 09 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030f7 <vector157>:
.globl vector157
vector157:
  pushl $0
c01030f7:	6a 00                	push   $0x0
  pushl $157
c01030f9:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01030fe:	e9 fd f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103103 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103103:	6a 00                	push   $0x0
  pushl $158
c0103105:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010310a:	e9 f1 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010310f <vector159>:
.globl vector159
vector159:
  pushl $0
c010310f:	6a 00                	push   $0x0
  pushl $159
c0103111:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103116:	e9 e5 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010311b <vector160>:
.globl vector160
vector160:
  pushl $0
c010311b:	6a 00                	push   $0x0
  pushl $160
c010311d:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103122:	e9 d9 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103127 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103127:	6a 00                	push   $0x0
  pushl $161
c0103129:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010312e:	e9 cd f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103133 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103133:	6a 00                	push   $0x0
  pushl $162
c0103135:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010313a:	e9 c1 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010313f <vector163>:
.globl vector163
vector163:
  pushl $0
c010313f:	6a 00                	push   $0x0
  pushl $163
c0103141:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103146:	e9 b5 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010314b <vector164>:
.globl vector164
vector164:
  pushl $0
c010314b:	6a 00                	push   $0x0
  pushl $164
c010314d:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103152:	e9 a9 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103157 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103157:	6a 00                	push   $0x0
  pushl $165
c0103159:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010315e:	e9 9d f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103163 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103163:	6a 00                	push   $0x0
  pushl $166
c0103165:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c010316a:	e9 91 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010316f <vector167>:
.globl vector167
vector167:
  pushl $0
c010316f:	6a 00                	push   $0x0
  pushl $167
c0103171:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103176:	e9 85 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010317b <vector168>:
.globl vector168
vector168:
  pushl $0
c010317b:	6a 00                	push   $0x0
  pushl $168
c010317d:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103182:	e9 79 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103187 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103187:	6a 00                	push   $0x0
  pushl $169
c0103189:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010318e:	e9 6d f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103193 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103193:	6a 00                	push   $0x0
  pushl $170
c0103195:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c010319a:	e9 61 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010319f <vector171>:
.globl vector171
vector171:
  pushl $0
c010319f:	6a 00                	push   $0x0
  pushl $171
c01031a1:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031a6:	e9 55 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031ab <vector172>:
.globl vector172
vector172:
  pushl $0
c01031ab:	6a 00                	push   $0x0
  pushl $172
c01031ad:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031b2:	e9 49 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031b7 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031b7:	6a 00                	push   $0x0
  pushl $173
c01031b9:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031be:	e9 3d f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031c3 <vector174>:
.globl vector174
vector174:
  pushl $0
c01031c3:	6a 00                	push   $0x0
  pushl $174
c01031c5:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031ca:	e9 31 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031cf <vector175>:
.globl vector175
vector175:
  pushl $0
c01031cf:	6a 00                	push   $0x0
  pushl $175
c01031d1:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031d6:	e9 25 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031db <vector176>:
.globl vector176
vector176:
  pushl $0
c01031db:	6a 00                	push   $0x0
  pushl $176
c01031dd:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031e2:	e9 19 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031e7 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031e7:	6a 00                	push   $0x0
  pushl $177
c01031e9:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031ee:	e9 0d f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031f3 <vector178>:
.globl vector178
vector178:
  pushl $0
c01031f3:	6a 00                	push   $0x0
  pushl $178
c01031f5:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01031fa:	e9 01 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031ff <vector179>:
.globl vector179
vector179:
  pushl $0
c01031ff:	6a 00                	push   $0x0
  pushl $179
c0103201:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103206:	e9 f5 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010320b <vector180>:
.globl vector180
vector180:
  pushl $0
c010320b:	6a 00                	push   $0x0
  pushl $180
c010320d:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103212:	e9 e9 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103217 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103217:	6a 00                	push   $0x0
  pushl $181
c0103219:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010321e:	e9 dd f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103223 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103223:	6a 00                	push   $0x0
  pushl $182
c0103225:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010322a:	e9 d1 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010322f <vector183>:
.globl vector183
vector183:
  pushl $0
c010322f:	6a 00                	push   $0x0
  pushl $183
c0103231:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103236:	e9 c5 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010323b <vector184>:
.globl vector184
vector184:
  pushl $0
c010323b:	6a 00                	push   $0x0
  pushl $184
c010323d:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103242:	e9 b9 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103247 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103247:	6a 00                	push   $0x0
  pushl $185
c0103249:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010324e:	e9 ad f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103253 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103253:	6a 00                	push   $0x0
  pushl $186
c0103255:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010325a:	e9 a1 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010325f <vector187>:
.globl vector187
vector187:
  pushl $0
c010325f:	6a 00                	push   $0x0
  pushl $187
c0103261:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103266:	e9 95 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010326b <vector188>:
.globl vector188
vector188:
  pushl $0
c010326b:	6a 00                	push   $0x0
  pushl $188
c010326d:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103272:	e9 89 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103277 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103277:	6a 00                	push   $0x0
  pushl $189
c0103279:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010327e:	e9 7d f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103283 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103283:	6a 00                	push   $0x0
  pushl $190
c0103285:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010328a:	e9 71 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010328f <vector191>:
.globl vector191
vector191:
  pushl $0
c010328f:	6a 00                	push   $0x0
  pushl $191
c0103291:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103296:	e9 65 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010329b <vector192>:
.globl vector192
vector192:
  pushl $0
c010329b:	6a 00                	push   $0x0
  pushl $192
c010329d:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032a2:	e9 59 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032a7 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032a7:	6a 00                	push   $0x0
  pushl $193
c01032a9:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032ae:	e9 4d f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032b3 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032b3:	6a 00                	push   $0x0
  pushl $194
c01032b5:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032ba:	e9 41 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032bf <vector195>:
.globl vector195
vector195:
  pushl $0
c01032bf:	6a 00                	push   $0x0
  pushl $195
c01032c1:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032c6:	e9 35 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032cb <vector196>:
.globl vector196
vector196:
  pushl $0
c01032cb:	6a 00                	push   $0x0
  pushl $196
c01032cd:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032d2:	e9 29 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032d7 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032d7:	6a 00                	push   $0x0
  pushl $197
c01032d9:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032de:	e9 1d f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032e3 <vector198>:
.globl vector198
vector198:
  pushl $0
c01032e3:	6a 00                	push   $0x0
  pushl $198
c01032e5:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032ea:	e9 11 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032ef <vector199>:
.globl vector199
vector199:
  pushl $0
c01032ef:	6a 00                	push   $0x0
  pushl $199
c01032f1:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01032f6:	e9 05 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032fb <vector200>:
.globl vector200
vector200:
  pushl $0
c01032fb:	6a 00                	push   $0x0
  pushl $200
c01032fd:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103302:	e9 f9 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103307 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103307:	6a 00                	push   $0x0
  pushl $201
c0103309:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010330e:	e9 ed f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103313 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103313:	6a 00                	push   $0x0
  pushl $202
c0103315:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010331a:	e9 e1 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010331f <vector203>:
.globl vector203
vector203:
  pushl $0
c010331f:	6a 00                	push   $0x0
  pushl $203
c0103321:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103326:	e9 d5 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010332b <vector204>:
.globl vector204
vector204:
  pushl $0
c010332b:	6a 00                	push   $0x0
  pushl $204
c010332d:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103332:	e9 c9 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103337 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103337:	6a 00                	push   $0x0
  pushl $205
c0103339:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010333e:	e9 bd f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103343 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103343:	6a 00                	push   $0x0
  pushl $206
c0103345:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010334a:	e9 b1 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010334f <vector207>:
.globl vector207
vector207:
  pushl $0
c010334f:	6a 00                	push   $0x0
  pushl $207
c0103351:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103356:	e9 a5 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010335b <vector208>:
.globl vector208
vector208:
  pushl $0
c010335b:	6a 00                	push   $0x0
  pushl $208
c010335d:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103362:	e9 99 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103367 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103367:	6a 00                	push   $0x0
  pushl $209
c0103369:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010336e:	e9 8d f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103373 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103373:	6a 00                	push   $0x0
  pushl $210
c0103375:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010337a:	e9 81 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010337f <vector211>:
.globl vector211
vector211:
  pushl $0
c010337f:	6a 00                	push   $0x0
  pushl $211
c0103381:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103386:	e9 75 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010338b <vector212>:
.globl vector212
vector212:
  pushl $0
c010338b:	6a 00                	push   $0x0
  pushl $212
c010338d:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103392:	e9 69 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103397 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103397:	6a 00                	push   $0x0
  pushl $213
c0103399:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010339e:	e9 5d f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033a3 <vector214>:
.globl vector214
vector214:
  pushl $0
c01033a3:	6a 00                	push   $0x0
  pushl $214
c01033a5:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033aa:	e9 51 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033af <vector215>:
.globl vector215
vector215:
  pushl $0
c01033af:	6a 00                	push   $0x0
  pushl $215
c01033b1:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033b6:	e9 45 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033bb <vector216>:
.globl vector216
vector216:
  pushl $0
c01033bb:	6a 00                	push   $0x0
  pushl $216
c01033bd:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033c2:	e9 39 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033c7 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033c7:	6a 00                	push   $0x0
  pushl $217
c01033c9:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033ce:	e9 2d f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033d3 <vector218>:
.globl vector218
vector218:
  pushl $0
c01033d3:	6a 00                	push   $0x0
  pushl $218
c01033d5:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033da:	e9 21 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033df <vector219>:
.globl vector219
vector219:
  pushl $0
c01033df:	6a 00                	push   $0x0
  pushl $219
c01033e1:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033e6:	e9 15 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033eb <vector220>:
.globl vector220
vector220:
  pushl $0
c01033eb:	6a 00                	push   $0x0
  pushl $220
c01033ed:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033f2:	e9 09 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033f7 <vector221>:
.globl vector221
vector221:
  pushl $0
c01033f7:	6a 00                	push   $0x0
  pushl $221
c01033f9:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01033fe:	e9 fd f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103403 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103403:	6a 00                	push   $0x0
  pushl $222
c0103405:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010340a:	e9 f1 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010340f <vector223>:
.globl vector223
vector223:
  pushl $0
c010340f:	6a 00                	push   $0x0
  pushl $223
c0103411:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103416:	e9 e5 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010341b <vector224>:
.globl vector224
vector224:
  pushl $0
c010341b:	6a 00                	push   $0x0
  pushl $224
c010341d:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103422:	e9 d9 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103427 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103427:	6a 00                	push   $0x0
  pushl $225
c0103429:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010342e:	e9 cd f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103433 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103433:	6a 00                	push   $0x0
  pushl $226
c0103435:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010343a:	e9 c1 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010343f <vector227>:
.globl vector227
vector227:
  pushl $0
c010343f:	6a 00                	push   $0x0
  pushl $227
c0103441:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103446:	e9 b5 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010344b <vector228>:
.globl vector228
vector228:
  pushl $0
c010344b:	6a 00                	push   $0x0
  pushl $228
c010344d:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103452:	e9 a9 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103457 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103457:	6a 00                	push   $0x0
  pushl $229
c0103459:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010345e:	e9 9d f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103463 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103463:	6a 00                	push   $0x0
  pushl $230
c0103465:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010346a:	e9 91 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010346f <vector231>:
.globl vector231
vector231:
  pushl $0
c010346f:	6a 00                	push   $0x0
  pushl $231
c0103471:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103476:	e9 85 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010347b <vector232>:
.globl vector232
vector232:
  pushl $0
c010347b:	6a 00                	push   $0x0
  pushl $232
c010347d:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103482:	e9 79 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103487 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103487:	6a 00                	push   $0x0
  pushl $233
c0103489:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010348e:	e9 6d f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103493 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103493:	6a 00                	push   $0x0
  pushl $234
c0103495:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c010349a:	e9 61 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010349f <vector235>:
.globl vector235
vector235:
  pushl $0
c010349f:	6a 00                	push   $0x0
  pushl $235
c01034a1:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034a6:	e9 55 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034ab <vector236>:
.globl vector236
vector236:
  pushl $0
c01034ab:	6a 00                	push   $0x0
  pushl $236
c01034ad:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034b2:	e9 49 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034b7 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034b7:	6a 00                	push   $0x0
  pushl $237
c01034b9:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034be:	e9 3d f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034c3 <vector238>:
.globl vector238
vector238:
  pushl $0
c01034c3:	6a 00                	push   $0x0
  pushl $238
c01034c5:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034ca:	e9 31 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034cf <vector239>:
.globl vector239
vector239:
  pushl $0
c01034cf:	6a 00                	push   $0x0
  pushl $239
c01034d1:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034d6:	e9 25 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034db <vector240>:
.globl vector240
vector240:
  pushl $0
c01034db:	6a 00                	push   $0x0
  pushl $240
c01034dd:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034e2:	e9 19 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034e7 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034e7:	6a 00                	push   $0x0
  pushl $241
c01034e9:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034ee:	e9 0d f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034f3 <vector242>:
.globl vector242
vector242:
  pushl $0
c01034f3:	6a 00                	push   $0x0
  pushl $242
c01034f5:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01034fa:	e9 01 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034ff <vector243>:
.globl vector243
vector243:
  pushl $0
c01034ff:	6a 00                	push   $0x0
  pushl $243
c0103501:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103506:	e9 f5 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010350b <vector244>:
.globl vector244
vector244:
  pushl $0
c010350b:	6a 00                	push   $0x0
  pushl $244
c010350d:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103512:	e9 e9 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103517 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103517:	6a 00                	push   $0x0
  pushl $245
c0103519:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010351e:	e9 dd f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103523 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103523:	6a 00                	push   $0x0
  pushl $246
c0103525:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010352a:	e9 d1 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010352f <vector247>:
.globl vector247
vector247:
  pushl $0
c010352f:	6a 00                	push   $0x0
  pushl $247
c0103531:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103536:	e9 c5 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010353b <vector248>:
.globl vector248
vector248:
  pushl $0
c010353b:	6a 00                	push   $0x0
  pushl $248
c010353d:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103542:	e9 b9 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103547 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103547:	6a 00                	push   $0x0
  pushl $249
c0103549:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010354e:	e9 ad f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103553 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103553:	6a 00                	push   $0x0
  pushl $250
c0103555:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010355a:	e9 a1 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010355f <vector251>:
.globl vector251
vector251:
  pushl $0
c010355f:	6a 00                	push   $0x0
  pushl $251
c0103561:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103566:	e9 95 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010356b <vector252>:
.globl vector252
vector252:
  pushl $0
c010356b:	6a 00                	push   $0x0
  pushl $252
c010356d:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103572:	e9 89 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103577 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103577:	6a 00                	push   $0x0
  pushl $253
c0103579:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010357e:	e9 7d f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103583 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103583:	6a 00                	push   $0x0
  pushl $254
c0103585:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010358a:	e9 71 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010358f <vector255>:
.globl vector255
vector255:
  pushl $0
c010358f:	6a 00                	push   $0x0
  pushl $255
c0103591:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103596:	e9 65 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010359b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010359b:	55                   	push   %ebp
c010359c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010359e:	8b 55 08             	mov    0x8(%ebp),%edx
c01035a1:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01035a6:	29 c2                	sub    %eax,%edx
c01035a8:	89 d0                	mov    %edx,%eax
c01035aa:	c1 f8 05             	sar    $0x5,%eax
}
c01035ad:	5d                   	pop    %ebp
c01035ae:	c3                   	ret    

c01035af <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035af:	55                   	push   %ebp
c01035b0:	89 e5                	mov    %esp,%ebp
c01035b2:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01035b8:	89 04 24             	mov    %eax,(%esp)
c01035bb:	e8 db ff ff ff       	call   c010359b <page2ppn>
c01035c0:	c1 e0 0c             	shl    $0xc,%eax
}
c01035c3:	c9                   	leave  
c01035c4:	c3                   	ret    

c01035c5 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035c5:	55                   	push   %ebp
c01035c6:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01035cb:	8b 00                	mov    (%eax),%eax
}
c01035cd:	5d                   	pop    %ebp
c01035ce:	c3                   	ret    

c01035cf <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035cf:	55                   	push   %ebp
c01035d0:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035d8:	89 10                	mov    %edx,(%eax)
}
c01035da:	5d                   	pop    %ebp
c01035db:	c3                   	ret    

c01035dc <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01035dc:	55                   	push   %ebp
c01035dd:	89 e5                	mov    %esp,%ebp
c01035df:	83 ec 10             	sub    $0x10,%esp
c01035e2:	c7 45 fc 14 30 15 c0 	movl   $0xc0153014,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035ec:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01035ef:	89 50 04             	mov    %edx,0x4(%eax)
c01035f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035f5:	8b 50 04             	mov    0x4(%eax),%edx
c01035f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035fb:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01035fd:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0103604:	00 00 00 
}
c0103607:	c9                   	leave  
c0103608:	c3                   	ret    

c0103609 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103609:	55                   	push   %ebp
c010360a:	89 e5                	mov    %esp,%ebp
c010360c:	83 ec 48             	sub    $0x48,%esp
		assert(n > 0);
c010360f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103613:	75 24                	jne    c0103639 <default_init_memmap+0x30>
c0103615:	c7 44 24 0c d0 5e 11 	movl   $0xc0115ed0,0xc(%esp)
c010361c:	c0 
c010361d:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103624:	c0 
c0103625:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010362c:	00 
c010362d:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103634:	e8 8f d8 ff ff       	call   c0100ec8 <__panic>
	   struct Page *p = base;
c0103639:	8b 45 08             	mov    0x8(%ebp),%eax
c010363c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	   for (; p != base + n; p ++) {
c010363f:	e9 dc 00 00 00       	jmp    c0103720 <default_init_memmap+0x117>
	        assert(PageReserved(p));
c0103644:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103647:	83 c0 04             	add    $0x4,%eax
c010364a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103651:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103654:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103657:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010365a:	0f a3 10             	bt     %edx,(%eax)
c010365d:	19 c0                	sbb    %eax,%eax
c010365f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103662:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103666:	0f 95 c0             	setne  %al
c0103669:	0f b6 c0             	movzbl %al,%eax
c010366c:	85 c0                	test   %eax,%eax
c010366e:	75 24                	jne    c0103694 <default_init_memmap+0x8b>
c0103670:	c7 44 24 0c 01 5f 11 	movl   $0xc0115f01,0xc(%esp)
c0103677:	c0 
c0103678:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c010367f:	c0 
c0103680:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0103687:	00 
c0103688:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c010368f:	e8 34 d8 ff ff       	call   c0100ec8 <__panic>
	        p->flags = 0;
c0103694:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103697:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	        SetPageProperty(p);
c010369e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a1:	83 c0 04             	add    $0x4,%eax
c01036a4:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036b4:	0f ab 10             	bts    %edx,(%eax)
	        p->property = 0;
c01036b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036ba:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	        set_page_ref(p, 0);
c01036c1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036c8:	00 
c01036c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036cc:	89 04 24             	mov    %eax,(%esp)
c01036cf:	e8 fb fe ff ff       	call   c01035cf <set_page_ref>
	        list_add_before(&free_list, &(p->page_link));
c01036d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d7:	83 c0 0c             	add    $0xc,%eax
c01036da:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
c01036e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01036e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036e7:	8b 00                	mov    (%eax),%eax
c01036e9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01036ec:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01036ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01036f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01036f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01036fb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01036fe:	89 10                	mov    %edx,(%eax)
c0103700:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103703:	8b 10                	mov    (%eax),%edx
c0103705:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103708:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010370b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010370e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103711:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103714:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103717:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010371a:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
		assert(n > 0);
	   struct Page *p = base;
	   for (; p != base + n; p ++) {
c010371c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103720:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103723:	c1 e0 05             	shl    $0x5,%eax
c0103726:	89 c2                	mov    %eax,%edx
c0103728:	8b 45 08             	mov    0x8(%ebp),%eax
c010372b:	01 d0                	add    %edx,%eax
c010372d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103730:	0f 85 0e ff ff ff    	jne    c0103644 <default_init_memmap+0x3b>
	        SetPageProperty(p);
	        p->property = 0;
	        set_page_ref(p, 0);
	        list_add_before(&free_list, &(p->page_link));
	    }
	    base->property = n;
c0103736:	8b 45 08             	mov    0x8(%ebp),%eax
c0103739:	8b 55 0c             	mov    0xc(%ebp),%edx
c010373c:	89 50 08             	mov    %edx,0x8(%eax)
	    nr_free += n;
c010373f:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c0103745:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103748:	01 d0                	add    %edx,%eax
c010374a:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
}
c010374f:	c9                   	leave  
c0103750:	c3                   	ret    

c0103751 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0103751:	55                   	push   %ebp
c0103752:	89 e5                	mov    %esp,%ebp
c0103754:	83 ec 48             	sub    $0x48,%esp
		assert(n > 0);
c0103757:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010375b:	75 24                	jne    c0103781 <default_alloc_pages+0x30>
c010375d:	c7 44 24 0c d0 5e 11 	movl   $0xc0115ed0,0xc(%esp)
c0103764:	c0 
c0103765:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c010376c:	c0 
c010376d:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c0103774:	00 
c0103775:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c010377c:	e8 47 d7 ff ff       	call   c0100ec8 <__panic>
	    if (n > nr_free) {
c0103781:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103786:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103789:	73 0a                	jae    c0103795 <default_alloc_pages+0x44>
	        return NULL;
c010378b:	b8 00 00 00 00       	mov    $0x0,%eax
c0103790:	e9 f5 00 00 00       	jmp    c010388a <default_alloc_pages+0x139>
	    }
	    struct Page *page = NULL;
c0103795:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	    list_entry_t *le = &free_list;
c010379c:	c7 45 f0 14 30 15 c0 	movl   $0xc0153014,-0x10(%ebp)
	    while ((le = list_next(le)) != &free_list) {
c01037a3:	eb 1c                	jmp    c01037c1 <default_alloc_pages+0x70>
	        struct Page *p = le2page(le, page_link);
c01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037a8:	83 e8 0c             	sub    $0xc,%eax
c01037ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
	        if (p->property >= n) {
c01037ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01037b1:	8b 40 08             	mov    0x8(%eax),%eax
c01037b4:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037b7:	72 08                	jb     c01037c1 <default_alloc_pages+0x70>
	            page = p;
c01037b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01037bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	            break;
c01037bf:	eb 18                	jmp    c01037d9 <default_alloc_pages+0x88>
c01037c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037ca:	8b 40 04             	mov    0x4(%eax),%eax
	    if (n > nr_free) {
	        return NULL;
	    }
	    struct Page *page = NULL;
	    list_entry_t *le = &free_list;
	    while ((le = list_next(le)) != &free_list) {
c01037cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01037d0:	81 7d f0 14 30 15 c0 	cmpl   $0xc0153014,-0x10(%ebp)
c01037d7:	75 cc                	jne    c01037a5 <default_alloc_pages+0x54>
	        if (p->property >= n) {
	            page = p;
	            break;
	        }
	    }
	    if (page != NULL) {
c01037d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01037dd:	0f 84 a4 00 00 00    	je     c0103887 <default_alloc_pages+0x136>
	        struct Page *p = page;
c01037e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	        for(; p != page + n; p++){
c01037e9:	eb 61                	jmp    c010384c <default_alloc_pages+0xfb>
	        	SetPageReserved(p);
c01037eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037ee:	83 c0 04             	add    $0x4,%eax
c01037f1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01037f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01037fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037fe:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103801:	0f ab 10             	bts    %edx,(%eax)
	        	ClearPageProperty(p);
c0103804:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103807:	83 c0 04             	add    $0x4,%eax
c010380a:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
c0103811:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103814:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103817:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010381a:	0f b3 10             	btr    %edx,(%eax)
	        	list_del(&(p->page_link));
c010381d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103820:	83 c0 0c             	add    $0xc,%eax
c0103823:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103826:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103829:	8b 40 04             	mov    0x4(%eax),%eax
c010382c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010382f:	8b 12                	mov    (%edx),%edx
c0103831:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103834:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103837:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010383a:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010383d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103840:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103843:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103846:	89 10                	mov    %edx,(%eax)
	            break;
	        }
	    }
	    if (page != NULL) {
	        struct Page *p = page;
	        for(; p != page + n; p++){
c0103848:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010384c:	8b 45 08             	mov    0x8(%ebp),%eax
c010384f:	c1 e0 05             	shl    $0x5,%eax
c0103852:	89 c2                	mov    %eax,%edx
c0103854:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103857:	01 d0                	add    %edx,%eax
c0103859:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010385c:	75 8d                	jne    c01037eb <default_alloc_pages+0x9a>
	        	SetPageReserved(p);
	        	ClearPageProperty(p);
	        	list_del(&(p->page_link));
	        }
	        if (page->property > n) {
c010385e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103861:	8b 40 08             	mov    0x8(%eax),%eax
c0103864:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103867:	76 11                	jbe    c010387a <default_alloc_pages+0x129>
	            p->property = page->property - n;
c0103869:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010386c:	8b 40 08             	mov    0x8(%eax),%eax
c010386f:	2b 45 08             	sub    0x8(%ebp),%eax
c0103872:	89 c2                	mov    %eax,%edx
c0103874:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103877:	89 50 08             	mov    %edx,0x8(%eax)
	        }
	        nr_free -= n;
c010387a:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010387f:	2b 45 08             	sub    0x8(%ebp),%eax
c0103882:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
	    }
	    return page;
c0103887:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010388a:	c9                   	leave  
c010388b:	c3                   	ret    

c010388c <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010388c:	55                   	push   %ebp
c010388d:	89 e5                	mov    %esp,%ebp
c010388f:	83 ec 58             	sub    $0x58,%esp
		assert(n > 0);
c0103892:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103896:	75 24                	jne    c01038bc <default_free_pages+0x30>
c0103898:	c7 44 24 0c d0 5e 11 	movl   $0xc0115ed0,0xc(%esp)
c010389f:	c0 
c01038a0:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01038a7:	c0 
c01038a8:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01038af:	00 
c01038b0:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c01038b7:	e8 0c d6 ff ff       	call   c0100ec8 <__panic>
	    assert(PageReserved(base));
c01038bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01038bf:	83 c0 04             	add    $0x4,%eax
c01038c2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01038c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01038cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01038cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01038d2:	0f a3 10             	bt     %edx,(%eax)
c01038d5:	19 c0                	sbb    %eax,%eax
c01038d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c01038da:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01038de:	0f 95 c0             	setne  %al
c01038e1:	0f b6 c0             	movzbl %al,%eax
c01038e4:	85 c0                	test   %eax,%eax
c01038e6:	75 24                	jne    c010390c <default_free_pages+0x80>
c01038e8:	c7 44 24 0c 11 5f 11 	movl   $0xc0115f11,0xc(%esp)
c01038ef:	c0 
c01038f0:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01038f7:	c0 
c01038f8:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01038ff:	00 
c0103900:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103907:	e8 bc d5 ff ff       	call   c0100ec8 <__panic>
	    struct Page *p = base;
c010390c:	8b 45 08             	mov    0x8(%ebp),%eax
c010390f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    for (; p != base + n; p ++) {
c0103912:	eb 44                	jmp    c0103958 <default_free_pages+0xcc>
	    	p->flags = 0;
c0103914:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103917:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	        set_page_ref(p, 0);
c010391e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103925:	00 
c0103926:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103929:	89 04 24             	mov    %eax,(%esp)
c010392c:	e8 9e fc ff ff       	call   c01035cf <set_page_ref>
	        SetPageProperty(p);
c0103931:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103934:	83 c0 04             	add    $0x4,%eax
c0103937:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c010393e:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103941:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103944:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103947:	0f ab 10             	bts    %edx,(%eax)
	        p->property = 0;
c010394a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010394d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
static void
default_free_pages(struct Page *base, size_t n) {
		assert(n > 0);
	    assert(PageReserved(base));
	    struct Page *p = base;
	    for (; p != base + n; p ++) {
c0103954:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103958:	8b 45 0c             	mov    0xc(%ebp),%eax
c010395b:	c1 e0 05             	shl    $0x5,%eax
c010395e:	89 c2                	mov    %eax,%edx
c0103960:	8b 45 08             	mov    0x8(%ebp),%eax
c0103963:	01 d0                	add    %edx,%eax
c0103965:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103968:	75 aa                	jne    c0103914 <default_free_pages+0x88>
	    	p->flags = 0;
	        set_page_ref(p, 0);
	        SetPageProperty(p);
	        p->property = 0;
	    }
	    base->property = n;
c010396a:	8b 45 08             	mov    0x8(%ebp),%eax
c010396d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103970:	89 50 08             	mov    %edx,0x8(%eax)
	    list_entry_t *le = &free_list;
c0103973:	c7 45 f0 14 30 15 c0 	movl   $0xc0153014,-0x10(%ebp)
	    while((le = list_next(le)) != &free_list){
c010397a:	eb 13                	jmp    c010398f <default_free_pages+0x103>
	    	p = le2page(le, page_link);
c010397c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010397f:	83 e8 0c             	sub    $0xc,%eax
c0103982:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    	if(p > base){
c0103985:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103988:	3b 45 08             	cmp    0x8(%ebp),%eax
c010398b:	76 02                	jbe    c010398f <default_free_pages+0x103>
	    		break;
c010398d:	eb 18                	jmp    c01039a7 <default_free_pages+0x11b>
c010398f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103992:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103995:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103998:	8b 40 04             	mov    0x4(%eax),%eax
	        SetPageProperty(p);
	        p->property = 0;
	    }
	    base->property = n;
	    list_entry_t *le = &free_list;
	    while((le = list_next(le)) != &free_list){
c010399b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010399e:	81 7d f0 14 30 15 c0 	cmpl   $0xc0153014,-0x10(%ebp)
c01039a5:	75 d5                	jne    c010397c <default_free_pages+0xf0>
	    	if(p > base){
	    		break;
	    	}
	    }
	    int i;
	    for(i = 0; i < n; i++){
c01039a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01039ae:	eb 55                	jmp    c0103a05 <default_free_pages+0x179>
	       	list_add_before(le, &((base+i)->page_link));
c01039b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039b3:	c1 e0 05             	shl    $0x5,%eax
c01039b6:	89 c2                	mov    %eax,%edx
c01039b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039bb:	01 d0                	add    %edx,%eax
c01039bd:	8d 50 0c             	lea    0xc(%eax),%edx
c01039c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039c6:	89 55 cc             	mov    %edx,-0x34(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01039c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039cc:	8b 00                	mov    (%eax),%eax
c01039ce:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039d1:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01039d4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01039d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039da:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01039e0:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01039e3:	89 10                	mov    %edx,(%eax)
c01039e5:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01039e8:	8b 10                	mov    (%eax),%edx
c01039ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01039ed:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039f0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01039f3:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01039f6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01039fc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01039ff:	89 10                	mov    %edx,(%eax)
	    	if(p > base){
	    		break;
	    	}
	    }
	    int i;
	    for(i = 0; i < n; i++){
c0103a01:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0103a05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a08:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103a0b:	72 a3                	jb     c01039b0 <default_free_pages+0x124>
	       	list_add_before(le, &((base+i)->page_link));
	    }
	    if(base + n == p && le != &free_list){
c0103a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a10:	c1 e0 05             	shl    $0x5,%eax
c0103a13:	89 c2                	mov    %eax,%edx
c0103a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a18:	01 d0                	add    %edx,%eax
c0103a1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a1d:	75 27                	jne    c0103a46 <default_free_pages+0x1ba>
c0103a1f:	81 7d f0 14 30 15 c0 	cmpl   $0xc0153014,-0x10(%ebp)
c0103a26:	74 1e                	je     c0103a46 <default_free_pages+0x1ba>
	    	base->property += p->property;
c0103a28:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a2b:	8b 50 08             	mov    0x8(%eax),%edx
c0103a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a31:	8b 40 08             	mov    0x8(%eax),%eax
c0103a34:	01 c2                	add    %eax,%edx
c0103a36:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a39:	89 50 08             	mov    %edx,0x8(%eax)
	    	p->property = 0;
c0103a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a3f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	    }
	    le = &(base->page_link);
c0103a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a49:	83 c0 0c             	add    $0xc,%eax
c0103a4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    while((le = list_prev(le))!= &free_list){
c0103a4f:	eb 4a                	jmp    c0103a9b <default_free_pages+0x20f>
	    	p = le2page(le, page_link);
c0103a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a54:	83 e8 0c             	sub    $0xc,%eax
c0103a57:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    	if(p->property){
c0103a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a5d:	8b 40 08             	mov    0x8(%eax),%eax
c0103a60:	85 c0                	test   %eax,%eax
c0103a62:	74 37                	je     c0103a9b <default_free_pages+0x20f>
	    		if(p + p->property == base){
c0103a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a67:	8b 40 08             	mov    0x8(%eax),%eax
c0103a6a:	c1 e0 05             	shl    $0x5,%eax
c0103a6d:	89 c2                	mov    %eax,%edx
c0103a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a72:	01 d0                	add    %edx,%eax
c0103a74:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103a77:	75 20                	jne    c0103a99 <default_free_pages+0x20d>
	    			p->property += base->property;
c0103a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a7c:	8b 50 08             	mov    0x8(%eax),%edx
c0103a7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a82:	8b 40 08             	mov    0x8(%eax),%eax
c0103a85:	01 c2                	add    %eax,%edx
c0103a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a8a:	89 50 08             	mov    %edx,0x8(%eax)
	    			base->property = 0;
c0103a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a90:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	    		}
	    		break;
c0103a97:	eb 19                	jmp    c0103ab2 <default_free_pages+0x226>
c0103a99:	eb 17                	jmp    c0103ab2 <default_free_pages+0x226>
c0103a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a9e:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103aa1:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103aa4:	8b 00                	mov    (%eax),%eax
	    if(base + n == p && le != &free_list){
	    	base->property += p->property;
	    	p->property = 0;
	    }
	    le = &(base->page_link);
	    while((le = list_prev(le))!= &free_list){
c0103aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103aa9:	81 7d f0 14 30 15 c0 	cmpl   $0xc0153014,-0x10(%ebp)
c0103ab0:	75 9f                	jne    c0103a51 <default_free_pages+0x1c5>
	    			base->property = 0;
	    		}
	    		break;
	    	}
	    }
	    nr_free += n;
c0103ab2:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c0103ab8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103abb:	01 d0                	add    %edx,%eax
c0103abd:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
}
c0103ac2:	c9                   	leave  
c0103ac3:	c3                   	ret    

c0103ac4 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103ac4:	55                   	push   %ebp
c0103ac5:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103ac7:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
}
c0103acc:	5d                   	pop    %ebp
c0103acd:	c3                   	ret    

c0103ace <basic_check>:

static void
basic_check(void) {
c0103ace:	55                   	push   %ebp
c0103acf:	89 e5                	mov    %esp,%ebp
c0103ad1:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103ad4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ade:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103ae7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103aee:	e8 dc 15 00 00       	call   c01050cf <alloc_pages>
c0103af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103af6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103afa:	75 24                	jne    c0103b20 <basic_check+0x52>
c0103afc:	c7 44 24 0c 24 5f 11 	movl   $0xc0115f24,0xc(%esp)
c0103b03:	c0 
c0103b04:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103b0b:	c0 
c0103b0c:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
c0103b13:	00 
c0103b14:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103b1b:	e8 a8 d3 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b20:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b27:	e8 a3 15 00 00       	call   c01050cf <alloc_pages>
c0103b2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b33:	75 24                	jne    c0103b59 <basic_check+0x8b>
c0103b35:	c7 44 24 0c 40 5f 11 	movl   $0xc0115f40,0xc(%esp)
c0103b3c:	c0 
c0103b3d:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103b44:	c0 
c0103b45:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
c0103b4c:	00 
c0103b4d:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103b54:	e8 6f d3 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103b59:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b60:	e8 6a 15 00 00       	call   c01050cf <alloc_pages>
c0103b65:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103b68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103b6c:	75 24                	jne    c0103b92 <basic_check+0xc4>
c0103b6e:	c7 44 24 0c 5c 5f 11 	movl   $0xc0115f5c,0xc(%esp)
c0103b75:	c0 
c0103b76:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103b7d:	c0 
c0103b7e:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
c0103b85:	00 
c0103b86:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103b8d:	e8 36 d3 ff ff       	call   c0100ec8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103b92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b95:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103b98:	74 10                	je     c0103baa <basic_check+0xdc>
c0103b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b9d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ba0:	74 08                	je     c0103baa <basic_check+0xdc>
c0103ba2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ba5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ba8:	75 24                	jne    c0103bce <basic_check+0x100>
c0103baa:	c7 44 24 0c 78 5f 11 	movl   $0xc0115f78,0xc(%esp)
c0103bb1:	c0 
c0103bb2:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103bb9:	c0 
c0103bba:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0103bc1:	00 
c0103bc2:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103bc9:	e8 fa d2 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103bce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bd1:	89 04 24             	mov    %eax,(%esp)
c0103bd4:	e8 ec f9 ff ff       	call   c01035c5 <page_ref>
c0103bd9:	85 c0                	test   %eax,%eax
c0103bdb:	75 1e                	jne    c0103bfb <basic_check+0x12d>
c0103bdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103be0:	89 04 24             	mov    %eax,(%esp)
c0103be3:	e8 dd f9 ff ff       	call   c01035c5 <page_ref>
c0103be8:	85 c0                	test   %eax,%eax
c0103bea:	75 0f                	jne    c0103bfb <basic_check+0x12d>
c0103bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bef:	89 04 24             	mov    %eax,(%esp)
c0103bf2:	e8 ce f9 ff ff       	call   c01035c5 <page_ref>
c0103bf7:	85 c0                	test   %eax,%eax
c0103bf9:	74 24                	je     c0103c1f <basic_check+0x151>
c0103bfb:	c7 44 24 0c 9c 5f 11 	movl   $0xc0115f9c,0xc(%esp)
c0103c02:	c0 
c0103c03:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103c0a:	c0 
c0103c0b:	c7 44 24 04 a9 00 00 	movl   $0xa9,0x4(%esp)
c0103c12:	00 
c0103c13:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103c1a:	e8 a9 d2 ff ff       	call   c0100ec8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c22:	89 04 24             	mov    %eax,(%esp)
c0103c25:	e8 85 f9 ff ff       	call   c01035af <page2pa>
c0103c2a:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103c30:	c1 e2 0c             	shl    $0xc,%edx
c0103c33:	39 d0                	cmp    %edx,%eax
c0103c35:	72 24                	jb     c0103c5b <basic_check+0x18d>
c0103c37:	c7 44 24 0c d8 5f 11 	movl   $0xc0115fd8,0xc(%esp)
c0103c3e:	c0 
c0103c3f:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103c46:	c0 
c0103c47:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
c0103c4e:	00 
c0103c4f:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103c56:	e8 6d d2 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c5e:	89 04 24             	mov    %eax,(%esp)
c0103c61:	e8 49 f9 ff ff       	call   c01035af <page2pa>
c0103c66:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103c6c:	c1 e2 0c             	shl    $0xc,%edx
c0103c6f:	39 d0                	cmp    %edx,%eax
c0103c71:	72 24                	jb     c0103c97 <basic_check+0x1c9>
c0103c73:	c7 44 24 0c f5 5f 11 	movl   $0xc0115ff5,0xc(%esp)
c0103c7a:	c0 
c0103c7b:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103c82:	c0 
c0103c83:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
c0103c8a:	00 
c0103c8b:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103c92:	e8 31 d2 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103c97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c9a:	89 04 24             	mov    %eax,(%esp)
c0103c9d:	e8 0d f9 ff ff       	call   c01035af <page2pa>
c0103ca2:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103ca8:	c1 e2 0c             	shl    $0xc,%edx
c0103cab:	39 d0                	cmp    %edx,%eax
c0103cad:	72 24                	jb     c0103cd3 <basic_check+0x205>
c0103caf:	c7 44 24 0c 12 60 11 	movl   $0xc0116012,0xc(%esp)
c0103cb6:	c0 
c0103cb7:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103cbe:	c0 
c0103cbf:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103cc6:	00 
c0103cc7:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103cce:	e8 f5 d1 ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0103cd3:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0103cd8:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0103cde:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103ce1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103ce4:	c7 45 e0 14 30 15 c0 	movl   $0xc0153014,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103ceb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103cee:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103cf1:	89 50 04             	mov    %edx,0x4(%eax)
c0103cf4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103cf7:	8b 50 04             	mov    0x4(%eax),%edx
c0103cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103cfd:	89 10                	mov    %edx,(%eax)
c0103cff:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d06:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d09:	8b 40 04             	mov    0x4(%eax),%eax
c0103d0c:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d0f:	0f 94 c0             	sete   %al
c0103d12:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d15:	85 c0                	test   %eax,%eax
c0103d17:	75 24                	jne    c0103d3d <basic_check+0x26f>
c0103d19:	c7 44 24 0c 2f 60 11 	movl   $0xc011602f,0xc(%esp)
c0103d20:	c0 
c0103d21:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103d28:	c0 
c0103d29:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103d30:	00 
c0103d31:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103d38:	e8 8b d1 ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0103d3d:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103d42:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103d45:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0103d4c:	00 00 00 

    assert(alloc_page() == NULL);
c0103d4f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d56:	e8 74 13 00 00       	call   c01050cf <alloc_pages>
c0103d5b:	85 c0                	test   %eax,%eax
c0103d5d:	74 24                	je     c0103d83 <basic_check+0x2b5>
c0103d5f:	c7 44 24 0c 46 60 11 	movl   $0xc0116046,0xc(%esp)
c0103d66:	c0 
c0103d67:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103d6e:	c0 
c0103d6f:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103d76:	00 
c0103d77:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103d7e:	e8 45 d1 ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103d83:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d8a:	00 
c0103d8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d8e:	89 04 24             	mov    %eax,(%esp)
c0103d91:	e8 a4 13 00 00       	call   c010513a <free_pages>
    free_page(p1);
c0103d96:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d9d:	00 
c0103d9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103da1:	89 04 24             	mov    %eax,(%esp)
c0103da4:	e8 91 13 00 00       	call   c010513a <free_pages>
    free_page(p2);
c0103da9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103db0:	00 
c0103db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103db4:	89 04 24             	mov    %eax,(%esp)
c0103db7:	e8 7e 13 00 00       	call   c010513a <free_pages>
    assert(nr_free == 3);
c0103dbc:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103dc1:	83 f8 03             	cmp    $0x3,%eax
c0103dc4:	74 24                	je     c0103dea <basic_check+0x31c>
c0103dc6:	c7 44 24 0c 5b 60 11 	movl   $0xc011605b,0xc(%esp)
c0103dcd:	c0 
c0103dce:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103dd5:	c0 
c0103dd6:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0103ddd:	00 
c0103dde:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103de5:	e8 de d0 ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103dea:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103df1:	e8 d9 12 00 00       	call   c01050cf <alloc_pages>
c0103df6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103df9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103dfd:	75 24                	jne    c0103e23 <basic_check+0x355>
c0103dff:	c7 44 24 0c 24 5f 11 	movl   $0xc0115f24,0xc(%esp)
c0103e06:	c0 
c0103e07:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103e0e:	c0 
c0103e0f:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0103e16:	00 
c0103e17:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103e1e:	e8 a5 d0 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e23:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e2a:	e8 a0 12 00 00       	call   c01050cf <alloc_pages>
c0103e2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e32:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e36:	75 24                	jne    c0103e5c <basic_check+0x38e>
c0103e38:	c7 44 24 0c 40 5f 11 	movl   $0xc0115f40,0xc(%esp)
c0103e3f:	c0 
c0103e40:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103e47:	c0 
c0103e48:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0103e4f:	00 
c0103e50:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103e57:	e8 6c d0 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103e5c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e63:	e8 67 12 00 00       	call   c01050cf <alloc_pages>
c0103e68:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e6f:	75 24                	jne    c0103e95 <basic_check+0x3c7>
c0103e71:	c7 44 24 0c 5c 5f 11 	movl   $0xc0115f5c,0xc(%esp)
c0103e78:	c0 
c0103e79:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103e80:	c0 
c0103e81:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103e88:	00 
c0103e89:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103e90:	e8 33 d0 ff ff       	call   c0100ec8 <__panic>

    assert(alloc_page() == NULL);
c0103e95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e9c:	e8 2e 12 00 00       	call   c01050cf <alloc_pages>
c0103ea1:	85 c0                	test   %eax,%eax
c0103ea3:	74 24                	je     c0103ec9 <basic_check+0x3fb>
c0103ea5:	c7 44 24 0c 46 60 11 	movl   $0xc0116046,0xc(%esp)
c0103eac:	c0 
c0103ead:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103eb4:	c0 
c0103eb5:	c7 44 24 04 c1 00 00 	movl   $0xc1,0x4(%esp)
c0103ebc:	00 
c0103ebd:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103ec4:	e8 ff cf ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103ec9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ed0:	00 
c0103ed1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ed4:	89 04 24             	mov    %eax,(%esp)
c0103ed7:	e8 5e 12 00 00       	call   c010513a <free_pages>
c0103edc:	c7 45 d8 14 30 15 c0 	movl   $0xc0153014,-0x28(%ebp)
c0103ee3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103ee6:	8b 40 04             	mov    0x4(%eax),%eax
c0103ee9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103eec:	0f 94 c0             	sete   %al
c0103eef:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103ef2:	85 c0                	test   %eax,%eax
c0103ef4:	74 24                	je     c0103f1a <basic_check+0x44c>
c0103ef6:	c7 44 24 0c 68 60 11 	movl   $0xc0116068,0xc(%esp)
c0103efd:	c0 
c0103efe:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103f05:	c0 
c0103f06:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103f0d:	00 
c0103f0e:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103f15:	e8 ae cf ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f1a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f21:	e8 a9 11 00 00       	call   c01050cf <alloc_pages>
c0103f26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f2c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f2f:	74 24                	je     c0103f55 <basic_check+0x487>
c0103f31:	c7 44 24 0c 80 60 11 	movl   $0xc0116080,0xc(%esp)
c0103f38:	c0 
c0103f39:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103f40:	c0 
c0103f41:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103f48:	00 
c0103f49:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103f50:	e8 73 cf ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0103f55:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f5c:	e8 6e 11 00 00       	call   c01050cf <alloc_pages>
c0103f61:	85 c0                	test   %eax,%eax
c0103f63:	74 24                	je     c0103f89 <basic_check+0x4bb>
c0103f65:	c7 44 24 0c 46 60 11 	movl   $0xc0116046,0xc(%esp)
c0103f6c:	c0 
c0103f6d:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103f74:	c0 
c0103f75:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103f7c:	00 
c0103f7d:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103f84:	e8 3f cf ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c0103f89:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103f8e:	85 c0                	test   %eax,%eax
c0103f90:	74 24                	je     c0103fb6 <basic_check+0x4e8>
c0103f92:	c7 44 24 0c 99 60 11 	movl   $0xc0116099,0xc(%esp)
c0103f99:	c0 
c0103f9a:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0103fa1:	c0 
c0103fa2:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103fa9:	00 
c0103faa:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0103fb1:	e8 12 cf ff ff       	call   c0100ec8 <__panic>
    free_list = free_list_store;
c0103fb6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103fb9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103fbc:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c0103fc1:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    nr_free = nr_free_store;
c0103fc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103fca:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_page(p);
c0103fcf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103fd6:	00 
c0103fd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103fda:	89 04 24             	mov    %eax,(%esp)
c0103fdd:	e8 58 11 00 00       	call   c010513a <free_pages>
    free_page(p1);
c0103fe2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103fe9:	00 
c0103fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fed:	89 04 24             	mov    %eax,(%esp)
c0103ff0:	e8 45 11 00 00       	call   c010513a <free_pages>
    free_page(p2);
c0103ff5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ffc:	00 
c0103ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104000:	89 04 24             	mov    %eax,(%esp)
c0104003:	e8 32 11 00 00       	call   c010513a <free_pages>
}
c0104008:	c9                   	leave  
c0104009:	c3                   	ret    

c010400a <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010400a:	55                   	push   %ebp
c010400b:	89 e5                	mov    %esp,%ebp
c010400d:	53                   	push   %ebx
c010400e:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104014:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010401b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104022:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104029:	eb 6b                	jmp    c0104096 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010402b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010402e:	83 e8 0c             	sub    $0xc,%eax
c0104031:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104034:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104037:	83 c0 04             	add    $0x4,%eax
c010403a:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0104041:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104044:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104047:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010404a:	0f a3 10             	bt     %edx,(%eax)
c010404d:	19 c0                	sbb    %eax,%eax
c010404f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0104052:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104056:	0f 95 c0             	setne  %al
c0104059:	0f b6 c0             	movzbl %al,%eax
c010405c:	85 c0                	test   %eax,%eax
c010405e:	75 24                	jne    c0104084 <default_check+0x7a>
c0104060:	c7 44 24 0c a6 60 11 	movl   $0xc01160a6,0xc(%esp)
c0104067:	c0 
c0104068:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c010406f:	c0 
c0104070:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0104077:	00 
c0104078:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c010407f:	e8 44 ce ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c0104084:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104088:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010408b:	8b 50 08             	mov    0x8(%eax),%edx
c010408e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104091:	01 d0                	add    %edx,%eax
c0104093:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104096:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104099:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010409c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010409f:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01040a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01040a5:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c01040ac:	0f 85 79 ff ff ff    	jne    c010402b <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01040b2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01040b5:	e8 b2 10 00 00       	call   c010516c <nr_free_pages>
c01040ba:	39 c3                	cmp    %eax,%ebx
c01040bc:	74 24                	je     c01040e2 <default_check+0xd8>
c01040be:	c7 44 24 0c b6 60 11 	movl   $0xc01160b6,0xc(%esp)
c01040c5:	c0 
c01040c6:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01040cd:	c0 
c01040ce:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
c01040d5:	00 
c01040d6:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c01040dd:	e8 e6 cd ff ff       	call   c0100ec8 <__panic>

    basic_check();
c01040e2:	e8 e7 f9 ff ff       	call   c0103ace <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01040e7:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c01040ee:	e8 dc 0f 00 00       	call   c01050cf <alloc_pages>
c01040f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c01040f6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01040fa:	75 24                	jne    c0104120 <default_check+0x116>
c01040fc:	c7 44 24 0c cf 60 11 	movl   $0xc01160cf,0xc(%esp)
c0104103:	c0 
c0104104:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c010410b:	c0 
c010410c:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c0104113:	00 
c0104114:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c010411b:	e8 a8 cd ff ff       	call   c0100ec8 <__panic>
    assert(!PageProperty(p0));
c0104120:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104123:	83 c0 04             	add    $0x4,%eax
c0104126:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010412d:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104130:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104133:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104136:	0f a3 10             	bt     %edx,(%eax)
c0104139:	19 c0                	sbb    %eax,%eax
c010413b:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010413e:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104142:	0f 95 c0             	setne  %al
c0104145:	0f b6 c0             	movzbl %al,%eax
c0104148:	85 c0                	test   %eax,%eax
c010414a:	74 24                	je     c0104170 <default_check+0x166>
c010414c:	c7 44 24 0c da 60 11 	movl   $0xc01160da,0xc(%esp)
c0104153:	c0 
c0104154:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c010415b:	c0 
c010415c:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0104163:	00 
c0104164:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c010416b:	e8 58 cd ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0104170:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0104175:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c010417b:	89 45 80             	mov    %eax,-0x80(%ebp)
c010417e:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0104181:	c7 45 b4 14 30 15 c0 	movl   $0xc0153014,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104188:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010418b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010418e:	89 50 04             	mov    %edx,0x4(%eax)
c0104191:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104194:	8b 50 04             	mov    0x4(%eax),%edx
c0104197:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010419a:	89 10                	mov    %edx,(%eax)
c010419c:	c7 45 b0 14 30 15 c0 	movl   $0xc0153014,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01041a3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01041a6:	8b 40 04             	mov    0x4(%eax),%eax
c01041a9:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01041ac:	0f 94 c0             	sete   %al
c01041af:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01041b2:	85 c0                	test   %eax,%eax
c01041b4:	75 24                	jne    c01041da <default_check+0x1d0>
c01041b6:	c7 44 24 0c 2f 60 11 	movl   $0xc011602f,0xc(%esp)
c01041bd:	c0 
c01041be:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01041c5:	c0 
c01041c6:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c01041cd:	00 
c01041ce:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c01041d5:	e8 ee cc ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c01041da:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01041e1:	e8 e9 0e 00 00       	call   c01050cf <alloc_pages>
c01041e6:	85 c0                	test   %eax,%eax
c01041e8:	74 24                	je     c010420e <default_check+0x204>
c01041ea:	c7 44 24 0c 46 60 11 	movl   $0xc0116046,0xc(%esp)
c01041f1:	c0 
c01041f2:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01041f9:	c0 
c01041fa:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0104201:	00 
c0104202:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104209:	e8 ba cc ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c010420e:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0104213:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104216:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c010421d:	00 00 00 

    free_pages(p0 + 2, 3);
c0104220:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104223:	83 c0 40             	add    $0x40,%eax
c0104226:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010422d:	00 
c010422e:	89 04 24             	mov    %eax,(%esp)
c0104231:	e8 04 0f 00 00       	call   c010513a <free_pages>
    assert(alloc_pages(4) == NULL);
c0104236:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010423d:	e8 8d 0e 00 00       	call   c01050cf <alloc_pages>
c0104242:	85 c0                	test   %eax,%eax
c0104244:	74 24                	je     c010426a <default_check+0x260>
c0104246:	c7 44 24 0c ec 60 11 	movl   $0xc01160ec,0xc(%esp)
c010424d:	c0 
c010424e:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104255:	c0 
c0104256:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010425d:	00 
c010425e:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104265:	e8 5e cc ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c010426a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010426d:	83 c0 40             	add    $0x40,%eax
c0104270:	83 c0 04             	add    $0x4,%eax
c0104273:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c010427a:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010427d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0104280:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0104283:	0f a3 10             	bt     %edx,(%eax)
c0104286:	19 c0                	sbb    %eax,%eax
c0104288:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c010428b:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c010428f:	0f 95 c0             	setne  %al
c0104292:	0f b6 c0             	movzbl %al,%eax
c0104295:	85 c0                	test   %eax,%eax
c0104297:	74 0e                	je     c01042a7 <default_check+0x29d>
c0104299:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010429c:	83 c0 40             	add    $0x40,%eax
c010429f:	8b 40 08             	mov    0x8(%eax),%eax
c01042a2:	83 f8 03             	cmp    $0x3,%eax
c01042a5:	74 24                	je     c01042cb <default_check+0x2c1>
c01042a7:	c7 44 24 0c 04 61 11 	movl   $0xc0116104,0xc(%esp)
c01042ae:	c0 
c01042af:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01042b6:	c0 
c01042b7:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c01042be:	00 
c01042bf:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c01042c6:	e8 fd cb ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01042cb:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01042d2:	e8 f8 0d 00 00       	call   c01050cf <alloc_pages>
c01042d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01042da:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01042de:	75 24                	jne    c0104304 <default_check+0x2fa>
c01042e0:	c7 44 24 0c 30 61 11 	movl   $0xc0116130,0xc(%esp)
c01042e7:	c0 
c01042e8:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01042ef:	c0 
c01042f0:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c01042f7:	00 
c01042f8:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c01042ff:	e8 c4 cb ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104304:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010430b:	e8 bf 0d 00 00       	call   c01050cf <alloc_pages>
c0104310:	85 c0                	test   %eax,%eax
c0104312:	74 24                	je     c0104338 <default_check+0x32e>
c0104314:	c7 44 24 0c 46 60 11 	movl   $0xc0116046,0xc(%esp)
c010431b:	c0 
c010431c:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104323:	c0 
c0104324:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010432b:	00 
c010432c:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104333:	e8 90 cb ff ff       	call   c0100ec8 <__panic>
    assert(p0 + 2 == p1);
c0104338:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010433b:	83 c0 40             	add    $0x40,%eax
c010433e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104341:	74 24                	je     c0104367 <default_check+0x35d>
c0104343:	c7 44 24 0c 4e 61 11 	movl   $0xc011614e,0xc(%esp)
c010434a:	c0 
c010434b:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104352:	c0 
c0104353:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c010435a:	00 
c010435b:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104362:	e8 61 cb ff ff       	call   c0100ec8 <__panic>

    p2 = p0 + 1;
c0104367:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010436a:	83 c0 20             	add    $0x20,%eax
c010436d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c0104370:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104377:	00 
c0104378:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010437b:	89 04 24             	mov    %eax,(%esp)
c010437e:	e8 b7 0d 00 00       	call   c010513a <free_pages>
    free_pages(p1, 3);
c0104383:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010438a:	00 
c010438b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010438e:	89 04 24             	mov    %eax,(%esp)
c0104391:	e8 a4 0d 00 00       	call   c010513a <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0104396:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104399:	83 c0 04             	add    $0x4,%eax
c010439c:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01043a3:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043a6:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01043a9:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01043ac:	0f a3 10             	bt     %edx,(%eax)
c01043af:	19 c0                	sbb    %eax,%eax
c01043b1:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01043b4:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01043b8:	0f 95 c0             	setne  %al
c01043bb:	0f b6 c0             	movzbl %al,%eax
c01043be:	85 c0                	test   %eax,%eax
c01043c0:	74 0b                	je     c01043cd <default_check+0x3c3>
c01043c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043c5:	8b 40 08             	mov    0x8(%eax),%eax
c01043c8:	83 f8 01             	cmp    $0x1,%eax
c01043cb:	74 24                	je     c01043f1 <default_check+0x3e7>
c01043cd:	c7 44 24 0c 5c 61 11 	movl   $0xc011615c,0xc(%esp)
c01043d4:	c0 
c01043d5:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01043dc:	c0 
c01043dd:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01043e4:	00 
c01043e5:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c01043ec:	e8 d7 ca ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c01043f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043f4:	83 c0 04             	add    $0x4,%eax
c01043f7:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c01043fe:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104401:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104404:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104407:	0f a3 10             	bt     %edx,(%eax)
c010440a:	19 c0                	sbb    %eax,%eax
c010440c:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010440f:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104413:	0f 95 c0             	setne  %al
c0104416:	0f b6 c0             	movzbl %al,%eax
c0104419:	85 c0                	test   %eax,%eax
c010441b:	74 0b                	je     c0104428 <default_check+0x41e>
c010441d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104420:	8b 40 08             	mov    0x8(%eax),%eax
c0104423:	83 f8 03             	cmp    $0x3,%eax
c0104426:	74 24                	je     c010444c <default_check+0x442>
c0104428:	c7 44 24 0c 84 61 11 	movl   $0xc0116184,0xc(%esp)
c010442f:	c0 
c0104430:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104437:	c0 
c0104438:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c010443f:	00 
c0104440:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104447:	e8 7c ca ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010444c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104453:	e8 77 0c 00 00       	call   c01050cf <alloc_pages>
c0104458:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010445b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010445e:	83 e8 20             	sub    $0x20,%eax
c0104461:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104464:	74 24                	je     c010448a <default_check+0x480>
c0104466:	c7 44 24 0c aa 61 11 	movl   $0xc01161aa,0xc(%esp)
c010446d:	c0 
c010446e:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104475:	c0 
c0104476:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010447d:	00 
c010447e:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104485:	e8 3e ca ff ff       	call   c0100ec8 <__panic>
    free_page(p0);
c010448a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104491:	00 
c0104492:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104495:	89 04 24             	mov    %eax,(%esp)
c0104498:	e8 9d 0c 00 00       	call   c010513a <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c010449d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01044a4:	e8 26 0c 00 00       	call   c01050cf <alloc_pages>
c01044a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044af:	83 c0 20             	add    $0x20,%eax
c01044b2:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044b5:	74 24                	je     c01044db <default_check+0x4d1>
c01044b7:	c7 44 24 0c c8 61 11 	movl   $0xc01161c8,0xc(%esp)
c01044be:	c0 
c01044bf:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c01044c6:	c0 
c01044c7:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c01044ce:	00 
c01044cf:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c01044d6:	e8 ed c9 ff ff       	call   c0100ec8 <__panic>

    free_pages(p0, 2);
c01044db:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01044e2:	00 
c01044e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044e6:	89 04 24             	mov    %eax,(%esp)
c01044e9:	e8 4c 0c 00 00       	call   c010513a <free_pages>
    free_page(p2);
c01044ee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044f5:	00 
c01044f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044f9:	89 04 24             	mov    %eax,(%esp)
c01044fc:	e8 39 0c 00 00       	call   c010513a <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104501:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104508:	e8 c2 0b 00 00       	call   c01050cf <alloc_pages>
c010450d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104510:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104514:	75 24                	jne    c010453a <default_check+0x530>
c0104516:	c7 44 24 0c e8 61 11 	movl   $0xc01161e8,0xc(%esp)
c010451d:	c0 
c010451e:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104525:	c0 
c0104526:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c010452d:	00 
c010452e:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104535:	e8 8e c9 ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c010453a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104541:	e8 89 0b 00 00       	call   c01050cf <alloc_pages>
c0104546:	85 c0                	test   %eax,%eax
c0104548:	74 24                	je     c010456e <default_check+0x564>
c010454a:	c7 44 24 0c 46 60 11 	movl   $0xc0116046,0xc(%esp)
c0104551:	c0 
c0104552:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104559:	c0 
c010455a:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c0104561:	00 
c0104562:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104569:	e8 5a c9 ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c010456e:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0104573:	85 c0                	test   %eax,%eax
c0104575:	74 24                	je     c010459b <default_check+0x591>
c0104577:	c7 44 24 0c 99 60 11 	movl   $0xc0116099,0xc(%esp)
c010457e:	c0 
c010457f:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104586:	c0 
c0104587:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c010458e:	00 
c010458f:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104596:	e8 2d c9 ff ff       	call   c0100ec8 <__panic>
    nr_free = nr_free_store;
c010459b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010459e:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_list = free_list_store;
c01045a3:	8b 45 80             	mov    -0x80(%ebp),%eax
c01045a6:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01045a9:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c01045ae:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    free_pages(p0, 5);
c01045b4:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01045bb:	00 
c01045bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045bf:	89 04 24             	mov    %eax,(%esp)
c01045c2:	e8 73 0b 00 00       	call   c010513a <free_pages>

    le = &free_list;
c01045c7:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01045ce:	eb 1d                	jmp    c01045ed <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c01045d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01045d3:	83 e8 0c             	sub    $0xc,%eax
c01045d6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c01045d9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01045dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01045e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01045e3:	8b 40 08             	mov    0x8(%eax),%eax
c01045e6:	29 c2                	sub    %eax,%edx
c01045e8:	89 d0                	mov    %edx,%eax
c01045ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01045ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01045f0:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01045f3:	8b 45 88             	mov    -0x78(%ebp),%eax
c01045f6:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01045f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01045fc:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c0104603:	75 cb                	jne    c01045d0 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104605:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104609:	74 24                	je     c010462f <default_check+0x625>
c010460b:	c7 44 24 0c 06 62 11 	movl   $0xc0116206,0xc(%esp)
c0104612:	c0 
c0104613:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c010461a:	c0 
c010461b:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c0104622:	00 
c0104623:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c010462a:	e8 99 c8 ff ff       	call   c0100ec8 <__panic>
    assert(total == 0);
c010462f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104633:	74 24                	je     c0104659 <default_check+0x64f>
c0104635:	c7 44 24 0c 11 62 11 	movl   $0xc0116211,0xc(%esp)
c010463c:	c0 
c010463d:	c7 44 24 08 d6 5e 11 	movl   $0xc0115ed6,0x8(%esp)
c0104644:	c0 
c0104645:	c7 44 24 04 11 01 00 	movl   $0x111,0x4(%esp)
c010464c:	00 
c010464d:	c7 04 24 eb 5e 11 c0 	movl   $0xc0115eeb,(%esp)
c0104654:	e8 6f c8 ff ff       	call   c0100ec8 <__panic>
}
c0104659:	81 c4 94 00 00 00    	add    $0x94,%esp
c010465f:	5b                   	pop    %ebx
c0104660:	5d                   	pop    %ebp
c0104661:	c3                   	ret    

c0104662 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104662:	55                   	push   %ebp
c0104663:	89 e5                	mov    %esp,%ebp
c0104665:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104668:	9c                   	pushf  
c0104669:	58                   	pop    %eax
c010466a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010466d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104670:	25 00 02 00 00       	and    $0x200,%eax
c0104675:	85 c0                	test   %eax,%eax
c0104677:	74 0c                	je     c0104685 <__intr_save+0x23>
        intr_disable();
c0104679:	e8 ac da ff ff       	call   c010212a <intr_disable>
        return 1;
c010467e:	b8 01 00 00 00       	mov    $0x1,%eax
c0104683:	eb 05                	jmp    c010468a <__intr_save+0x28>
    }
    return 0;
c0104685:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010468a:	c9                   	leave  
c010468b:	c3                   	ret    

c010468c <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010468c:	55                   	push   %ebp
c010468d:	89 e5                	mov    %esp,%ebp
c010468f:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104692:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104696:	74 05                	je     c010469d <__intr_restore+0x11>
        intr_enable();
c0104698:	e8 87 da ff ff       	call   c0102124 <intr_enable>
    }
}
c010469d:	c9                   	leave  
c010469e:	c3                   	ret    

c010469f <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010469f:	55                   	push   %ebp
c01046a0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01046a2:	8b 55 08             	mov    0x8(%ebp),%edx
c01046a5:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01046aa:	29 c2                	sub    %eax,%edx
c01046ac:	89 d0                	mov    %edx,%eax
c01046ae:	c1 f8 05             	sar    $0x5,%eax
}
c01046b1:	5d                   	pop    %ebp
c01046b2:	c3                   	ret    

c01046b3 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01046b3:	55                   	push   %ebp
c01046b4:	89 e5                	mov    %esp,%ebp
c01046b6:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01046bc:	89 04 24             	mov    %eax,(%esp)
c01046bf:	e8 db ff ff ff       	call   c010469f <page2ppn>
c01046c4:	c1 e0 0c             	shl    $0xc,%eax
}
c01046c7:	c9                   	leave  
c01046c8:	c3                   	ret    

c01046c9 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01046c9:	55                   	push   %ebp
c01046ca:	89 e5                	mov    %esp,%ebp
c01046cc:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01046cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01046d2:	c1 e8 0c             	shr    $0xc,%eax
c01046d5:	89 c2                	mov    %eax,%edx
c01046d7:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01046dc:	39 c2                	cmp    %eax,%edx
c01046de:	72 1c                	jb     c01046fc <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01046e0:	c7 44 24 08 4c 62 11 	movl   $0xc011624c,0x8(%esp)
c01046e7:	c0 
c01046e8:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01046ef:	00 
c01046f0:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01046f7:	e8 cc c7 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c01046fc:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104701:	8b 55 08             	mov    0x8(%ebp),%edx
c0104704:	c1 ea 0c             	shr    $0xc,%edx
c0104707:	c1 e2 05             	shl    $0x5,%edx
c010470a:	01 d0                	add    %edx,%eax
}
c010470c:	c9                   	leave  
c010470d:	c3                   	ret    

c010470e <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010470e:	55                   	push   %ebp
c010470f:	89 e5                	mov    %esp,%ebp
c0104711:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104714:	8b 45 08             	mov    0x8(%ebp),%eax
c0104717:	89 04 24             	mov    %eax,(%esp)
c010471a:	e8 94 ff ff ff       	call   c01046b3 <page2pa>
c010471f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104725:	c1 e8 0c             	shr    $0xc,%eax
c0104728:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010472b:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104730:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104733:	72 23                	jb     c0104758 <page2kva+0x4a>
c0104735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104738:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010473c:	c7 44 24 08 7c 62 11 	movl   $0xc011627c,0x8(%esp)
c0104743:	c0 
c0104744:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010474b:	00 
c010474c:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104753:	e8 70 c7 ff ff       	call   c0100ec8 <__panic>
c0104758:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010475b:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104760:	c9                   	leave  
c0104761:	c3                   	ret    

c0104762 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104762:	55                   	push   %ebp
c0104763:	89 e5                	mov    %esp,%ebp
c0104765:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0104768:	8b 45 08             	mov    0x8(%ebp),%eax
c010476b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010476e:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104775:	77 23                	ja     c010479a <kva2page+0x38>
c0104777:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010477a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010477e:	c7 44 24 08 a0 62 11 	movl   $0xc01162a0,0x8(%esp)
c0104785:	c0 
c0104786:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010478d:	00 
c010478e:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104795:	e8 2e c7 ff ff       	call   c0100ec8 <__panic>
c010479a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010479d:	05 00 00 00 40       	add    $0x40000000,%eax
c01047a2:	89 04 24             	mov    %eax,(%esp)
c01047a5:	e8 1f ff ff ff       	call   c01046c9 <pa2page>
}
c01047aa:	c9                   	leave  
c01047ab:	c3                   	ret    

c01047ac <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01047ac:	55                   	push   %ebp
c01047ad:	89 e5                	mov    %esp,%ebp
c01047af:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c01047b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01047b5:	ba 01 00 00 00       	mov    $0x1,%edx
c01047ba:	89 c1                	mov    %eax,%ecx
c01047bc:	d3 e2                	shl    %cl,%edx
c01047be:	89 d0                	mov    %edx,%eax
c01047c0:	89 04 24             	mov    %eax,(%esp)
c01047c3:	e8 07 09 00 00       	call   c01050cf <alloc_pages>
c01047c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c01047cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047cf:	75 07                	jne    c01047d8 <__slob_get_free_pages+0x2c>
    return NULL;
c01047d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01047d6:	eb 0b                	jmp    c01047e3 <__slob_get_free_pages+0x37>
  return page2kva(page);
c01047d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047db:	89 04 24             	mov    %eax,(%esp)
c01047de:	e8 2b ff ff ff       	call   c010470e <page2kva>
}
c01047e3:	c9                   	leave  
c01047e4:	c3                   	ret    

c01047e5 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c01047e5:	55                   	push   %ebp
c01047e6:	89 e5                	mov    %esp,%ebp
c01047e8:	53                   	push   %ebx
c01047e9:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c01047ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01047ef:	ba 01 00 00 00       	mov    $0x1,%edx
c01047f4:	89 c1                	mov    %eax,%ecx
c01047f6:	d3 e2                	shl    %cl,%edx
c01047f8:	89 d0                	mov    %edx,%eax
c01047fa:	89 c3                	mov    %eax,%ebx
c01047fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01047ff:	89 04 24             	mov    %eax,(%esp)
c0104802:	e8 5b ff ff ff       	call   c0104762 <kva2page>
c0104807:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010480b:	89 04 24             	mov    %eax,(%esp)
c010480e:	e8 27 09 00 00       	call   c010513a <free_pages>
}
c0104813:	83 c4 14             	add    $0x14,%esp
c0104816:	5b                   	pop    %ebx
c0104817:	5d                   	pop    %ebp
c0104818:	c3                   	ret    

c0104819 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104819:	55                   	push   %ebp
c010481a:	89 e5                	mov    %esp,%ebp
c010481c:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010481f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104822:	83 c0 08             	add    $0x8,%eax
c0104825:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010482a:	76 24                	jbe    c0104850 <slob_alloc+0x37>
c010482c:	c7 44 24 0c c4 62 11 	movl   $0xc01162c4,0xc(%esp)
c0104833:	c0 
c0104834:	c7 44 24 08 e3 62 11 	movl   $0xc01162e3,0x8(%esp)
c010483b:	c0 
c010483c:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104843:	00 
c0104844:	c7 04 24 f8 62 11 c0 	movl   $0xc01162f8,(%esp)
c010484b:	e8 78 c6 ff ff       	call   c0100ec8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104850:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104857:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010485e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104861:	83 c0 07             	add    $0x7,%eax
c0104864:	c1 e8 03             	shr    $0x3,%eax
c0104867:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c010486a:	e8 f3 fd ff ff       	call   c0104662 <__intr_save>
c010486f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104872:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104877:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010487a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010487d:	8b 40 04             	mov    0x4(%eax),%eax
c0104880:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104883:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104887:	74 25                	je     c01048ae <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104889:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010488c:	8b 45 10             	mov    0x10(%ebp),%eax
c010488f:	01 d0                	add    %edx,%eax
c0104891:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104894:	8b 45 10             	mov    0x10(%ebp),%eax
c0104897:	f7 d8                	neg    %eax
c0104899:	21 d0                	and    %edx,%eax
c010489b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c010489e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01048a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048a4:	29 c2                	sub    %eax,%edx
c01048a6:	89 d0                	mov    %edx,%eax
c01048a8:	c1 f8 03             	sar    $0x3,%eax
c01048ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01048ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048b1:	8b 00                	mov    (%eax),%eax
c01048b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01048b6:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01048b9:	01 ca                	add    %ecx,%edx
c01048bb:	39 d0                	cmp    %edx,%eax
c01048bd:	0f 8c aa 00 00 00    	jl     c010496d <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c01048c3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01048c7:	74 38                	je     c0104901 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c01048c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048cc:	8b 00                	mov    (%eax),%eax
c01048ce:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01048d1:	89 c2                	mov    %eax,%edx
c01048d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01048d6:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c01048d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048db:	8b 50 04             	mov    0x4(%eax),%edx
c01048de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01048e1:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c01048e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01048ea:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c01048ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048f0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01048f3:	89 10                	mov    %edx,(%eax)
				prev = cur;
c01048f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c01048fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01048fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104901:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104904:	8b 00                	mov    (%eax),%eax
c0104906:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104909:	75 0e                	jne    c0104919 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010490b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010490e:	8b 50 04             	mov    0x4(%eax),%edx
c0104911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104914:	89 50 04             	mov    %edx,0x4(%eax)
c0104917:	eb 3c                	jmp    c0104955 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104919:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010491c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104923:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104926:	01 c2                	add    %eax,%edx
c0104928:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010492b:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c010492e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104931:	8b 40 04             	mov    0x4(%eax),%eax
c0104934:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104937:	8b 12                	mov    (%edx),%edx
c0104939:	2b 55 e0             	sub    -0x20(%ebp),%edx
c010493c:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c010493e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104941:	8b 40 04             	mov    0x4(%eax),%eax
c0104944:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104947:	8b 52 04             	mov    0x4(%edx),%edx
c010494a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c010494d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104950:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104953:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104958:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c010495d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104960:	89 04 24             	mov    %eax,(%esp)
c0104963:	e8 24 fd ff ff       	call   c010468c <__intr_restore>
			return cur;
c0104968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010496b:	eb 7f                	jmp    c01049ec <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c010496d:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104972:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104975:	75 61                	jne    c01049d8 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104977:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010497a:	89 04 24             	mov    %eax,(%esp)
c010497d:	e8 0a fd ff ff       	call   c010468c <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104982:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104989:	75 07                	jne    c0104992 <slob_alloc+0x179>
				return 0;
c010498b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104990:	eb 5a                	jmp    c01049ec <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104992:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104999:	00 
c010499a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010499d:	89 04 24             	mov    %eax,(%esp)
c01049a0:	e8 07 fe ff ff       	call   c01047ac <__slob_get_free_pages>
c01049a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01049a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01049ac:	75 07                	jne    c01049b5 <slob_alloc+0x19c>
				return 0;
c01049ae:	b8 00 00 00 00       	mov    $0x0,%eax
c01049b3:	eb 37                	jmp    c01049ec <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c01049b5:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01049bc:	00 
c01049bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049c0:	89 04 24             	mov    %eax,(%esp)
c01049c3:	e8 26 00 00 00       	call   c01049ee <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c01049c8:	e8 95 fc ff ff       	call   c0104662 <__intr_save>
c01049cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c01049d0:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01049d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01049d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01049de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049e1:	8b 40 04             	mov    0x4(%eax),%eax
c01049e4:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c01049e7:	e9 97 fe ff ff       	jmp    c0104883 <slob_alloc+0x6a>
}
c01049ec:	c9                   	leave  
c01049ed:	c3                   	ret    

c01049ee <slob_free>:

static void slob_free(void *block, int size)
{
c01049ee:	55                   	push   %ebp
c01049ef:	89 e5                	mov    %esp,%ebp
c01049f1:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c01049f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01049f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01049fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01049fe:	75 05                	jne    c0104a05 <slob_free+0x17>
		return;
c0104a00:	e9 ff 00 00 00       	jmp    c0104b04 <slob_free+0x116>

	if (size)
c0104a05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a09:	74 10                	je     c0104a1b <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a0e:	83 c0 07             	add    $0x7,%eax
c0104a11:	c1 e8 03             	shr    $0x3,%eax
c0104a14:	89 c2                	mov    %eax,%edx
c0104a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a19:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a1b:	e8 42 fc ff ff       	call   c0104662 <__intr_save>
c0104a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a23:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104a28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a2b:	eb 27                	jmp    c0104a54 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a30:	8b 40 04             	mov    0x4(%eax),%eax
c0104a33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a36:	77 13                	ja     c0104a4b <slob_free+0x5d>
c0104a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a3e:	77 27                	ja     c0104a67 <slob_free+0x79>
c0104a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a43:	8b 40 04             	mov    0x4(%eax),%eax
c0104a46:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a49:	77 1c                	ja     c0104a67 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a4e:	8b 40 04             	mov    0x4(%eax),%eax
c0104a51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a5a:	76 d1                	jbe    c0104a2d <slob_free+0x3f>
c0104a5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a5f:	8b 40 04             	mov    0x4(%eax),%eax
c0104a62:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a65:	76 c6                	jbe    c0104a2d <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104a67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a6a:	8b 00                	mov    (%eax),%eax
c0104a6c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a76:	01 c2                	add    %eax,%edx
c0104a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a7b:	8b 40 04             	mov    0x4(%eax),%eax
c0104a7e:	39 c2                	cmp    %eax,%edx
c0104a80:	75 25                	jne    c0104aa7 <slob_free+0xb9>
		b->units += cur->next->units;
c0104a82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a85:	8b 10                	mov    (%eax),%edx
c0104a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a8a:	8b 40 04             	mov    0x4(%eax),%eax
c0104a8d:	8b 00                	mov    (%eax),%eax
c0104a8f:	01 c2                	add    %eax,%edx
c0104a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a94:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a99:	8b 40 04             	mov    0x4(%eax),%eax
c0104a9c:	8b 50 04             	mov    0x4(%eax),%edx
c0104a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa2:	89 50 04             	mov    %edx,0x4(%eax)
c0104aa5:	eb 0c                	jmp    c0104ab3 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aaa:	8b 50 04             	mov    0x4(%eax),%edx
c0104aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ab0:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab6:	8b 00                	mov    (%eax),%eax
c0104ab8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac2:	01 d0                	add    %edx,%eax
c0104ac4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ac7:	75 1f                	jne    c0104ae8 <slob_free+0xfa>
		cur->units += b->units;
c0104ac9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104acc:	8b 10                	mov    (%eax),%edx
c0104ace:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ad1:	8b 00                	mov    (%eax),%eax
c0104ad3:	01 c2                	add    %eax,%edx
c0104ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad8:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104ada:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104add:	8b 50 04             	mov    0x4(%eax),%edx
c0104ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae3:	89 50 04             	mov    %edx,0x4(%eax)
c0104ae6:	eb 09                	jmp    c0104af1 <slob_free+0x103>
	} else
		cur->next = b;
c0104ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104aee:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af4:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104af9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104afc:	89 04 24             	mov    %eax,(%esp)
c0104aff:	e8 88 fb ff ff       	call   c010468c <__intr_restore>
}
c0104b04:	c9                   	leave  
c0104b05:	c3                   	ret    

c0104b06 <slob_init>:



void
slob_init(void) {
c0104b06:	55                   	push   %ebp
c0104b07:	89 e5                	mov    %esp,%ebp
c0104b09:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b0c:	c7 04 24 0a 63 11 c0 	movl   $0xc011630a,(%esp)
c0104b13:	e8 4d b8 ff ff       	call   c0100365 <cprintf>
}
c0104b18:	c9                   	leave  
c0104b19:	c3                   	ret    

c0104b1a <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b1a:	55                   	push   %ebp
c0104b1b:	89 e5                	mov    %esp,%ebp
c0104b1d:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104b20:	e8 e1 ff ff ff       	call   c0104b06 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104b25:	c7 04 24 1e 63 11 c0 	movl   $0xc011631e,(%esp)
c0104b2c:	e8 34 b8 ff ff       	call   c0100365 <cprintf>
}
c0104b31:	c9                   	leave  
c0104b32:	c3                   	ret    

c0104b33 <slob_allocated>:

size_t
slob_allocated(void) {
c0104b33:	55                   	push   %ebp
c0104b34:	89 e5                	mov    %esp,%ebp
  return 0;
c0104b36:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b3b:	5d                   	pop    %ebp
c0104b3c:	c3                   	ret    

c0104b3d <kallocated>:

size_t
kallocated(void) {
c0104b3d:	55                   	push   %ebp
c0104b3e:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104b40:	e8 ee ff ff ff       	call   c0104b33 <slob_allocated>
}
c0104b45:	5d                   	pop    %ebp
c0104b46:	c3                   	ret    

c0104b47 <find_order>:

static int find_order(int size)
{
c0104b47:	55                   	push   %ebp
c0104b48:	89 e5                	mov    %esp,%ebp
c0104b4a:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104b4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104b54:	eb 07                	jmp    c0104b5d <find_order+0x16>
		order++;
c0104b56:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104b5a:	d1 7d 08             	sarl   0x8(%ebp)
c0104b5d:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104b64:	7f f0                	jg     c0104b56 <find_order+0xf>
		order++;
	return order;
c0104b66:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104b69:	c9                   	leave  
c0104b6a:	c3                   	ret    

c0104b6b <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104b6b:	55                   	push   %ebp
c0104b6c:	89 e5                	mov    %esp,%ebp
c0104b6e:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104b71:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104b78:	77 38                	ja     c0104bb2 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104b7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b7d:	8d 50 08             	lea    0x8(%eax),%edx
c0104b80:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b87:	00 
c0104b88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b8f:	89 14 24             	mov    %edx,(%esp)
c0104b92:	e8 82 fc ff ff       	call   c0104819 <slob_alloc>
c0104b97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104b9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b9e:	74 08                	je     c0104ba8 <__kmalloc+0x3d>
c0104ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ba3:	83 c0 08             	add    $0x8,%eax
c0104ba6:	eb 05                	jmp    c0104bad <__kmalloc+0x42>
c0104ba8:	b8 00 00 00 00       	mov    $0x0,%eax
c0104bad:	e9 a6 00 00 00       	jmp    c0104c58 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104bb2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104bb9:	00 
c0104bba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104bbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bc1:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104bc8:	e8 4c fc ff ff       	call   c0104819 <slob_alloc>
c0104bcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104bd0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104bd4:	75 07                	jne    c0104bdd <__kmalloc+0x72>
		return 0;
c0104bd6:	b8 00 00 00 00       	mov    $0x0,%eax
c0104bdb:	eb 7b                	jmp    c0104c58 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104bdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104be0:	89 04 24             	mov    %eax,(%esp)
c0104be3:	e8 5f ff ff ff       	call   c0104b47 <find_order>
c0104be8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104beb:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104bed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bf0:	8b 00                	mov    (%eax),%eax
c0104bf2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104bf9:	89 04 24             	mov    %eax,(%esp)
c0104bfc:	e8 ab fb ff ff       	call   c01047ac <__slob_get_free_pages>
c0104c01:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c04:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c0a:	8b 40 04             	mov    0x4(%eax),%eax
c0104c0d:	85 c0                	test   %eax,%eax
c0104c0f:	74 2f                	je     c0104c40 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c11:	e8 4c fa ff ff       	call   c0104662 <__intr_save>
c0104c16:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c19:	8b 15 64 fe 14 c0    	mov    0xc014fe64,%edx
c0104c1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c22:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104c25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c28:	a3 64 fe 14 c0       	mov    %eax,0xc014fe64
		spin_unlock_irqrestore(&block_lock, flags);
c0104c2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c30:	89 04 24             	mov    %eax,(%esp)
c0104c33:	e8 54 fa ff ff       	call   c010468c <__intr_restore>
		return bb->pages;
c0104c38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c3b:	8b 40 04             	mov    0x4(%eax),%eax
c0104c3e:	eb 18                	jmp    c0104c58 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104c40:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104c47:	00 
c0104c48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c4b:	89 04 24             	mov    %eax,(%esp)
c0104c4e:	e8 9b fd ff ff       	call   c01049ee <slob_free>
	return 0;
c0104c53:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104c58:	c9                   	leave  
c0104c59:	c3                   	ret    

c0104c5a <kmalloc>:

void *
kmalloc(size_t size)
{
c0104c5a:	55                   	push   %ebp
c0104c5b:	89 e5                	mov    %esp,%ebp
c0104c5d:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104c60:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104c67:	00 
c0104c68:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c6b:	89 04 24             	mov    %eax,(%esp)
c0104c6e:	e8 f8 fe ff ff       	call   c0104b6b <__kmalloc>
}
c0104c73:	c9                   	leave  
c0104c74:	c3                   	ret    

c0104c75 <kfree>:


void kfree(void *block)
{
c0104c75:	55                   	push   %ebp
c0104c76:	89 e5                	mov    %esp,%ebp
c0104c78:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104c7b:	c7 45 f0 64 fe 14 c0 	movl   $0xc014fe64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104c82:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104c86:	75 05                	jne    c0104c8d <kfree+0x18>
		return;
c0104c88:	e9 a2 00 00 00       	jmp    c0104d2f <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104c8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c90:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104c95:	85 c0                	test   %eax,%eax
c0104c97:	75 7f                	jne    c0104d18 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104c99:	e8 c4 f9 ff ff       	call   c0104662 <__intr_save>
c0104c9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104ca1:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104ca6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ca9:	eb 5c                	jmp    c0104d07 <kfree+0x92>
			if (bb->pages == block) {
c0104cab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cae:	8b 40 04             	mov    0x4(%eax),%eax
c0104cb1:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104cb4:	75 3f                	jne    c0104cf5 <kfree+0x80>
				*last = bb->next;
c0104cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cb9:	8b 50 08             	mov    0x8(%eax),%edx
c0104cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cbf:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104cc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cc4:	89 04 24             	mov    %eax,(%esp)
c0104cc7:	e8 c0 f9 ff ff       	call   c010468c <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ccf:	8b 10                	mov    (%eax),%edx
c0104cd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cd4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104cd8:	89 04 24             	mov    %eax,(%esp)
c0104cdb:	e8 05 fb ff ff       	call   c01047e5 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104ce0:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104ce7:	00 
c0104ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ceb:	89 04 24             	mov    %eax,(%esp)
c0104cee:	e8 fb fc ff ff       	call   c01049ee <slob_free>
				return;
c0104cf3:	eb 3a                	jmp    c0104d2f <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cf8:	83 c0 08             	add    $0x8,%eax
c0104cfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d01:	8b 40 08             	mov    0x8(%eax),%eax
c0104d04:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d0b:	75 9e                	jne    c0104cab <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d10:	89 04 24             	mov    %eax,(%esp)
c0104d13:	e8 74 f9 ff ff       	call   c010468c <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d18:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d1b:	83 e8 08             	sub    $0x8,%eax
c0104d1e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d25:	00 
c0104d26:	89 04 24             	mov    %eax,(%esp)
c0104d29:	e8 c0 fc ff ff       	call   c01049ee <slob_free>
	return;
c0104d2e:	90                   	nop
}
c0104d2f:	c9                   	leave  
c0104d30:	c3                   	ret    

c0104d31 <ksize>:


unsigned int ksize(const void *block)
{
c0104d31:	55                   	push   %ebp
c0104d32:	89 e5                	mov    %esp,%ebp
c0104d34:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104d37:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d3b:	75 07                	jne    c0104d44 <ksize+0x13>
		return 0;
c0104d3d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d42:	eb 6b                	jmp    c0104daf <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104d44:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d47:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104d4c:	85 c0                	test   %eax,%eax
c0104d4e:	75 54                	jne    c0104da4 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104d50:	e8 0d f9 ff ff       	call   c0104662 <__intr_save>
c0104d55:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104d58:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104d5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d60:	eb 31                	jmp    c0104d93 <ksize+0x62>
			if (bb->pages == block) {
c0104d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d65:	8b 40 04             	mov    0x4(%eax),%eax
c0104d68:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d6b:	75 1d                	jne    c0104d8a <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104d6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d70:	89 04 24             	mov    %eax,(%esp)
c0104d73:	e8 14 f9 ff ff       	call   c010468c <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104d78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d7b:	8b 00                	mov    (%eax),%eax
c0104d7d:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104d82:	89 c1                	mov    %eax,%ecx
c0104d84:	d3 e2                	shl    %cl,%edx
c0104d86:	89 d0                	mov    %edx,%eax
c0104d88:	eb 25                	jmp    c0104daf <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8d:	8b 40 08             	mov    0x8(%eax),%eax
c0104d90:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d97:	75 c9                	jne    c0104d62 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d9c:	89 04 24             	mov    %eax,(%esp)
c0104d9f:	e8 e8 f8 ff ff       	call   c010468c <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104da4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104da7:	83 e8 08             	sub    $0x8,%eax
c0104daa:	8b 00                	mov    (%eax),%eax
c0104dac:	c1 e0 03             	shl    $0x3,%eax
}
c0104daf:	c9                   	leave  
c0104db0:	c3                   	ret    

c0104db1 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104db1:	55                   	push   %ebp
c0104db2:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104db4:	8b 55 08             	mov    0x8(%ebp),%edx
c0104db7:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104dbc:	29 c2                	sub    %eax,%edx
c0104dbe:	89 d0                	mov    %edx,%eax
c0104dc0:	c1 f8 05             	sar    $0x5,%eax
}
c0104dc3:	5d                   	pop    %ebp
c0104dc4:	c3                   	ret    

c0104dc5 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104dc5:	55                   	push   %ebp
c0104dc6:	89 e5                	mov    %esp,%ebp
c0104dc8:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104dcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dce:	89 04 24             	mov    %eax,(%esp)
c0104dd1:	e8 db ff ff ff       	call   c0104db1 <page2ppn>
c0104dd6:	c1 e0 0c             	shl    $0xc,%eax
}
c0104dd9:	c9                   	leave  
c0104dda:	c3                   	ret    

c0104ddb <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104ddb:	55                   	push   %ebp
c0104ddc:	89 e5                	mov    %esp,%ebp
c0104dde:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104de1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104de4:	c1 e8 0c             	shr    $0xc,%eax
c0104de7:	89 c2                	mov    %eax,%edx
c0104de9:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104dee:	39 c2                	cmp    %eax,%edx
c0104df0:	72 1c                	jb     c0104e0e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104df2:	c7 44 24 08 3c 63 11 	movl   $0xc011633c,0x8(%esp)
c0104df9:	c0 
c0104dfa:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e01:	00 
c0104e02:	c7 04 24 5b 63 11 c0 	movl   $0xc011635b,(%esp)
c0104e09:	e8 ba c0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104e0e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104e13:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e16:	c1 ea 0c             	shr    $0xc,%edx
c0104e19:	c1 e2 05             	shl    $0x5,%edx
c0104e1c:	01 d0                	add    %edx,%eax
}
c0104e1e:	c9                   	leave  
c0104e1f:	c3                   	ret    

c0104e20 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104e20:	55                   	push   %ebp
c0104e21:	89 e5                	mov    %esp,%ebp
c0104e23:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104e26:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e29:	89 04 24             	mov    %eax,(%esp)
c0104e2c:	e8 94 ff ff ff       	call   c0104dc5 <page2pa>
c0104e31:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e37:	c1 e8 0c             	shr    $0xc,%eax
c0104e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e3d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104e42:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104e45:	72 23                	jb     c0104e6a <page2kva+0x4a>
c0104e47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e4a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104e4e:	c7 44 24 08 6c 63 11 	movl   $0xc011636c,0x8(%esp)
c0104e55:	c0 
c0104e56:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104e5d:	00 
c0104e5e:	c7 04 24 5b 63 11 c0 	movl   $0xc011635b,(%esp)
c0104e65:	e8 5e c0 ff ff       	call   c0100ec8 <__panic>
c0104e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e6d:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104e72:	c9                   	leave  
c0104e73:	c3                   	ret    

c0104e74 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104e74:	55                   	push   %ebp
c0104e75:	89 e5                	mov    %esp,%ebp
c0104e77:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104e7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e7d:	83 e0 01             	and    $0x1,%eax
c0104e80:	85 c0                	test   %eax,%eax
c0104e82:	75 1c                	jne    c0104ea0 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104e84:	c7 44 24 08 90 63 11 	movl   $0xc0116390,0x8(%esp)
c0104e8b:	c0 
c0104e8c:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104e93:	00 
c0104e94:	c7 04 24 5b 63 11 c0 	movl   $0xc011635b,(%esp)
c0104e9b:	e8 28 c0 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104ea8:	89 04 24             	mov    %eax,(%esp)
c0104eab:	e8 2b ff ff ff       	call   c0104ddb <pa2page>
}
c0104eb0:	c9                   	leave  
c0104eb1:	c3                   	ret    

c0104eb2 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104eb2:	55                   	push   %ebp
c0104eb3:	89 e5                	mov    %esp,%ebp
c0104eb5:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104eb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ebb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104ec0:	89 04 24             	mov    %eax,(%esp)
c0104ec3:	e8 13 ff ff ff       	call   c0104ddb <pa2page>
}
c0104ec8:	c9                   	leave  
c0104ec9:	c3                   	ret    

c0104eca <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104eca:	55                   	push   %ebp
c0104ecb:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed0:	8b 00                	mov    (%eax),%eax
}
c0104ed2:	5d                   	pop    %ebp
c0104ed3:	c3                   	ret    

c0104ed4 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104ed4:	55                   	push   %ebp
c0104ed5:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104ed7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eda:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104edd:	89 10                	mov    %edx,(%eax)
}
c0104edf:	5d                   	pop    %ebp
c0104ee0:	c3                   	ret    

c0104ee1 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104ee1:	55                   	push   %ebp
c0104ee2:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee7:	8b 00                	mov    (%eax),%eax
c0104ee9:	8d 50 01             	lea    0x1(%eax),%edx
c0104eec:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eef:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104ef1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef4:	8b 00                	mov    (%eax),%eax
}
c0104ef6:	5d                   	pop    %ebp
c0104ef7:	c3                   	ret    

c0104ef8 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104ef8:	55                   	push   %ebp
c0104ef9:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104efb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104efe:	8b 00                	mov    (%eax),%eax
c0104f00:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f03:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f06:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f0b:	8b 00                	mov    (%eax),%eax
}
c0104f0d:	5d                   	pop    %ebp
c0104f0e:	c3                   	ret    

c0104f0f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104f0f:	55                   	push   %ebp
c0104f10:	89 e5                	mov    %esp,%ebp
c0104f12:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104f15:	9c                   	pushf  
c0104f16:	58                   	pop    %eax
c0104f17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104f1d:	25 00 02 00 00       	and    $0x200,%eax
c0104f22:	85 c0                	test   %eax,%eax
c0104f24:	74 0c                	je     c0104f32 <__intr_save+0x23>
        intr_disable();
c0104f26:	e8 ff d1 ff ff       	call   c010212a <intr_disable>
        return 1;
c0104f2b:	b8 01 00 00 00       	mov    $0x1,%eax
c0104f30:	eb 05                	jmp    c0104f37 <__intr_save+0x28>
    }
    return 0;
c0104f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104f37:	c9                   	leave  
c0104f38:	c3                   	ret    

c0104f39 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104f39:	55                   	push   %ebp
c0104f3a:	89 e5                	mov    %esp,%ebp
c0104f3c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104f3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104f43:	74 05                	je     c0104f4a <__intr_restore+0x11>
        intr_enable();
c0104f45:	e8 da d1 ff ff       	call   c0102124 <intr_enable>
    }
}
c0104f4a:	c9                   	leave  
c0104f4b:	c3                   	ret    

c0104f4c <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104f4c:	55                   	push   %ebp
c0104f4d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104f4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f52:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104f55:	b8 23 00 00 00       	mov    $0x23,%eax
c0104f5a:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104f5c:	b8 23 00 00 00       	mov    $0x23,%eax
c0104f61:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104f63:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f68:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104f6a:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f6f:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104f71:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f76:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104f78:	ea 7f 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104f7f
}
c0104f7f:	5d                   	pop    %ebp
c0104f80:	c3                   	ret    

c0104f81 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104f81:	55                   	push   %ebp
c0104f82:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104f84:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f87:	a3 a4 fe 14 c0       	mov    %eax,0xc014fea4
}
c0104f8c:	5d                   	pop    %ebp
c0104f8d:	c3                   	ret    

c0104f8e <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104f8e:	55                   	push   %ebp
c0104f8f:	89 e5                	mov    %esp,%ebp
c0104f91:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104f94:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c0104f99:	89 04 24             	mov    %eax,(%esp)
c0104f9c:	e8 e0 ff ff ff       	call   c0104f81 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104fa1:	66 c7 05 a8 fe 14 c0 	movw   $0x10,0xc014fea8
c0104fa8:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104faa:	66 c7 05 48 ea 14 c0 	movw   $0x68,0xc014ea48
c0104fb1:	68 00 
c0104fb3:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c0104fb8:	66 a3 4a ea 14 c0    	mov    %ax,0xc014ea4a
c0104fbe:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c0104fc3:	c1 e8 10             	shr    $0x10,%eax
c0104fc6:	a2 4c ea 14 c0       	mov    %al,0xc014ea4c
c0104fcb:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0104fd2:	83 e0 f0             	and    $0xfffffff0,%eax
c0104fd5:	83 c8 09             	or     $0x9,%eax
c0104fd8:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0104fdd:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0104fe4:	83 e0 ef             	and    $0xffffffef,%eax
c0104fe7:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0104fec:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0104ff3:	83 e0 9f             	and    $0xffffff9f,%eax
c0104ff6:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0104ffb:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105002:	83 c8 80             	or     $0xffffff80,%eax
c0105005:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c010500a:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105011:	83 e0 f0             	and    $0xfffffff0,%eax
c0105014:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105019:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105020:	83 e0 ef             	and    $0xffffffef,%eax
c0105023:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105028:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c010502f:	83 e0 df             	and    $0xffffffdf,%eax
c0105032:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105037:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c010503e:	83 c8 40             	or     $0x40,%eax
c0105041:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105046:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c010504d:	83 e0 7f             	and    $0x7f,%eax
c0105050:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105055:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c010505a:	c1 e8 18             	shr    $0x18,%eax
c010505d:	a2 4f ea 14 c0       	mov    %al,0xc014ea4f

    // reload all segment registers
    lgdt(&gdt_pd);
c0105062:	c7 04 24 50 ea 14 c0 	movl   $0xc014ea50,(%esp)
c0105069:	e8 de fe ff ff       	call   c0104f4c <lgdt>
c010506e:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0105074:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0105078:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010507b:	c9                   	leave  
c010507c:	c3                   	ret    

c010507d <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010507d:	55                   	push   %ebp
c010507e:	89 e5                	mov    %esp,%ebp
c0105080:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0105083:	c7 05 20 30 15 c0 30 	movl   $0xc0116230,0xc0153020
c010508a:	62 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010508d:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105092:	8b 00                	mov    (%eax),%eax
c0105094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105098:	c7 04 24 bc 63 11 c0 	movl   $0xc01163bc,(%esp)
c010509f:	e8 c1 b2 ff ff       	call   c0100365 <cprintf>
    pmm_manager->init();
c01050a4:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01050a9:	8b 40 04             	mov    0x4(%eax),%eax
c01050ac:	ff d0                	call   *%eax
}
c01050ae:	c9                   	leave  
c01050af:	c3                   	ret    

c01050b0 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01050b0:	55                   	push   %ebp
c01050b1:	89 e5                	mov    %esp,%ebp
c01050b3:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c01050b6:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01050bb:	8b 40 08             	mov    0x8(%eax),%eax
c01050be:	8b 55 0c             	mov    0xc(%ebp),%edx
c01050c1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01050c5:	8b 55 08             	mov    0x8(%ebp),%edx
c01050c8:	89 14 24             	mov    %edx,(%esp)
c01050cb:	ff d0                	call   *%eax
}
c01050cd:	c9                   	leave  
c01050ce:	c3                   	ret    

c01050cf <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01050cf:	55                   	push   %ebp
c01050d0:	89 e5                	mov    %esp,%ebp
c01050d2:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c01050d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01050dc:	e8 2e fe ff ff       	call   c0104f0f <__intr_save>
c01050e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01050e4:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01050e9:	8b 40 0c             	mov    0xc(%eax),%eax
c01050ec:	8b 55 08             	mov    0x8(%ebp),%edx
c01050ef:	89 14 24             	mov    %edx,(%esp)
c01050f2:	ff d0                	call   *%eax
c01050f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01050f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050fa:	89 04 24             	mov    %eax,(%esp)
c01050fd:	e8 37 fe ff ff       	call   c0104f39 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105102:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105106:	75 2d                	jne    c0105135 <alloc_pages+0x66>
c0105108:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010510c:	77 27                	ja     c0105135 <alloc_pages+0x66>
c010510e:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0105113:	85 c0                	test   %eax,%eax
c0105115:	74 1e                	je     c0105135 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105117:	8b 55 08             	mov    0x8(%ebp),%edx
c010511a:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c010511f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105126:	00 
c0105127:	89 54 24 04          	mov    %edx,0x4(%esp)
c010512b:	89 04 24             	mov    %eax,(%esp)
c010512e:	e8 af 1d 00 00       	call   c0106ee2 <swap_out>
    }
c0105133:	eb a7                	jmp    c01050dc <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105135:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105138:	c9                   	leave  
c0105139:	c3                   	ret    

c010513a <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c010513a:	55                   	push   %ebp
c010513b:	89 e5                	mov    %esp,%ebp
c010513d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0105140:	e8 ca fd ff ff       	call   c0104f0f <__intr_save>
c0105145:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0105148:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010514d:	8b 40 10             	mov    0x10(%eax),%eax
c0105150:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105153:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105157:	8b 55 08             	mov    0x8(%ebp),%edx
c010515a:	89 14 24             	mov    %edx,(%esp)
c010515d:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010515f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105162:	89 04 24             	mov    %eax,(%esp)
c0105165:	e8 cf fd ff ff       	call   c0104f39 <__intr_restore>
}
c010516a:	c9                   	leave  
c010516b:	c3                   	ret    

c010516c <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010516c:	55                   	push   %ebp
c010516d:	89 e5                	mov    %esp,%ebp
c010516f:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0105172:	e8 98 fd ff ff       	call   c0104f0f <__intr_save>
c0105177:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010517a:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010517f:	8b 40 14             	mov    0x14(%eax),%eax
c0105182:	ff d0                	call   *%eax
c0105184:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0105187:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010518a:	89 04 24             	mov    %eax,(%esp)
c010518d:	e8 a7 fd ff ff       	call   c0104f39 <__intr_restore>
    return ret;
c0105192:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0105195:	c9                   	leave  
c0105196:	c3                   	ret    

c0105197 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0105197:	55                   	push   %ebp
c0105198:	89 e5                	mov    %esp,%ebp
c010519a:	57                   	push   %edi
c010519b:	56                   	push   %esi
c010519c:	53                   	push   %ebx
c010519d:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01051a3:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01051aa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01051b1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01051b8:	c7 04 24 d3 63 11 c0 	movl   $0xc01163d3,(%esp)
c01051bf:	e8 a1 b1 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01051c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01051cb:	e9 15 01 00 00       	jmp    c01052e5 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01051d0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051d3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051d6:	89 d0                	mov    %edx,%eax
c01051d8:	c1 e0 02             	shl    $0x2,%eax
c01051db:	01 d0                	add    %edx,%eax
c01051dd:	c1 e0 02             	shl    $0x2,%eax
c01051e0:	01 c8                	add    %ecx,%eax
c01051e2:	8b 50 08             	mov    0x8(%eax),%edx
c01051e5:	8b 40 04             	mov    0x4(%eax),%eax
c01051e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01051eb:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01051ee:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051f4:	89 d0                	mov    %edx,%eax
c01051f6:	c1 e0 02             	shl    $0x2,%eax
c01051f9:	01 d0                	add    %edx,%eax
c01051fb:	c1 e0 02             	shl    $0x2,%eax
c01051fe:	01 c8                	add    %ecx,%eax
c0105200:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105203:	8b 58 10             	mov    0x10(%eax),%ebx
c0105206:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105209:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010520c:	01 c8                	add    %ecx,%eax
c010520e:	11 da                	adc    %ebx,%edx
c0105210:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105213:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105216:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105219:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010521c:	89 d0                	mov    %edx,%eax
c010521e:	c1 e0 02             	shl    $0x2,%eax
c0105221:	01 d0                	add    %edx,%eax
c0105223:	c1 e0 02             	shl    $0x2,%eax
c0105226:	01 c8                	add    %ecx,%eax
c0105228:	83 c0 14             	add    $0x14,%eax
c010522b:	8b 00                	mov    (%eax),%eax
c010522d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105233:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105236:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105239:	83 c0 ff             	add    $0xffffffff,%eax
c010523c:	83 d2 ff             	adc    $0xffffffff,%edx
c010523f:	89 c6                	mov    %eax,%esi
c0105241:	89 d7                	mov    %edx,%edi
c0105243:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105246:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105249:	89 d0                	mov    %edx,%eax
c010524b:	c1 e0 02             	shl    $0x2,%eax
c010524e:	01 d0                	add    %edx,%eax
c0105250:	c1 e0 02             	shl    $0x2,%eax
c0105253:	01 c8                	add    %ecx,%eax
c0105255:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105258:	8b 58 10             	mov    0x10(%eax),%ebx
c010525b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0105261:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105265:	89 74 24 14          	mov    %esi,0x14(%esp)
c0105269:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010526d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105270:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105273:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105277:	89 54 24 10          	mov    %edx,0x10(%esp)
c010527b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010527f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105283:	c7 04 24 e0 63 11 c0 	movl   $0xc01163e0,(%esp)
c010528a:	e8 d6 b0 ff ff       	call   c0100365 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010528f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105292:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105295:	89 d0                	mov    %edx,%eax
c0105297:	c1 e0 02             	shl    $0x2,%eax
c010529a:	01 d0                	add    %edx,%eax
c010529c:	c1 e0 02             	shl    $0x2,%eax
c010529f:	01 c8                	add    %ecx,%eax
c01052a1:	83 c0 14             	add    $0x14,%eax
c01052a4:	8b 00                	mov    (%eax),%eax
c01052a6:	83 f8 01             	cmp    $0x1,%eax
c01052a9:	75 36                	jne    c01052e1 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01052ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01052ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01052b1:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01052b4:	77 2b                	ja     c01052e1 <page_init+0x14a>
c01052b6:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01052b9:	72 05                	jb     c01052c0 <page_init+0x129>
c01052bb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01052be:	73 21                	jae    c01052e1 <page_init+0x14a>
c01052c0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01052c4:	77 1b                	ja     c01052e1 <page_init+0x14a>
c01052c6:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01052ca:	72 09                	jb     c01052d5 <page_init+0x13e>
c01052cc:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01052d3:	77 0c                	ja     c01052e1 <page_init+0x14a>
                maxpa = end;
c01052d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01052d8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052db:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01052de:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01052e1:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01052e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01052e8:	8b 00                	mov    (%eax),%eax
c01052ea:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01052ed:	0f 8f dd fe ff ff    	jg     c01051d0 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01052f3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01052f7:	72 1d                	jb     c0105316 <page_init+0x17f>
c01052f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01052fd:	77 09                	ja     c0105308 <page_init+0x171>
c01052ff:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105306:	76 0e                	jbe    c0105316 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105308:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010530f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0105316:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105319:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010531c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105320:	c1 ea 0c             	shr    $0xc,%edx
c0105323:	a3 80 fe 14 c0       	mov    %eax,0xc014fe80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105328:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010532f:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0105334:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105337:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010533a:	01 d0                	add    %edx,%eax
c010533c:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010533f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105342:	ba 00 00 00 00       	mov    $0x0,%edx
c0105347:	f7 75 ac             	divl   -0x54(%ebp)
c010534a:	89 d0                	mov    %edx,%eax
c010534c:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010534f:	29 c2                	sub    %eax,%edx
c0105351:	89 d0                	mov    %edx,%eax
c0105353:	a3 28 30 15 c0       	mov    %eax,0xc0153028

    for (i = 0; i < npage; i ++) {
c0105358:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010535f:	eb 27                	jmp    c0105388 <page_init+0x1f1>
        SetPageReserved(pages + i);
c0105361:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0105366:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105369:	c1 e2 05             	shl    $0x5,%edx
c010536c:	01 d0                	add    %edx,%eax
c010536e:	83 c0 04             	add    $0x4,%eax
c0105371:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0105378:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010537b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010537e:	8b 55 90             	mov    -0x70(%ebp),%edx
c0105381:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0105384:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105388:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010538b:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105390:	39 c2                	cmp    %eax,%edx
c0105392:	72 cd                	jb     c0105361 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105394:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105399:	c1 e0 05             	shl    $0x5,%eax
c010539c:	89 c2                	mov    %eax,%edx
c010539e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01053a3:	01 d0                	add    %edx,%eax
c01053a5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01053a8:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01053af:	77 23                	ja     c01053d4 <page_init+0x23d>
c01053b1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01053b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01053b8:	c7 44 24 08 10 64 11 	movl   $0xc0116410,0x8(%esp)
c01053bf:	c0 
c01053c0:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01053c7:	00 
c01053c8:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01053cf:	e8 f4 ba ff ff       	call   c0100ec8 <__panic>
c01053d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01053d7:	05 00 00 00 40       	add    $0x40000000,%eax
c01053dc:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01053df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053e6:	e9 74 01 00 00       	jmp    c010555f <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01053eb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053f1:	89 d0                	mov    %edx,%eax
c01053f3:	c1 e0 02             	shl    $0x2,%eax
c01053f6:	01 d0                	add    %edx,%eax
c01053f8:	c1 e0 02             	shl    $0x2,%eax
c01053fb:	01 c8                	add    %ecx,%eax
c01053fd:	8b 50 08             	mov    0x8(%eax),%edx
c0105400:	8b 40 04             	mov    0x4(%eax),%eax
c0105403:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105406:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105409:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010540c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010540f:	89 d0                	mov    %edx,%eax
c0105411:	c1 e0 02             	shl    $0x2,%eax
c0105414:	01 d0                	add    %edx,%eax
c0105416:	c1 e0 02             	shl    $0x2,%eax
c0105419:	01 c8                	add    %ecx,%eax
c010541b:	8b 48 0c             	mov    0xc(%eax),%ecx
c010541e:	8b 58 10             	mov    0x10(%eax),%ebx
c0105421:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105424:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105427:	01 c8                	add    %ecx,%eax
c0105429:	11 da                	adc    %ebx,%edx
c010542b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010542e:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105431:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105434:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105437:	89 d0                	mov    %edx,%eax
c0105439:	c1 e0 02             	shl    $0x2,%eax
c010543c:	01 d0                	add    %edx,%eax
c010543e:	c1 e0 02             	shl    $0x2,%eax
c0105441:	01 c8                	add    %ecx,%eax
c0105443:	83 c0 14             	add    $0x14,%eax
c0105446:	8b 00                	mov    (%eax),%eax
c0105448:	83 f8 01             	cmp    $0x1,%eax
c010544b:	0f 85 0a 01 00 00    	jne    c010555b <page_init+0x3c4>
            if (begin < freemem) {
c0105451:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105454:	ba 00 00 00 00       	mov    $0x0,%edx
c0105459:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010545c:	72 17                	jb     c0105475 <page_init+0x2de>
c010545e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105461:	77 05                	ja     c0105468 <page_init+0x2d1>
c0105463:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0105466:	76 0d                	jbe    c0105475 <page_init+0x2de>
                begin = freemem;
c0105468:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010546b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010546e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105475:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105479:	72 1d                	jb     c0105498 <page_init+0x301>
c010547b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010547f:	77 09                	ja     c010548a <page_init+0x2f3>
c0105481:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0105488:	76 0e                	jbe    c0105498 <page_init+0x301>
                end = KMEMSIZE;
c010548a:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0105491:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105498:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010549b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010549e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054a1:	0f 87 b4 00 00 00    	ja     c010555b <page_init+0x3c4>
c01054a7:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054aa:	72 09                	jb     c01054b5 <page_init+0x31e>
c01054ac:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01054af:	0f 83 a6 00 00 00    	jae    c010555b <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c01054b5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01054bc:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01054bf:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01054c2:	01 d0                	add    %edx,%eax
c01054c4:	83 e8 01             	sub    $0x1,%eax
c01054c7:	89 45 98             	mov    %eax,-0x68(%ebp)
c01054ca:	8b 45 98             	mov    -0x68(%ebp),%eax
c01054cd:	ba 00 00 00 00       	mov    $0x0,%edx
c01054d2:	f7 75 9c             	divl   -0x64(%ebp)
c01054d5:	89 d0                	mov    %edx,%eax
c01054d7:	8b 55 98             	mov    -0x68(%ebp),%edx
c01054da:	29 c2                	sub    %eax,%edx
c01054dc:	89 d0                	mov    %edx,%eax
c01054de:	ba 00 00 00 00       	mov    $0x0,%edx
c01054e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054e6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01054e9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01054ec:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01054ef:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01054f2:	ba 00 00 00 00       	mov    $0x0,%edx
c01054f7:	89 c7                	mov    %eax,%edi
c01054f9:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c01054ff:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105502:	89 d0                	mov    %edx,%eax
c0105504:	83 e0 00             	and    $0x0,%eax
c0105507:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010550a:	8b 45 80             	mov    -0x80(%ebp),%eax
c010550d:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105510:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105513:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105516:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105519:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010551c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010551f:	77 3a                	ja     c010555b <page_init+0x3c4>
c0105521:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105524:	72 05                	jb     c010552b <page_init+0x394>
c0105526:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105529:	73 30                	jae    c010555b <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010552b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010552e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105531:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105534:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105537:	29 c8                	sub    %ecx,%eax
c0105539:	19 da                	sbb    %ebx,%edx
c010553b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010553f:	c1 ea 0c             	shr    $0xc,%edx
c0105542:	89 c3                	mov    %eax,%ebx
c0105544:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105547:	89 04 24             	mov    %eax,(%esp)
c010554a:	e8 8c f8 ff ff       	call   c0104ddb <pa2page>
c010554f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105553:	89 04 24             	mov    %eax,(%esp)
c0105556:	e8 55 fb ff ff       	call   c01050b0 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c010555b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010555f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105562:	8b 00                	mov    (%eax),%eax
c0105564:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105567:	0f 8f 7e fe ff ff    	jg     c01053eb <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c010556d:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0105573:	5b                   	pop    %ebx
c0105574:	5e                   	pop    %esi
c0105575:	5f                   	pop    %edi
c0105576:	5d                   	pop    %ebp
c0105577:	c3                   	ret    

c0105578 <enable_paging>:

static void
enable_paging(void) {
c0105578:	55                   	push   %ebp
c0105579:	89 e5                	mov    %esp,%ebp
c010557b:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c010557e:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c0105583:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0105586:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105589:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c010558c:	0f 20 c0             	mov    %cr0,%eax
c010558f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0105592:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0105595:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0105598:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c010559f:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01055a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01055a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01055a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055ac:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01055af:	c9                   	leave  
c01055b0:	c3                   	ret    

c01055b1 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01055b1:	55                   	push   %ebp
c01055b2:	89 e5                	mov    %esp,%ebp
c01055b4:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01055b7:	8b 45 14             	mov    0x14(%ebp),%eax
c01055ba:	8b 55 0c             	mov    0xc(%ebp),%edx
c01055bd:	31 d0                	xor    %edx,%eax
c01055bf:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055c4:	85 c0                	test   %eax,%eax
c01055c6:	74 24                	je     c01055ec <boot_map_segment+0x3b>
c01055c8:	c7 44 24 0c 42 64 11 	movl   $0xc0116442,0xc(%esp)
c01055cf:	c0 
c01055d0:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01055d7:	c0 
c01055d8:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c01055df:	00 
c01055e0:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01055e7:	e8 dc b8 ff ff       	call   c0100ec8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c01055ec:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c01055f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055f6:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055fb:	89 c2                	mov    %eax,%edx
c01055fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105600:	01 c2                	add    %eax,%edx
c0105602:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105605:	01 d0                	add    %edx,%eax
c0105607:	83 e8 01             	sub    $0x1,%eax
c010560a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010560d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105610:	ba 00 00 00 00       	mov    $0x0,%edx
c0105615:	f7 75 f0             	divl   -0x10(%ebp)
c0105618:	89 d0                	mov    %edx,%eax
c010561a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010561d:	29 c2                	sub    %eax,%edx
c010561f:	89 d0                	mov    %edx,%eax
c0105621:	c1 e8 0c             	shr    $0xc,%eax
c0105624:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105627:	8b 45 0c             	mov    0xc(%ebp),%eax
c010562a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010562d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105630:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105635:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105638:	8b 45 14             	mov    0x14(%ebp),%eax
c010563b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010563e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105641:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105646:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105649:	eb 6b                	jmp    c01056b6 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010564b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105652:	00 
c0105653:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105656:	89 44 24 04          	mov    %eax,0x4(%esp)
c010565a:	8b 45 08             	mov    0x8(%ebp),%eax
c010565d:	89 04 24             	mov    %eax,(%esp)
c0105660:	e8 d1 01 00 00       	call   c0105836 <get_pte>
c0105665:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0105668:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010566c:	75 24                	jne    c0105692 <boot_map_segment+0xe1>
c010566e:	c7 44 24 0c 6e 64 11 	movl   $0xc011646e,0xc(%esp)
c0105675:	c0 
c0105676:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010567d:	c0 
c010567e:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0105685:	00 
c0105686:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010568d:	e8 36 b8 ff ff       	call   c0100ec8 <__panic>
        *ptep = pa | PTE_P | perm;
c0105692:	8b 45 18             	mov    0x18(%ebp),%eax
c0105695:	8b 55 14             	mov    0x14(%ebp),%edx
c0105698:	09 d0                	or     %edx,%eax
c010569a:	83 c8 01             	or     $0x1,%eax
c010569d:	89 c2                	mov    %eax,%edx
c010569f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01056a2:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056a4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01056a8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01056af:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01056b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01056ba:	75 8f                	jne    c010564b <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01056bc:	c9                   	leave  
c01056bd:	c3                   	ret    

c01056be <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01056be:	55                   	push   %ebp
c01056bf:	89 e5                	mov    %esp,%ebp
c01056c1:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c01056c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01056cb:	e8 ff f9 ff ff       	call   c01050cf <alloc_pages>
c01056d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01056d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01056d7:	75 1c                	jne    c01056f5 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c01056d9:	c7 44 24 08 7b 64 11 	movl   $0xc011647b,0x8(%esp)
c01056e0:	c0 
c01056e1:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01056e8:	00 
c01056e9:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01056f0:	e8 d3 b7 ff ff       	call   c0100ec8 <__panic>
    }
    return page2kva(p);
c01056f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056f8:	89 04 24             	mov    %eax,(%esp)
c01056fb:	e8 20 f7 ff ff       	call   c0104e20 <page2kva>
}
c0105700:	c9                   	leave  
c0105701:	c3                   	ret    

c0105702 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105702:	55                   	push   %ebp
c0105703:	89 e5                	mov    %esp,%ebp
c0105705:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105708:	e8 70 f9 ff ff       	call   c010507d <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010570d:	e8 85 fa ff ff       	call   c0105197 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105712:	e8 83 09 00 00       	call   c010609a <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105717:	e8 a2 ff ff ff       	call   c01056be <boot_alloc_page>
c010571c:	a3 84 fe 14 c0       	mov    %eax,0xc014fe84
    memset(boot_pgdir, 0, PGSIZE);
c0105721:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105726:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010572d:	00 
c010572e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105735:	00 
c0105736:	89 04 24             	mov    %eax,(%esp)
c0105739:	e8 f4 fc 00 00       	call   c0115432 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c010573e:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105743:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105746:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010574d:	77 23                	ja     c0105772 <pmm_init+0x70>
c010574f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105752:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105756:	c7 44 24 08 10 64 11 	movl   $0xc0116410,0x8(%esp)
c010575d:	c0 
c010575e:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105765:	00 
c0105766:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010576d:	e8 56 b7 ff ff       	call   c0100ec8 <__panic>
c0105772:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105775:	05 00 00 00 40       	add    $0x40000000,%eax
c010577a:	a3 24 30 15 c0       	mov    %eax,0xc0153024

    check_pgdir();
c010577f:	e8 34 09 00 00       	call   c01060b8 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105784:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105789:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010578f:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105794:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105797:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010579e:	77 23                	ja     c01057c3 <pmm_init+0xc1>
c01057a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057a7:	c7 44 24 08 10 64 11 	movl   $0xc0116410,0x8(%esp)
c01057ae:	c0 
c01057af:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c01057b6:	00 
c01057b7:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01057be:	e8 05 b7 ff ff       	call   c0100ec8 <__panic>
c01057c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057c6:	05 00 00 00 40       	add    $0x40000000,%eax
c01057cb:	83 c8 03             	or     $0x3,%eax
c01057ce:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01057d0:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057d5:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c01057dc:	00 
c01057dd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01057e4:	00 
c01057e5:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c01057ec:	38 
c01057ed:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c01057f4:	c0 
c01057f5:	89 04 24             	mov    %eax,(%esp)
c01057f8:	e8 b4 fd ff ff       	call   c01055b1 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c01057fd:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105802:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c0105808:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c010580e:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105810:	e8 63 fd ff ff       	call   c0105578 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105815:	e8 74 f7 ff ff       	call   c0104f8e <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c010581a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010581f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105825:	e8 29 0f 00 00       	call   c0106753 <check_boot_pgdir>

    print_pgdir();
c010582a:	e8 b6 13 00 00       	call   c0106be5 <print_pgdir>
    
    kmalloc_init();
c010582f:	e8 e6 f2 ff ff       	call   c0104b1a <kmalloc_init>

}
c0105834:	c9                   	leave  
c0105835:	c3                   	ret    

c0105836 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105836:	55                   	push   %ebp
c0105837:	89 e5                	mov    %esp,%ebp
c0105839:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    if(!pgdir[PDX(la)] & PTE_P){
c010583c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010583f:	c1 e8 16             	shr    $0x16,%eax
c0105842:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105849:	8b 45 08             	mov    0x8(%ebp),%eax
c010584c:	01 d0                	add    %edx,%eax
c010584e:	8b 00                	mov    (%eax),%eax
c0105850:	85 c0                	test   %eax,%eax
c0105852:	0f 85 cf 00 00 00    	jne    c0105927 <get_pte+0xf1>
    	if(create){
c0105858:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010585c:	0f 84 be 00 00 00    	je     c0105920 <get_pte+0xea>
    		struct Page *p = alloc_page();
c0105862:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105869:	e8 61 f8 ff ff       	call   c01050cf <alloc_pages>
c010586e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    		if(p == NULL)
c0105871:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105875:	75 0a                	jne    c0105881 <get_pte+0x4b>
    			return NULL;
c0105877:	b8 00 00 00 00       	mov    $0x0,%eax
c010587c:	e9 11 01 00 00       	jmp    c0105992 <get_pte+0x15c>
    		set_page_ref(p, 1);
c0105881:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105888:	00 
c0105889:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010588c:	89 04 24             	mov    %eax,(%esp)
c010588f:	e8 40 f6 ff ff       	call   c0104ed4 <set_page_ref>
    		uintptr_t ppa = page2pa(p);
c0105894:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105897:	89 04 24             	mov    %eax,(%esp)
c010589a:	e8 26 f5 ff ff       	call   c0104dc5 <page2pa>
c010589f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    		memset(KADDR(ppa), 0, 4096);
c01058a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01058a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058ab:	c1 e8 0c             	shr    $0xc,%eax
c01058ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01058b1:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01058b6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01058b9:	72 23                	jb     c01058de <get_pte+0xa8>
c01058bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058be:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058c2:	c7 44 24 08 6c 63 11 	movl   $0xc011636c,0x8(%esp)
c01058c9:	c0 
c01058ca:	c7 44 24 04 96 01 00 	movl   $0x196,0x4(%esp)
c01058d1:	00 
c01058d2:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01058d9:	e8 ea b5 ff ff       	call   c0100ec8 <__panic>
c01058de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058e1:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01058e6:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01058ed:	00 
c01058ee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01058f5:	00 
c01058f6:	89 04 24             	mov    %eax,(%esp)
c01058f9:	e8 34 fb 00 00       	call   c0115432 <memset>
    		pgdir[PDX(la)] = (ppa & ~0x0fff) | PTE_P | PTE_U | PTE_W;
c01058fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105901:	c1 e8 16             	shr    $0x16,%eax
c0105904:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010590b:	8b 45 08             	mov    0x8(%ebp),%eax
c010590e:	01 d0                	add    %edx,%eax
c0105910:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105913:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c0105919:	83 ca 07             	or     $0x7,%edx
c010591c:	89 10                	mov    %edx,(%eax)
c010591e:	eb 07                	jmp    c0105927 <get_pte+0xf1>
    	}
    	else{
    		return NULL;
c0105920:	b8 00 00 00 00       	mov    $0x0,%eax
c0105925:	eb 6b                	jmp    c0105992 <get_pte+0x15c>
    	}
    }
    return &((pte_t *)KADDR(pgdir[PDX(la)] & ~0x0fff))[PTX(la)];
c0105927:	8b 45 0c             	mov    0xc(%ebp),%eax
c010592a:	c1 e8 16             	shr    $0x16,%eax
c010592d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105934:	8b 45 08             	mov    0x8(%ebp),%eax
c0105937:	01 d0                	add    %edx,%eax
c0105939:	8b 00                	mov    (%eax),%eax
c010593b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105940:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105943:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105946:	c1 e8 0c             	shr    $0xc,%eax
c0105949:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010594c:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105951:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0105954:	72 23                	jb     c0105979 <get_pte+0x143>
c0105956:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105959:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010595d:	c7 44 24 08 6c 63 11 	movl   $0xc011636c,0x8(%esp)
c0105964:	c0 
c0105965:	c7 44 24 04 9d 01 00 	movl   $0x19d,0x4(%esp)
c010596c:	00 
c010596d:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105974:	e8 4f b5 ff ff       	call   c0100ec8 <__panic>
c0105979:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010597c:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105981:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105984:	c1 ea 0c             	shr    $0xc,%edx
c0105987:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c010598d:	c1 e2 02             	shl    $0x2,%edx
c0105990:	01 d0                	add    %edx,%eax
}
c0105992:	c9                   	leave  
c0105993:	c3                   	ret    

c0105994 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105994:	55                   	push   %ebp
c0105995:	89 e5                	mov    %esp,%ebp
c0105997:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010599a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059a1:	00 
c01059a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01059ac:	89 04 24             	mov    %eax,(%esp)
c01059af:	e8 82 fe ff ff       	call   c0105836 <get_pte>
c01059b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01059b7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01059bb:	74 08                	je     c01059c5 <get_page+0x31>
        *ptep_store = ptep;
c01059bd:	8b 45 10             	mov    0x10(%ebp),%eax
c01059c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01059c3:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c01059c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01059c9:	74 1b                	je     c01059e6 <get_page+0x52>
c01059cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059ce:	8b 00                	mov    (%eax),%eax
c01059d0:	83 e0 01             	and    $0x1,%eax
c01059d3:	85 c0                	test   %eax,%eax
c01059d5:	74 0f                	je     c01059e6 <get_page+0x52>
        return pa2page(*ptep);
c01059d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059da:	8b 00                	mov    (%eax),%eax
c01059dc:	89 04 24             	mov    %eax,(%esp)
c01059df:	e8 f7 f3 ff ff       	call   c0104ddb <pa2page>
c01059e4:	eb 05                	jmp    c01059eb <get_page+0x57>
    }
    return NULL;
c01059e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01059eb:	c9                   	leave  
c01059ec:	c3                   	ret    

c01059ed <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c01059ed:	55                   	push   %ebp
c01059ee:	89 e5                	mov    %esp,%ebp
c01059f0:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
	if(*ptep & PTE_P){
c01059f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01059f6:	8b 00                	mov    (%eax),%eax
c01059f8:	83 e0 01             	and    $0x1,%eax
c01059fb:	85 c0                	test   %eax,%eax
c01059fd:	74 4d                	je     c0105a4c <page_remove_pte+0x5f>
    	struct Page *page = pte2page(*ptep);
c01059ff:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a02:	8b 00                	mov    (%eax),%eax
c0105a04:	89 04 24             	mov    %eax,(%esp)
c0105a07:	e8 68 f4 ff ff       	call   c0104e74 <pte2page>
c0105a0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    	if(page_ref_dec(page) == 0){
c0105a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a12:	89 04 24             	mov    %eax,(%esp)
c0105a15:	e8 de f4 ff ff       	call   c0104ef8 <page_ref_dec>
c0105a1a:	85 c0                	test   %eax,%eax
c0105a1c:	75 13                	jne    c0105a31 <page_remove_pte+0x44>
    		free_page(page);
c0105a1e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105a25:	00 
c0105a26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a29:	89 04 24             	mov    %eax,(%esp)
c0105a2c:	e8 09 f7 ff ff       	call   c010513a <free_pages>
    	}
    	*ptep = 0;
c0105a31:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    	tlb_invalidate(pgdir, la);
c0105a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a44:	89 04 24             	mov    %eax,(%esp)
c0105a47:	e8 1d 05 00 00       	call   c0105f69 <tlb_invalidate>
    }
}
c0105a4c:	c9                   	leave  
c0105a4d:	c3                   	ret    

c0105a4e <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105a4e:	55                   	push   %ebp
c0105a4f:	89 e5                	mov    %esp,%ebp
c0105a51:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105a54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a57:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a5c:	85 c0                	test   %eax,%eax
c0105a5e:	75 0c                	jne    c0105a6c <unmap_range+0x1e>
c0105a60:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a63:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a68:	85 c0                	test   %eax,%eax
c0105a6a:	74 24                	je     c0105a90 <unmap_range+0x42>
c0105a6c:	c7 44 24 0c 94 64 11 	movl   $0xc0116494,0xc(%esp)
c0105a73:	c0 
c0105a74:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105a7b:	c0 
c0105a7c:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c0105a83:	00 
c0105a84:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105a8b:	e8 38 b4 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105a90:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105a97:	76 11                	jbe    c0105aaa <unmap_range+0x5c>
c0105a99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a9c:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105a9f:	73 09                	jae    c0105aaa <unmap_range+0x5c>
c0105aa1:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105aa8:	76 24                	jbe    c0105ace <unmap_range+0x80>
c0105aaa:	c7 44 24 0c bd 64 11 	movl   $0xc01164bd,0xc(%esp)
c0105ab1:	c0 
c0105ab2:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105ab9:	c0 
c0105aba:	c7 44 24 04 d8 01 00 	movl   $0x1d8,0x4(%esp)
c0105ac1:	00 
c0105ac2:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105ac9:	e8 fa b3 ff ff       	call   c0100ec8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105ace:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ad5:	00 
c0105ad6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ad9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105add:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ae0:	89 04 24             	mov    %eax,(%esp)
c0105ae3:	e8 4e fd ff ff       	call   c0105836 <get_pte>
c0105ae8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105aeb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105aef:	75 18                	jne    c0105b09 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105af1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105af4:	05 00 00 40 00       	add    $0x400000,%eax
c0105af9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105aff:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b04:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b07:	eb 29                	jmp    c0105b32 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b0c:	8b 00                	mov    (%eax),%eax
c0105b0e:	85 c0                	test   %eax,%eax
c0105b10:	74 19                	je     c0105b2b <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b15:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b20:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b23:	89 04 24             	mov    %eax,(%esp)
c0105b26:	e8 c2 fe ff ff       	call   c01059ed <page_remove_pte>
        }
        start += PGSIZE;
c0105b2b:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b32:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b36:	74 08                	je     c0105b40 <unmap_range+0xf2>
c0105b38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b3b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b3e:	72 8e                	jb     c0105ace <unmap_range+0x80>
}
c0105b40:	c9                   	leave  
c0105b41:	c3                   	ret    

c0105b42 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b42:	55                   	push   %ebp
c0105b43:	89 e5                	mov    %esp,%ebp
c0105b45:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b4b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b50:	85 c0                	test   %eax,%eax
c0105b52:	75 0c                	jne    c0105b60 <exit_range+0x1e>
c0105b54:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b57:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b5c:	85 c0                	test   %eax,%eax
c0105b5e:	74 24                	je     c0105b84 <exit_range+0x42>
c0105b60:	c7 44 24 0c 94 64 11 	movl   $0xc0116494,0xc(%esp)
c0105b67:	c0 
c0105b68:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105b6f:	c0 
c0105b70:	c7 44 24 04 e9 01 00 	movl   $0x1e9,0x4(%esp)
c0105b77:	00 
c0105b78:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105b7f:	e8 44 b3 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105b84:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b8b:	76 11                	jbe    c0105b9e <exit_range+0x5c>
c0105b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b90:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b93:	73 09                	jae    c0105b9e <exit_range+0x5c>
c0105b95:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b9c:	76 24                	jbe    c0105bc2 <exit_range+0x80>
c0105b9e:	c7 44 24 0c bd 64 11 	movl   $0xc01164bd,0xc(%esp)
c0105ba5:	c0 
c0105ba6:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105bad:	c0 
c0105bae:	c7 44 24 04 ea 01 00 	movl   $0x1ea,0x4(%esp)
c0105bb5:	00 
c0105bb6:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105bbd:	e8 06 b3 ff ff       	call   c0100ec8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105bc2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bcb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105bd0:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105bd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bd6:	c1 e8 16             	shr    $0x16,%eax
c0105bd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105bdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bdf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105be6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105be9:	01 d0                	add    %edx,%eax
c0105beb:	8b 00                	mov    (%eax),%eax
c0105bed:	83 e0 01             	and    $0x1,%eax
c0105bf0:	85 c0                	test   %eax,%eax
c0105bf2:	74 3e                	je     c0105c32 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105bf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bf7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105bfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c01:	01 d0                	add    %edx,%eax
c0105c03:	8b 00                	mov    (%eax),%eax
c0105c05:	89 04 24             	mov    %eax,(%esp)
c0105c08:	e8 a5 f2 ff ff       	call   c0104eb2 <pde2page>
c0105c0d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c14:	00 
c0105c15:	89 04 24             	mov    %eax,(%esp)
c0105c18:	e8 1d f5 ff ff       	call   c010513a <free_pages>
            pgdir[pde_idx] = 0;
c0105c1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c27:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c2a:	01 d0                	add    %edx,%eax
c0105c2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105c32:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c3d:	74 08                	je     c0105c47 <exit_range+0x105>
c0105c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c42:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c45:	72 8c                	jb     c0105bd3 <exit_range+0x91>
}
c0105c47:	c9                   	leave  
c0105c48:	c3                   	ret    

c0105c49 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105c49:	55                   	push   %ebp
c0105c4a:	89 e5                	mov    %esp,%ebp
c0105c4c:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c4f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c52:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c57:	85 c0                	test   %eax,%eax
c0105c59:	75 0c                	jne    c0105c67 <copy_range+0x1e>
c0105c5b:	8b 45 14             	mov    0x14(%ebp),%eax
c0105c5e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c63:	85 c0                	test   %eax,%eax
c0105c65:	74 24                	je     c0105c8b <copy_range+0x42>
c0105c67:	c7 44 24 0c 94 64 11 	movl   $0xc0116494,0xc(%esp)
c0105c6e:	c0 
c0105c6f:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105c76:	c0 
c0105c77:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c0105c7e:	00 
c0105c7f:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105c86:	e8 3d b2 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105c8b:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105c92:	76 11                	jbe    c0105ca5 <copy_range+0x5c>
c0105c94:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c97:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105c9a:	73 09                	jae    c0105ca5 <copy_range+0x5c>
c0105c9c:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105ca3:	76 24                	jbe    c0105cc9 <copy_range+0x80>
c0105ca5:	c7 44 24 0c bd 64 11 	movl   $0xc01164bd,0xc(%esp)
c0105cac:	c0 
c0105cad:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105cb4:	c0 
c0105cb5:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
c0105cbc:	00 
c0105cbd:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105cc4:	e8 ff b1 ff ff       	call   c0100ec8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105cc9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105cd0:	00 
c0105cd1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cd4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105cd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cdb:	89 04 24             	mov    %eax,(%esp)
c0105cde:	e8 53 fb ff ff       	call   c0105836 <get_pte>
c0105ce3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105ce6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105cea:	75 1b                	jne    c0105d07 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105cec:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cef:	05 00 00 40 00       	add    $0x400000,%eax
c0105cf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105cf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cfa:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105cff:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d02:	e9 4c 01 00 00       	jmp    c0105e53 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d0a:	8b 00                	mov    (%eax),%eax
c0105d0c:	83 e0 01             	and    $0x1,%eax
c0105d0f:	85 c0                	test   %eax,%eax
c0105d11:	0f 84 35 01 00 00    	je     c0105e4c <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105d17:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105d1e:	00 
c0105d1f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d26:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d29:	89 04 24             	mov    %eax,(%esp)
c0105d2c:	e8 05 fb ff ff       	call   c0105836 <get_pte>
c0105d31:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d38:	75 0a                	jne    c0105d44 <copy_range+0xfb>
                return -E_NO_MEM;
c0105d3a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105d3f:	e9 26 01 00 00       	jmp    c0105e6a <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d47:	8b 00                	mov    (%eax),%eax
c0105d49:	83 e0 07             	and    $0x7,%eax
c0105d4c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d52:	8b 00                	mov    (%eax),%eax
c0105d54:	89 04 24             	mov    %eax,(%esp)
c0105d57:	e8 18 f1 ff ff       	call   c0104e74 <pte2page>
c0105d5c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105d5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105d66:	e8 64 f3 ff ff       	call   c01050cf <alloc_pages>
c0105d6b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105d6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105d72:	75 24                	jne    c0105d98 <copy_range+0x14f>
c0105d74:	c7 44 24 0c d5 64 11 	movl   $0xc01164d5,0xc(%esp)
c0105d7b:	c0 
c0105d7c:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105d83:	c0 
c0105d84:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
c0105d8b:	00 
c0105d8c:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105d93:	e8 30 b1 ff ff       	call   c0100ec8 <__panic>
        assert(npage!=NULL);
c0105d98:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105d9c:	75 24                	jne    c0105dc2 <copy_range+0x179>
c0105d9e:	c7 44 24 0c e0 64 11 	movl   $0xc01164e0,0xc(%esp)
c0105da5:	c0 
c0105da6:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105dad:	c0 
c0105dae:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
c0105db5:	00 
c0105db6:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105dbd:	e8 06 b1 ff ff       	call   c0100ec8 <__panic>
        int ret=0;
c0105dc2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0105dc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105dcc:	89 04 24             	mov    %eax,(%esp)
c0105dcf:	e8 4c f0 ff ff       	call   c0104e20 <page2kva>
c0105dd4:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0105dd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105dda:	89 04 24             	mov    %eax,(%esp)
c0105ddd:	e8 3e f0 ff ff       	call   c0104e20 <page2kva>
c0105de2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105de5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105dec:	00 
c0105ded:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105df0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105df4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105df7:	89 04 24             	mov    %eax,(%esp)
c0105dfa:	e8 15 f7 00 00       	call   c0115514 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0105dff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e02:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e06:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e09:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e14:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e17:	89 04 24             	mov    %eax,(%esp)
c0105e1a:	e8 91 00 00 00       	call   c0105eb0 <page_insert>
c0105e1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105e22:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105e26:	74 24                	je     c0105e4c <copy_range+0x203>
c0105e28:	c7 44 24 0c ec 64 11 	movl   $0xc01164ec,0xc(%esp)
c0105e2f:	c0 
c0105e30:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0105e37:	c0 
c0105e38:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
c0105e3f:	00 
c0105e40:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105e47:	e8 7c b0 ff ff       	call   c0100ec8 <__panic>
        }
        start += PGSIZE;
c0105e4c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105e53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105e57:	74 0c                	je     c0105e65 <copy_range+0x21c>
c0105e59:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e5c:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105e5f:	0f 82 64 fe ff ff    	jb     c0105cc9 <copy_range+0x80>
    return 0;
c0105e65:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e6a:	c9                   	leave  
c0105e6b:	c3                   	ret    

c0105e6c <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105e6c:	55                   	push   %ebp
c0105e6d:	89 e5                	mov    %esp,%ebp
c0105e6f:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105e72:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e79:	00 
c0105e7a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e84:	89 04 24             	mov    %eax,(%esp)
c0105e87:	e8 aa f9 ff ff       	call   c0105836 <get_pte>
c0105e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105e8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e93:	74 19                	je     c0105eae <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e98:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ea6:	89 04 24             	mov    %eax,(%esp)
c0105ea9:	e8 3f fb ff ff       	call   c01059ed <page_remove_pte>
    }
}
c0105eae:	c9                   	leave  
c0105eaf:	c3                   	ret    

c0105eb0 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105eb0:	55                   	push   %ebp
c0105eb1:	89 e5                	mov    %esp,%ebp
c0105eb3:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105eb6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ebd:	00 
c0105ebe:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ec1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ec5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec8:	89 04 24             	mov    %eax,(%esp)
c0105ecb:	e8 66 f9 ff ff       	call   c0105836 <get_pte>
c0105ed0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105ed3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ed7:	75 0a                	jne    c0105ee3 <page_insert+0x33>
        return -E_NO_MEM;
c0105ed9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105ede:	e9 84 00 00 00       	jmp    c0105f67 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105ee3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ee6:	89 04 24             	mov    %eax,(%esp)
c0105ee9:	e8 f3 ef ff ff       	call   c0104ee1 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef1:	8b 00                	mov    (%eax),%eax
c0105ef3:	83 e0 01             	and    $0x1,%eax
c0105ef6:	85 c0                	test   %eax,%eax
c0105ef8:	74 3e                	je     c0105f38 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105efa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105efd:	8b 00                	mov    (%eax),%eax
c0105eff:	89 04 24             	mov    %eax,(%esp)
c0105f02:	e8 6d ef ff ff       	call   c0104e74 <pte2page>
c0105f07:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105f0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f0d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105f10:	75 0d                	jne    c0105f1f <page_insert+0x6f>
            page_ref_dec(page);
c0105f12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f15:	89 04 24             	mov    %eax,(%esp)
c0105f18:	e8 db ef ff ff       	call   c0104ef8 <page_ref_dec>
c0105f1d:	eb 19                	jmp    c0105f38 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105f1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f22:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f26:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f30:	89 04 24             	mov    %eax,(%esp)
c0105f33:	e8 b5 fa ff ff       	call   c01059ed <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105f38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f3b:	89 04 24             	mov    %eax,(%esp)
c0105f3e:	e8 82 ee ff ff       	call   c0104dc5 <page2pa>
c0105f43:	0b 45 14             	or     0x14(%ebp),%eax
c0105f46:	83 c8 01             	or     $0x1,%eax
c0105f49:	89 c2                	mov    %eax,%edx
c0105f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f4e:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105f50:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f57:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f5a:	89 04 24             	mov    %eax,(%esp)
c0105f5d:	e8 07 00 00 00       	call   c0105f69 <tlb_invalidate>
    return 0;
c0105f62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f67:	c9                   	leave  
c0105f68:	c3                   	ret    

c0105f69 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105f69:	55                   	push   %ebp
c0105f6a:	89 e5                	mov    %esp,%ebp
c0105f6c:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105f6f:	0f 20 d8             	mov    %cr3,%eax
c0105f72:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105f75:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105f78:	89 c2                	mov    %eax,%edx
c0105f7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105f80:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105f87:	77 23                	ja     c0105fac <tlb_invalidate+0x43>
c0105f89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f8c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f90:	c7 44 24 08 10 64 11 	movl   $0xc0116410,0x8(%esp)
c0105f97:	c0 
c0105f98:	c7 44 24 04 5b 02 00 	movl   $0x25b,0x4(%esp)
c0105f9f:	00 
c0105fa0:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0105fa7:	e8 1c af ff ff       	call   c0100ec8 <__panic>
c0105fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105faf:	05 00 00 00 40       	add    $0x40000000,%eax
c0105fb4:	39 c2                	cmp    %eax,%edx
c0105fb6:	75 0c                	jne    c0105fc4 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105fb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105fbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fc1:	0f 01 38             	invlpg (%eax)
    }
}
c0105fc4:	c9                   	leave  
c0105fc5:	c3                   	ret    

c0105fc6 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105fc6:	55                   	push   %ebp
c0105fc7:	89 e5                	mov    %esp,%ebp
c0105fc9:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105fcc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105fd3:	e8 f7 f0 ff ff       	call   c01050cf <alloc_pages>
c0105fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105fdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fdf:	0f 84 b0 00 00 00    	je     c0106095 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105fe5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fe8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fef:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ff6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ffa:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ffd:	89 04 24             	mov    %eax,(%esp)
c0106000:	e8 ab fe ff ff       	call   c0105eb0 <page_insert>
c0106005:	85 c0                	test   %eax,%eax
c0106007:	74 1a                	je     c0106023 <pgdir_alloc_page+0x5d>
            free_page(page);
c0106009:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106010:	00 
c0106011:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106014:	89 04 24             	mov    %eax,(%esp)
c0106017:	e8 1e f1 ff ff       	call   c010513a <free_pages>
            return NULL;
c010601c:	b8 00 00 00 00       	mov    $0x0,%eax
c0106021:	eb 75                	jmp    c0106098 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0106023:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0106028:	85 c0                	test   %eax,%eax
c010602a:	74 69                	je     c0106095 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c010602c:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0106031:	85 c0                	test   %eax,%eax
c0106033:	74 60                	je     c0106095 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106035:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c010603a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106041:	00 
c0106042:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106045:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106049:	8b 55 0c             	mov    0xc(%ebp),%edx
c010604c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106050:	89 04 24             	mov    %eax,(%esp)
c0106053:	e8 3e 0e 00 00       	call   c0106e96 <swap_map_swappable>
                page->pra_vaddr=la;
c0106058:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010605b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010605e:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0106061:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106064:	89 04 24             	mov    %eax,(%esp)
c0106067:	e8 5e ee ff ff       	call   c0104eca <page_ref>
c010606c:	83 f8 01             	cmp    $0x1,%eax
c010606f:	74 24                	je     c0106095 <pgdir_alloc_page+0xcf>
c0106071:	c7 44 24 0c f5 64 11 	movl   $0xc01164f5,0xc(%esp)
c0106078:	c0 
c0106079:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106080:	c0 
c0106081:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
c0106088:	00 
c0106089:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106090:	e8 33 ae ff ff       	call   c0100ec8 <__panic>
            }
        }

    }

    return page;
c0106095:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106098:	c9                   	leave  
c0106099:	c3                   	ret    

c010609a <check_alloc_page>:

static void
check_alloc_page(void) {
c010609a:	55                   	push   %ebp
c010609b:	89 e5                	mov    %esp,%ebp
c010609d:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01060a0:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01060a5:	8b 40 18             	mov    0x18(%eax),%eax
c01060a8:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01060aa:	c7 04 24 0c 65 11 c0 	movl   $0xc011650c,(%esp)
c01060b1:	e8 af a2 ff ff       	call   c0100365 <cprintf>
}
c01060b6:	c9                   	leave  
c01060b7:	c3                   	ret    

c01060b8 <check_pgdir>:

static void
check_pgdir(void) {
c01060b8:	55                   	push   %ebp
c01060b9:	89 e5                	mov    %esp,%ebp
c01060bb:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01060be:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01060c3:	3d 00 80 03 00       	cmp    $0x38000,%eax
c01060c8:	76 24                	jbe    c01060ee <check_pgdir+0x36>
c01060ca:	c7 44 24 0c 2b 65 11 	movl   $0xc011652b,0xc(%esp)
c01060d1:	c0 
c01060d2:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01060d9:	c0 
c01060da:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c01060e1:	00 
c01060e2:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01060e9:	e8 da ad ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01060ee:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01060f3:	85 c0                	test   %eax,%eax
c01060f5:	74 0e                	je     c0106105 <check_pgdir+0x4d>
c01060f7:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01060fc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106101:	85 c0                	test   %eax,%eax
c0106103:	74 24                	je     c0106129 <check_pgdir+0x71>
c0106105:	c7 44 24 0c 48 65 11 	movl   $0xc0116548,0xc(%esp)
c010610c:	c0 
c010610d:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106114:	c0 
c0106115:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010611c:	00 
c010611d:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106124:	e8 9f ad ff ff       	call   c0100ec8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106129:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010612e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106135:	00 
c0106136:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010613d:	00 
c010613e:	89 04 24             	mov    %eax,(%esp)
c0106141:	e8 4e f8 ff ff       	call   c0105994 <get_page>
c0106146:	85 c0                	test   %eax,%eax
c0106148:	74 24                	je     c010616e <check_pgdir+0xb6>
c010614a:	c7 44 24 0c 80 65 11 	movl   $0xc0116580,0xc(%esp)
c0106151:	c0 
c0106152:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106159:	c0 
c010615a:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0106161:	00 
c0106162:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106169:	e8 5a ad ff ff       	call   c0100ec8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010616e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106175:	e8 55 ef ff ff       	call   c01050cf <alloc_pages>
c010617a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010617d:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106182:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106189:	00 
c010618a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106191:	00 
c0106192:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106195:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106199:	89 04 24             	mov    %eax,(%esp)
c010619c:	e8 0f fd ff ff       	call   c0105eb0 <page_insert>
c01061a1:	85 c0                	test   %eax,%eax
c01061a3:	74 24                	je     c01061c9 <check_pgdir+0x111>
c01061a5:	c7 44 24 0c a8 65 11 	movl   $0xc01165a8,0xc(%esp)
c01061ac:	c0 
c01061ad:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01061b4:	c0 
c01061b5:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01061bc:	00 
c01061bd:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01061c4:	e8 ff ac ff ff       	call   c0100ec8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01061c9:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01061ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061d5:	00 
c01061d6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061dd:	00 
c01061de:	89 04 24             	mov    %eax,(%esp)
c01061e1:	e8 50 f6 ff ff       	call   c0105836 <get_pte>
c01061e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01061e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01061ed:	75 24                	jne    c0106213 <check_pgdir+0x15b>
c01061ef:	c7 44 24 0c d4 65 11 	movl   $0xc01165d4,0xc(%esp)
c01061f6:	c0 
c01061f7:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01061fe:	c0 
c01061ff:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0106206:	00 
c0106207:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010620e:	e8 b5 ac ff ff       	call   c0100ec8 <__panic>
    assert(pa2page(*ptep) == p1);
c0106213:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106216:	8b 00                	mov    (%eax),%eax
c0106218:	89 04 24             	mov    %eax,(%esp)
c010621b:	e8 bb eb ff ff       	call   c0104ddb <pa2page>
c0106220:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106223:	74 24                	je     c0106249 <check_pgdir+0x191>
c0106225:	c7 44 24 0c 01 66 11 	movl   $0xc0116601,0xc(%esp)
c010622c:	c0 
c010622d:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106234:	c0 
c0106235:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c010623c:	00 
c010623d:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106244:	e8 7f ac ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 1);
c0106249:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010624c:	89 04 24             	mov    %eax,(%esp)
c010624f:	e8 76 ec ff ff       	call   c0104eca <page_ref>
c0106254:	83 f8 01             	cmp    $0x1,%eax
c0106257:	74 24                	je     c010627d <check_pgdir+0x1c5>
c0106259:	c7 44 24 0c 16 66 11 	movl   $0xc0116616,0xc(%esp)
c0106260:	c0 
c0106261:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106268:	c0 
c0106269:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0106270:	00 
c0106271:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106278:	e8 4b ac ff ff       	call   c0100ec8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010627d:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106282:	8b 00                	mov    (%eax),%eax
c0106284:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106289:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010628c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010628f:	c1 e8 0c             	shr    $0xc,%eax
c0106292:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106295:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010629a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010629d:	72 23                	jb     c01062c2 <check_pgdir+0x20a>
c010629f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062a6:	c7 44 24 08 6c 63 11 	movl   $0xc011636c,0x8(%esp)
c01062ad:	c0 
c01062ae:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01062b5:	00 
c01062b6:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01062bd:	e8 06 ac ff ff       	call   c0100ec8 <__panic>
c01062c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062c5:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01062ca:	83 c0 04             	add    $0x4,%eax
c01062cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01062d0:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01062d5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062dc:	00 
c01062dd:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01062e4:	00 
c01062e5:	89 04 24             	mov    %eax,(%esp)
c01062e8:	e8 49 f5 ff ff       	call   c0105836 <get_pte>
c01062ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01062f0:	74 24                	je     c0106316 <check_pgdir+0x25e>
c01062f2:	c7 44 24 0c 28 66 11 	movl   $0xc0116628,0xc(%esp)
c01062f9:	c0 
c01062fa:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106301:	c0 
c0106302:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c0106309:	00 
c010630a:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106311:	e8 b2 ab ff ff       	call   c0100ec8 <__panic>

    p2 = alloc_page();
c0106316:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010631d:	e8 ad ed ff ff       	call   c01050cf <alloc_pages>
c0106322:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106325:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010632a:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0106331:	00 
c0106332:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106339:	00 
c010633a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010633d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106341:	89 04 24             	mov    %eax,(%esp)
c0106344:	e8 67 fb ff ff       	call   c0105eb0 <page_insert>
c0106349:	85 c0                	test   %eax,%eax
c010634b:	74 24                	je     c0106371 <check_pgdir+0x2b9>
c010634d:	c7 44 24 0c 50 66 11 	movl   $0xc0116650,0xc(%esp)
c0106354:	c0 
c0106355:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010635c:	c0 
c010635d:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c0106364:	00 
c0106365:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010636c:	e8 57 ab ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106371:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106376:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010637d:	00 
c010637e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106385:	00 
c0106386:	89 04 24             	mov    %eax,(%esp)
c0106389:	e8 a8 f4 ff ff       	call   c0105836 <get_pte>
c010638e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106391:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106395:	75 24                	jne    c01063bb <check_pgdir+0x303>
c0106397:	c7 44 24 0c 88 66 11 	movl   $0xc0116688,0xc(%esp)
c010639e:	c0 
c010639f:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01063a6:	c0 
c01063a7:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01063ae:	00 
c01063af:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01063b6:	e8 0d ab ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_U);
c01063bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063be:	8b 00                	mov    (%eax),%eax
c01063c0:	83 e0 04             	and    $0x4,%eax
c01063c3:	85 c0                	test   %eax,%eax
c01063c5:	75 24                	jne    c01063eb <check_pgdir+0x333>
c01063c7:	c7 44 24 0c b8 66 11 	movl   $0xc01166b8,0xc(%esp)
c01063ce:	c0 
c01063cf:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01063d6:	c0 
c01063d7:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01063de:	00 
c01063df:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01063e6:	e8 dd aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_W);
c01063eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063ee:	8b 00                	mov    (%eax),%eax
c01063f0:	83 e0 02             	and    $0x2,%eax
c01063f3:	85 c0                	test   %eax,%eax
c01063f5:	75 24                	jne    c010641b <check_pgdir+0x363>
c01063f7:	c7 44 24 0c c6 66 11 	movl   $0xc01166c6,0xc(%esp)
c01063fe:	c0 
c01063ff:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106406:	c0 
c0106407:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c010640e:	00 
c010640f:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106416:	e8 ad aa ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010641b:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106420:	8b 00                	mov    (%eax),%eax
c0106422:	83 e0 04             	and    $0x4,%eax
c0106425:	85 c0                	test   %eax,%eax
c0106427:	75 24                	jne    c010644d <check_pgdir+0x395>
c0106429:	c7 44 24 0c d4 66 11 	movl   $0xc01166d4,0xc(%esp)
c0106430:	c0 
c0106431:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106438:	c0 
c0106439:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c0106440:	00 
c0106441:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106448:	e8 7b aa ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 1);
c010644d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106450:	89 04 24             	mov    %eax,(%esp)
c0106453:	e8 72 ea ff ff       	call   c0104eca <page_ref>
c0106458:	83 f8 01             	cmp    $0x1,%eax
c010645b:	74 24                	je     c0106481 <check_pgdir+0x3c9>
c010645d:	c7 44 24 0c ea 66 11 	movl   $0xc01166ea,0xc(%esp)
c0106464:	c0 
c0106465:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010646c:	c0 
c010646d:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0106474:	00 
c0106475:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010647c:	e8 47 aa ff ff       	call   c0100ec8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106481:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106486:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010648d:	00 
c010648e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106495:	00 
c0106496:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106499:	89 54 24 04          	mov    %edx,0x4(%esp)
c010649d:	89 04 24             	mov    %eax,(%esp)
c01064a0:	e8 0b fa ff ff       	call   c0105eb0 <page_insert>
c01064a5:	85 c0                	test   %eax,%eax
c01064a7:	74 24                	je     c01064cd <check_pgdir+0x415>
c01064a9:	c7 44 24 0c fc 66 11 	movl   $0xc01166fc,0xc(%esp)
c01064b0:	c0 
c01064b1:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01064b8:	c0 
c01064b9:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01064c0:	00 
c01064c1:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01064c8:	e8 fb a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 2);
c01064cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064d0:	89 04 24             	mov    %eax,(%esp)
c01064d3:	e8 f2 e9 ff ff       	call   c0104eca <page_ref>
c01064d8:	83 f8 02             	cmp    $0x2,%eax
c01064db:	74 24                	je     c0106501 <check_pgdir+0x449>
c01064dd:	c7 44 24 0c 28 67 11 	movl   $0xc0116728,0xc(%esp)
c01064e4:	c0 
c01064e5:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01064ec:	c0 
c01064ed:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c01064f4:	00 
c01064f5:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01064fc:	e8 c7 a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106501:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106504:	89 04 24             	mov    %eax,(%esp)
c0106507:	e8 be e9 ff ff       	call   c0104eca <page_ref>
c010650c:	85 c0                	test   %eax,%eax
c010650e:	74 24                	je     c0106534 <check_pgdir+0x47c>
c0106510:	c7 44 24 0c 3a 67 11 	movl   $0xc011673a,0xc(%esp)
c0106517:	c0 
c0106518:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010651f:	c0 
c0106520:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106527:	00 
c0106528:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010652f:	e8 94 a9 ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106534:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106539:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106540:	00 
c0106541:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106548:	00 
c0106549:	89 04 24             	mov    %eax,(%esp)
c010654c:	e8 e5 f2 ff ff       	call   c0105836 <get_pte>
c0106551:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106554:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106558:	75 24                	jne    c010657e <check_pgdir+0x4c6>
c010655a:	c7 44 24 0c 88 66 11 	movl   $0xc0116688,0xc(%esp)
c0106561:	c0 
c0106562:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106569:	c0 
c010656a:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0106571:	00 
c0106572:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106579:	e8 4a a9 ff ff       	call   c0100ec8 <__panic>
    assert(pa2page(*ptep) == p1);
c010657e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106581:	8b 00                	mov    (%eax),%eax
c0106583:	89 04 24             	mov    %eax,(%esp)
c0106586:	e8 50 e8 ff ff       	call   c0104ddb <pa2page>
c010658b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010658e:	74 24                	je     c01065b4 <check_pgdir+0x4fc>
c0106590:	c7 44 24 0c 01 66 11 	movl   $0xc0116601,0xc(%esp)
c0106597:	c0 
c0106598:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010659f:	c0 
c01065a0:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c01065a7:	00 
c01065a8:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01065af:	e8 14 a9 ff ff       	call   c0100ec8 <__panic>
    assert((*ptep & PTE_U) == 0);
c01065b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065b7:	8b 00                	mov    (%eax),%eax
c01065b9:	83 e0 04             	and    $0x4,%eax
c01065bc:	85 c0                	test   %eax,%eax
c01065be:	74 24                	je     c01065e4 <check_pgdir+0x52c>
c01065c0:	c7 44 24 0c 4c 67 11 	movl   $0xc011674c,0xc(%esp)
c01065c7:	c0 
c01065c8:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01065cf:	c0 
c01065d0:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c01065d7:	00 
c01065d8:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01065df:	e8 e4 a8 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, 0x0);
c01065e4:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01065e9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01065f0:	00 
c01065f1:	89 04 24             	mov    %eax,(%esp)
c01065f4:	e8 73 f8 ff ff       	call   c0105e6c <page_remove>
    assert(page_ref(p1) == 1);
c01065f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065fc:	89 04 24             	mov    %eax,(%esp)
c01065ff:	e8 c6 e8 ff ff       	call   c0104eca <page_ref>
c0106604:	83 f8 01             	cmp    $0x1,%eax
c0106607:	74 24                	je     c010662d <check_pgdir+0x575>
c0106609:	c7 44 24 0c 16 66 11 	movl   $0xc0116616,0xc(%esp)
c0106610:	c0 
c0106611:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106618:	c0 
c0106619:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c0106620:	00 
c0106621:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106628:	e8 9b a8 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c010662d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106630:	89 04 24             	mov    %eax,(%esp)
c0106633:	e8 92 e8 ff ff       	call   c0104eca <page_ref>
c0106638:	85 c0                	test   %eax,%eax
c010663a:	74 24                	je     c0106660 <check_pgdir+0x5a8>
c010663c:	c7 44 24 0c 3a 67 11 	movl   $0xc011673a,0xc(%esp)
c0106643:	c0 
c0106644:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010664b:	c0 
c010664c:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0106653:	00 
c0106654:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010665b:	e8 68 a8 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0106660:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106665:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010666c:	00 
c010666d:	89 04 24             	mov    %eax,(%esp)
c0106670:	e8 f7 f7 ff ff       	call   c0105e6c <page_remove>
    assert(page_ref(p1) == 0);
c0106675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106678:	89 04 24             	mov    %eax,(%esp)
c010667b:	e8 4a e8 ff ff       	call   c0104eca <page_ref>
c0106680:	85 c0                	test   %eax,%eax
c0106682:	74 24                	je     c01066a8 <check_pgdir+0x5f0>
c0106684:	c7 44 24 0c 61 67 11 	movl   $0xc0116761,0xc(%esp)
c010668b:	c0 
c010668c:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106693:	c0 
c0106694:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c010669b:	00 
c010669c:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01066a3:	e8 20 a8 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c01066a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066ab:	89 04 24             	mov    %eax,(%esp)
c01066ae:	e8 17 e8 ff ff       	call   c0104eca <page_ref>
c01066b3:	85 c0                	test   %eax,%eax
c01066b5:	74 24                	je     c01066db <check_pgdir+0x623>
c01066b7:	c7 44 24 0c 3a 67 11 	movl   $0xc011673a,0xc(%esp)
c01066be:	c0 
c01066bf:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01066c6:	c0 
c01066c7:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c01066ce:	00 
c01066cf:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01066d6:	e8 ed a7 ff ff       	call   c0100ec8 <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c01066db:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01066e0:	8b 00                	mov    (%eax),%eax
c01066e2:	89 04 24             	mov    %eax,(%esp)
c01066e5:	e8 f1 e6 ff ff       	call   c0104ddb <pa2page>
c01066ea:	89 04 24             	mov    %eax,(%esp)
c01066ed:	e8 d8 e7 ff ff       	call   c0104eca <page_ref>
c01066f2:	83 f8 01             	cmp    $0x1,%eax
c01066f5:	74 24                	je     c010671b <check_pgdir+0x663>
c01066f7:	c7 44 24 0c 74 67 11 	movl   $0xc0116774,0xc(%esp)
c01066fe:	c0 
c01066ff:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106706:	c0 
c0106707:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c010670e:	00 
c010670f:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106716:	e8 ad a7 ff ff       	call   c0100ec8 <__panic>
    free_page(pa2page(boot_pgdir[0]));
c010671b:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106720:	8b 00                	mov    (%eax),%eax
c0106722:	89 04 24             	mov    %eax,(%esp)
c0106725:	e8 b1 e6 ff ff       	call   c0104ddb <pa2page>
c010672a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106731:	00 
c0106732:	89 04 24             	mov    %eax,(%esp)
c0106735:	e8 00 ea ff ff       	call   c010513a <free_pages>
    boot_pgdir[0] = 0;
c010673a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010673f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106745:	c7 04 24 9a 67 11 c0 	movl   $0xc011679a,(%esp)
c010674c:	e8 14 9c ff ff       	call   c0100365 <cprintf>
}
c0106751:	c9                   	leave  
c0106752:	c3                   	ret    

c0106753 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0106753:	55                   	push   %ebp
c0106754:	89 e5                	mov    %esp,%ebp
c0106756:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106760:	e9 ca 00 00 00       	jmp    c010682f <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106765:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106768:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010676b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010676e:	c1 e8 0c             	shr    $0xc,%eax
c0106771:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106774:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106779:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010677c:	72 23                	jb     c01067a1 <check_boot_pgdir+0x4e>
c010677e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106781:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106785:	c7 44 24 08 6c 63 11 	movl   $0xc011636c,0x8(%esp)
c010678c:	c0 
c010678d:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c0106794:	00 
c0106795:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010679c:	e8 27 a7 ff ff       	call   c0100ec8 <__panic>
c01067a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067a4:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01067a9:	89 c2                	mov    %eax,%edx
c01067ab:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01067b0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01067b7:	00 
c01067b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01067bc:	89 04 24             	mov    %eax,(%esp)
c01067bf:	e8 72 f0 ff ff       	call   c0105836 <get_pte>
c01067c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01067c7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01067cb:	75 24                	jne    c01067f1 <check_boot_pgdir+0x9e>
c01067cd:	c7 44 24 0c b4 67 11 	movl   $0xc01167b4,0xc(%esp)
c01067d4:	c0 
c01067d5:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01067dc:	c0 
c01067dd:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c01067e4:	00 
c01067e5:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01067ec:	e8 d7 a6 ff ff       	call   c0100ec8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01067f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01067f4:	8b 00                	mov    (%eax),%eax
c01067f6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01067fb:	89 c2                	mov    %eax,%edx
c01067fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106800:	39 c2                	cmp    %eax,%edx
c0106802:	74 24                	je     c0106828 <check_boot_pgdir+0xd5>
c0106804:	c7 44 24 0c f1 67 11 	movl   $0xc01167f1,0xc(%esp)
c010680b:	c0 
c010680c:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106813:	c0 
c0106814:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c010681b:	00 
c010681c:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106823:	e8 a0 a6 ff ff       	call   c0100ec8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106828:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010682f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106832:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106837:	39 c2                	cmp    %eax,%edx
c0106839:	0f 82 26 ff ff ff    	jb     c0106765 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010683f:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106844:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106849:	8b 00                	mov    (%eax),%eax
c010684b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106850:	89 c2                	mov    %eax,%edx
c0106852:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106857:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010685a:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0106861:	77 23                	ja     c0106886 <check_boot_pgdir+0x133>
c0106863:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106866:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010686a:	c7 44 24 08 10 64 11 	movl   $0xc0116410,0x8(%esp)
c0106871:	c0 
c0106872:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c0106879:	00 
c010687a:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106881:	e8 42 a6 ff ff       	call   c0100ec8 <__panic>
c0106886:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106889:	05 00 00 00 40       	add    $0x40000000,%eax
c010688e:	39 c2                	cmp    %eax,%edx
c0106890:	74 24                	je     c01068b6 <check_boot_pgdir+0x163>
c0106892:	c7 44 24 0c 08 68 11 	movl   $0xc0116808,0xc(%esp)
c0106899:	c0 
c010689a:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01068a1:	c0 
c01068a2:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c01068a9:	00 
c01068aa:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01068b1:	e8 12 a6 ff ff       	call   c0100ec8 <__panic>

    assert(boot_pgdir[0] == 0);
c01068b6:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01068bb:	8b 00                	mov    (%eax),%eax
c01068bd:	85 c0                	test   %eax,%eax
c01068bf:	74 24                	je     c01068e5 <check_boot_pgdir+0x192>
c01068c1:	c7 44 24 0c 3c 68 11 	movl   $0xc011683c,0xc(%esp)
c01068c8:	c0 
c01068c9:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01068d0:	c0 
c01068d1:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c01068d8:	00 
c01068d9:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01068e0:	e8 e3 a5 ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    p = alloc_page();
c01068e5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01068ec:	e8 de e7 ff ff       	call   c01050cf <alloc_pages>
c01068f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01068f4:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01068f9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106900:	00 
c0106901:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106908:	00 
c0106909:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010690c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106910:	89 04 24             	mov    %eax,(%esp)
c0106913:	e8 98 f5 ff ff       	call   c0105eb0 <page_insert>
c0106918:	85 c0                	test   %eax,%eax
c010691a:	74 24                	je     c0106940 <check_boot_pgdir+0x1ed>
c010691c:	c7 44 24 0c 50 68 11 	movl   $0xc0116850,0xc(%esp)
c0106923:	c0 
c0106924:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010692b:	c0 
c010692c:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106933:	00 
c0106934:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010693b:	e8 88 a5 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 1);
c0106940:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106943:	89 04 24             	mov    %eax,(%esp)
c0106946:	e8 7f e5 ff ff       	call   c0104eca <page_ref>
c010694b:	83 f8 01             	cmp    $0x1,%eax
c010694e:	74 24                	je     c0106974 <check_boot_pgdir+0x221>
c0106950:	c7 44 24 0c 7e 68 11 	movl   $0xc011687e,0xc(%esp)
c0106957:	c0 
c0106958:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c010695f:	c0 
c0106960:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c0106967:	00 
c0106968:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c010696f:	e8 54 a5 ff ff       	call   c0100ec8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106974:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106979:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106980:	00 
c0106981:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106988:	00 
c0106989:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010698c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106990:	89 04 24             	mov    %eax,(%esp)
c0106993:	e8 18 f5 ff ff       	call   c0105eb0 <page_insert>
c0106998:	85 c0                	test   %eax,%eax
c010699a:	74 24                	je     c01069c0 <check_boot_pgdir+0x26d>
c010699c:	c7 44 24 0c 90 68 11 	movl   $0xc0116890,0xc(%esp)
c01069a3:	c0 
c01069a4:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01069ab:	c0 
c01069ac:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c01069b3:	00 
c01069b4:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01069bb:	e8 08 a5 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 2);
c01069c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069c3:	89 04 24             	mov    %eax,(%esp)
c01069c6:	e8 ff e4 ff ff       	call   c0104eca <page_ref>
c01069cb:	83 f8 02             	cmp    $0x2,%eax
c01069ce:	74 24                	je     c01069f4 <check_boot_pgdir+0x2a1>
c01069d0:	c7 44 24 0c c7 68 11 	movl   $0xc01168c7,0xc(%esp)
c01069d7:	c0 
c01069d8:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c01069df:	c0 
c01069e0:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c01069e7:	00 
c01069e8:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01069ef:	e8 d4 a4 ff ff       	call   c0100ec8 <__panic>

    const char *str = "ucore: Hello world!!";
c01069f4:	c7 45 dc d8 68 11 c0 	movl   $0xc01168d8,-0x24(%ebp)
    strcpy((void *)0x100, str);
c01069fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a02:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a09:	e8 4d e7 00 00       	call   c011515b <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106a0e:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106a15:	00 
c0106a16:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a1d:	e8 b2 e7 00 00       	call   c01151d4 <strcmp>
c0106a22:	85 c0                	test   %eax,%eax
c0106a24:	74 24                	je     c0106a4a <check_boot_pgdir+0x2f7>
c0106a26:	c7 44 24 0c f0 68 11 	movl   $0xc01168f0,0xc(%esp)
c0106a2d:	c0 
c0106a2e:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106a35:	c0 
c0106a36:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0106a3d:	00 
c0106a3e:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106a45:	e8 7e a4 ff ff       	call   c0100ec8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106a4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a4d:	89 04 24             	mov    %eax,(%esp)
c0106a50:	e8 cb e3 ff ff       	call   c0104e20 <page2kva>
c0106a55:	05 00 01 00 00       	add    $0x100,%eax
c0106a5a:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106a5d:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a64:	e8 73 e6 00 00       	call   c01150dc <strlen>
c0106a69:	85 c0                	test   %eax,%eax
c0106a6b:	74 24                	je     c0106a91 <check_boot_pgdir+0x33e>
c0106a6d:	c7 44 24 0c 28 69 11 	movl   $0xc0116928,0xc(%esp)
c0106a74:	c0 
c0106a75:	c7 44 24 08 59 64 11 	movl   $0xc0116459,0x8(%esp)
c0106a7c:	c0 
c0106a7d:	c7 44 24 04 ce 02 00 	movl   $0x2ce,0x4(%esp)
c0106a84:	00 
c0106a85:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c0106a8c:	e8 37 a4 ff ff       	call   c0100ec8 <__panic>

    free_page(p);
c0106a91:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a98:	00 
c0106a99:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a9c:	89 04 24             	mov    %eax,(%esp)
c0106a9f:	e8 96 e6 ff ff       	call   c010513a <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0106aa4:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106aa9:	8b 00                	mov    (%eax),%eax
c0106aab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ab0:	89 04 24             	mov    %eax,(%esp)
c0106ab3:	e8 23 e3 ff ff       	call   c0104ddb <pa2page>
c0106ab8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106abf:	00 
c0106ac0:	89 04 24             	mov    %eax,(%esp)
c0106ac3:	e8 72 e6 ff ff       	call   c010513a <free_pages>
    boot_pgdir[0] = 0;
c0106ac8:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106acd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106ad3:	c7 04 24 4c 69 11 c0 	movl   $0xc011694c,(%esp)
c0106ada:	e8 86 98 ff ff       	call   c0100365 <cprintf>
}
c0106adf:	c9                   	leave  
c0106ae0:	c3                   	ret    

c0106ae1 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106ae1:	55                   	push   %ebp
c0106ae2:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106ae4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ae7:	83 e0 04             	and    $0x4,%eax
c0106aea:	85 c0                	test   %eax,%eax
c0106aec:	74 07                	je     c0106af5 <perm2str+0x14>
c0106aee:	b8 75 00 00 00       	mov    $0x75,%eax
c0106af3:	eb 05                	jmp    c0106afa <perm2str+0x19>
c0106af5:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106afa:	a2 08 ff 14 c0       	mov    %al,0xc014ff08
    str[1] = 'r';
c0106aff:	c6 05 09 ff 14 c0 72 	movb   $0x72,0xc014ff09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b06:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b09:	83 e0 02             	and    $0x2,%eax
c0106b0c:	85 c0                	test   %eax,%eax
c0106b0e:	74 07                	je     c0106b17 <perm2str+0x36>
c0106b10:	b8 77 00 00 00       	mov    $0x77,%eax
c0106b15:	eb 05                	jmp    c0106b1c <perm2str+0x3b>
c0106b17:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b1c:	a2 0a ff 14 c0       	mov    %al,0xc014ff0a
    str[3] = '\0';
c0106b21:	c6 05 0b ff 14 c0 00 	movb   $0x0,0xc014ff0b
    return str;
c0106b28:	b8 08 ff 14 c0       	mov    $0xc014ff08,%eax
}
c0106b2d:	5d                   	pop    %ebp
c0106b2e:	c3                   	ret    

c0106b2f <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106b2f:	55                   	push   %ebp
c0106b30:	89 e5                	mov    %esp,%ebp
c0106b32:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106b35:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b38:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b3b:	72 0a                	jb     c0106b47 <get_pgtable_items+0x18>
        return 0;
c0106b3d:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b42:	e9 9c 00 00 00       	jmp    c0106be3 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b47:	eb 04                	jmp    c0106b4d <get_pgtable_items+0x1e>
        start ++;
c0106b49:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b4d:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b50:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b53:	73 18                	jae    c0106b6d <get_pgtable_items+0x3e>
c0106b55:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b58:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b5f:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b62:	01 d0                	add    %edx,%eax
c0106b64:	8b 00                	mov    (%eax),%eax
c0106b66:	83 e0 01             	and    $0x1,%eax
c0106b69:	85 c0                	test   %eax,%eax
c0106b6b:	74 dc                	je     c0106b49 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106b6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b70:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b73:	73 69                	jae    c0106bde <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106b75:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106b79:	74 08                	je     c0106b83 <get_pgtable_items+0x54>
            *left_store = start;
c0106b7b:	8b 45 18             	mov    0x18(%ebp),%eax
c0106b7e:	8b 55 10             	mov    0x10(%ebp),%edx
c0106b81:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106b83:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b86:	8d 50 01             	lea    0x1(%eax),%edx
c0106b89:	89 55 10             	mov    %edx,0x10(%ebp)
c0106b8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b93:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b96:	01 d0                	add    %edx,%eax
c0106b98:	8b 00                	mov    (%eax),%eax
c0106b9a:	83 e0 07             	and    $0x7,%eax
c0106b9d:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ba0:	eb 04                	jmp    c0106ba6 <get_pgtable_items+0x77>
            start ++;
c0106ba2:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ba6:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ba9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bac:	73 1d                	jae    c0106bcb <get_pgtable_items+0x9c>
c0106bae:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bb1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bb8:	8b 45 14             	mov    0x14(%ebp),%eax
c0106bbb:	01 d0                	add    %edx,%eax
c0106bbd:	8b 00                	mov    (%eax),%eax
c0106bbf:	83 e0 07             	and    $0x7,%eax
c0106bc2:	89 c2                	mov    %eax,%edx
c0106bc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bc7:	39 c2                	cmp    %eax,%edx
c0106bc9:	74 d7                	je     c0106ba2 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106bcb:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106bcf:	74 08                	je     c0106bd9 <get_pgtable_items+0xaa>
            *right_store = start;
c0106bd1:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106bd4:	8b 55 10             	mov    0x10(%ebp),%edx
c0106bd7:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106bd9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bdc:	eb 05                	jmp    c0106be3 <get_pgtable_items+0xb4>
    }
    return 0;
c0106bde:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106be3:	c9                   	leave  
c0106be4:	c3                   	ret    

c0106be5 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106be5:	55                   	push   %ebp
c0106be6:	89 e5                	mov    %esp,%ebp
c0106be8:	57                   	push   %edi
c0106be9:	56                   	push   %esi
c0106bea:	53                   	push   %ebx
c0106beb:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106bee:	c7 04 24 6c 69 11 c0 	movl   $0xc011696c,(%esp)
c0106bf5:	e8 6b 97 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
c0106bfa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c01:	e9 fa 00 00 00       	jmp    c0106d00 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c09:	89 04 24             	mov    %eax,(%esp)
c0106c0c:	e8 d0 fe ff ff       	call   c0106ae1 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106c11:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c14:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c17:	29 d1                	sub    %edx,%ecx
c0106c19:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c1b:	89 d6                	mov    %edx,%esi
c0106c1d:	c1 e6 16             	shl    $0x16,%esi
c0106c20:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106c23:	89 d3                	mov    %edx,%ebx
c0106c25:	c1 e3 16             	shl    $0x16,%ebx
c0106c28:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c2b:	89 d1                	mov    %edx,%ecx
c0106c2d:	c1 e1 16             	shl    $0x16,%ecx
c0106c30:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106c33:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c36:	29 d7                	sub    %edx,%edi
c0106c38:	89 fa                	mov    %edi,%edx
c0106c3a:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c3e:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c42:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c46:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c4a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c4e:	c7 04 24 9d 69 11 c0 	movl   $0xc011699d,(%esp)
c0106c55:	e8 0b 97 ff ff       	call   c0100365 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106c5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c5d:	c1 e0 0a             	shl    $0xa,%eax
c0106c60:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c63:	eb 54                	jmp    c0106cb9 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106c65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c68:	89 04 24             	mov    %eax,(%esp)
c0106c6b:	e8 71 fe ff ff       	call   c0106ae1 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106c70:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106c73:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c76:	29 d1                	sub    %edx,%ecx
c0106c78:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106c7a:	89 d6                	mov    %edx,%esi
c0106c7c:	c1 e6 0c             	shl    $0xc,%esi
c0106c7f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106c82:	89 d3                	mov    %edx,%ebx
c0106c84:	c1 e3 0c             	shl    $0xc,%ebx
c0106c87:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c8a:	c1 e2 0c             	shl    $0xc,%edx
c0106c8d:	89 d1                	mov    %edx,%ecx
c0106c8f:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106c92:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c95:	29 d7                	sub    %edx,%edi
c0106c97:	89 fa                	mov    %edi,%edx
c0106c99:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c9d:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106ca1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106ca5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106ca9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106cad:	c7 04 24 bc 69 11 c0 	movl   $0xc01169bc,(%esp)
c0106cb4:	e8 ac 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106cb9:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106cbe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106cc1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106cc4:	89 ce                	mov    %ecx,%esi
c0106cc6:	c1 e6 0a             	shl    $0xa,%esi
c0106cc9:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106ccc:	89 cb                	mov    %ecx,%ebx
c0106cce:	c1 e3 0a             	shl    $0xa,%ebx
c0106cd1:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106cd4:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106cd8:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106cdb:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106cdf:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ce3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106ce7:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106ceb:	89 1c 24             	mov    %ebx,(%esp)
c0106cee:	e8 3c fe ff ff       	call   c0106b2f <get_pgtable_items>
c0106cf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106cf6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106cfa:	0f 85 65 ff ff ff    	jne    c0106c65 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d00:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106d05:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d08:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d0b:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d0f:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106d12:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d16:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d1e:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106d25:	00 
c0106d26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106d2d:	e8 fd fd ff ff       	call   c0106b2f <get_pgtable_items>
c0106d32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d39:	0f 85 c7 fe ff ff    	jne    c0106c06 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106d3f:	c7 04 24 e0 69 11 c0 	movl   $0xc01169e0,(%esp)
c0106d46:	e8 1a 96 ff ff       	call   c0100365 <cprintf>
}
c0106d4b:	83 c4 4c             	add    $0x4c,%esp
c0106d4e:	5b                   	pop    %ebx
c0106d4f:	5e                   	pop    %esi
c0106d50:	5f                   	pop    %edi
c0106d51:	5d                   	pop    %ebp
c0106d52:	c3                   	ret    

c0106d53 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106d53:	55                   	push   %ebp
c0106d54:	89 e5                	mov    %esp,%ebp
c0106d56:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106d59:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d5c:	c1 e8 0c             	shr    $0xc,%eax
c0106d5f:	89 c2                	mov    %eax,%edx
c0106d61:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106d66:	39 c2                	cmp    %eax,%edx
c0106d68:	72 1c                	jb     c0106d86 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106d6a:	c7 44 24 08 14 6a 11 	movl   $0xc0116a14,0x8(%esp)
c0106d71:	c0 
c0106d72:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106d79:	00 
c0106d7a:	c7 04 24 33 6a 11 c0 	movl   $0xc0116a33,(%esp)
c0106d81:	e8 42 a1 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0106d86:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0106d8b:	8b 55 08             	mov    0x8(%ebp),%edx
c0106d8e:	c1 ea 0c             	shr    $0xc,%edx
c0106d91:	c1 e2 05             	shl    $0x5,%edx
c0106d94:	01 d0                	add    %edx,%eax
}
c0106d96:	c9                   	leave  
c0106d97:	c3                   	ret    

c0106d98 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106d98:	55                   	push   %ebp
c0106d99:	89 e5                	mov    %esp,%ebp
c0106d9b:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106d9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106da1:	83 e0 01             	and    $0x1,%eax
c0106da4:	85 c0                	test   %eax,%eax
c0106da6:	75 1c                	jne    c0106dc4 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106da8:	c7 44 24 08 44 6a 11 	movl   $0xc0116a44,0x8(%esp)
c0106daf:	c0 
c0106db0:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106db7:	00 
c0106db8:	c7 04 24 33 6a 11 c0 	movl   $0xc0116a33,(%esp)
c0106dbf:	e8 04 a1 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106dc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dc7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106dcc:	89 04 24             	mov    %eax,(%esp)
c0106dcf:	e8 7f ff ff ff       	call   c0106d53 <pa2page>
}
c0106dd4:	c9                   	leave  
c0106dd5:	c3                   	ret    

c0106dd6 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106dd6:	55                   	push   %ebp
c0106dd7:	89 e5                	mov    %esp,%ebp
c0106dd9:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106ddc:	e8 c4 7f 00 00       	call   c010eda5 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106de1:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106de6:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106deb:	76 0c                	jbe    c0106df9 <swap_init+0x23>
c0106ded:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106df2:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106df7:	76 25                	jbe    c0106e1e <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106df9:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106dfe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e02:	c7 44 24 08 65 6a 11 	movl   $0xc0116a65,0x8(%esp)
c0106e09:	c0 
c0106e0a:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106e11:	00 
c0106e12:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0106e19:	e8 aa a0 ff ff       	call   c0100ec8 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106e1e:	c7 05 14 ff 14 c0 60 	movl   $0xc014ea60,0xc014ff14
c0106e25:	ea 14 c0 
     int r = sm->init();
c0106e28:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e2d:	8b 40 04             	mov    0x4(%eax),%eax
c0106e30:	ff d0                	call   *%eax
c0106e32:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106e35:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e39:	75 26                	jne    c0106e61 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106e3b:	c7 05 0c ff 14 c0 01 	movl   $0x1,0xc014ff0c
c0106e42:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106e45:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e4a:	8b 00                	mov    (%eax),%eax
c0106e4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e50:	c7 04 24 8f 6a 11 c0 	movl   $0xc0116a8f,(%esp)
c0106e57:	e8 09 95 ff ff       	call   c0100365 <cprintf>
          check_swap();
c0106e5c:	e8 a4 04 00 00       	call   c0107305 <check_swap>
     }

     return r;
c0106e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106e64:	c9                   	leave  
c0106e65:	c3                   	ret    

c0106e66 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106e66:	55                   	push   %ebp
c0106e67:	89 e5                	mov    %esp,%ebp
c0106e69:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106e6c:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e71:	8b 40 08             	mov    0x8(%eax),%eax
c0106e74:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e77:	89 14 24             	mov    %edx,(%esp)
c0106e7a:	ff d0                	call   *%eax
}
c0106e7c:	c9                   	leave  
c0106e7d:	c3                   	ret    

c0106e7e <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106e7e:	55                   	push   %ebp
c0106e7f:	89 e5                	mov    %esp,%ebp
c0106e81:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106e84:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e89:	8b 40 0c             	mov    0xc(%eax),%eax
c0106e8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e8f:	89 14 24             	mov    %edx,(%esp)
c0106e92:	ff d0                	call   *%eax
}
c0106e94:	c9                   	leave  
c0106e95:	c3                   	ret    

c0106e96 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106e96:	55                   	push   %ebp
c0106e97:	89 e5                	mov    %esp,%ebp
c0106e99:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106e9c:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ea1:	8b 40 10             	mov    0x10(%eax),%eax
c0106ea4:	8b 55 14             	mov    0x14(%ebp),%edx
c0106ea7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106eab:	8b 55 10             	mov    0x10(%ebp),%edx
c0106eae:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106eb2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106eb5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106eb9:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ebc:	89 14 24             	mov    %edx,(%esp)
c0106ebf:	ff d0                	call   *%eax
}
c0106ec1:	c9                   	leave  
c0106ec2:	c3                   	ret    

c0106ec3 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106ec3:	55                   	push   %ebp
c0106ec4:	89 e5                	mov    %esp,%ebp
c0106ec6:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106ec9:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ece:	8b 40 14             	mov    0x14(%eax),%eax
c0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106ed4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ed8:	8b 55 08             	mov    0x8(%ebp),%edx
c0106edb:	89 14 24             	mov    %edx,(%esp)
c0106ede:	ff d0                	call   *%eax
}
c0106ee0:	c9                   	leave  
c0106ee1:	c3                   	ret    

c0106ee2 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106ee2:	55                   	push   %ebp
c0106ee3:	89 e5                	mov    %esp,%ebp
c0106ee5:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106ee8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106eef:	e9 5a 01 00 00       	jmp    c010704e <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106ef4:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ef9:	8b 40 18             	mov    0x18(%eax),%eax
c0106efc:	8b 55 10             	mov    0x10(%ebp),%edx
c0106eff:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f03:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106f06:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f0d:	89 14 24             	mov    %edx,(%esp)
c0106f10:	ff d0                	call   *%eax
c0106f12:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106f15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f19:	74 18                	je     c0106f33 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f22:	c7 04 24 a4 6a 11 c0 	movl   $0xc0116aa4,(%esp)
c0106f29:	e8 37 94 ff ff       	call   c0100365 <cprintf>
c0106f2e:	e9 27 01 00 00       	jmp    c010705a <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106f33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f36:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f39:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106f3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f3f:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f42:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106f49:	00 
c0106f4a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f4d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f51:	89 04 24             	mov    %eax,(%esp)
c0106f54:	e8 dd e8 ff ff       	call   c0105836 <get_pte>
c0106f59:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106f5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106f5f:	8b 00                	mov    (%eax),%eax
c0106f61:	83 e0 01             	and    $0x1,%eax
c0106f64:	85 c0                	test   %eax,%eax
c0106f66:	75 24                	jne    c0106f8c <swap_out+0xaa>
c0106f68:	c7 44 24 0c d1 6a 11 	movl   $0xc0116ad1,0xc(%esp)
c0106f6f:	c0 
c0106f70:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0106f77:	c0 
c0106f78:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106f7f:	00 
c0106f80:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0106f87:	e8 3c 9f ff ff       	call   c0100ec8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106f8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106f92:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106f95:	c1 ea 0c             	shr    $0xc,%edx
c0106f98:	83 c2 01             	add    $0x1,%edx
c0106f9b:	c1 e2 08             	shl    $0x8,%edx
c0106f9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fa2:	89 14 24             	mov    %edx,(%esp)
c0106fa5:	e8 b5 7e 00 00       	call   c010ee5f <swapfs_write>
c0106faa:	85 c0                	test   %eax,%eax
c0106fac:	74 34                	je     c0106fe2 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106fae:	c7 04 24 fb 6a 11 c0 	movl   $0xc0116afb,(%esp)
c0106fb5:	e8 ab 93 ff ff       	call   c0100365 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106fba:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106fbf:	8b 40 10             	mov    0x10(%eax),%eax
c0106fc2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106fc5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106fcc:	00 
c0106fcd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106fd1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fd4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fd8:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fdb:	89 14 24             	mov    %edx,(%esp)
c0106fde:	ff d0                	call   *%eax
c0106fe0:	eb 68                	jmp    c010704a <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106fe2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fe5:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106fe8:	c1 e8 0c             	shr    $0xc,%eax
c0106feb:	83 c0 01             	add    $0x1,%eax
c0106fee:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106ff2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ff5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ffc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107000:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0107007:	e8 59 93 ff ff       	call   c0100365 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010700c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010700f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107012:	c1 e8 0c             	shr    $0xc,%eax
c0107015:	83 c0 01             	add    $0x1,%eax
c0107018:	c1 e0 08             	shl    $0x8,%eax
c010701b:	89 c2                	mov    %eax,%edx
c010701d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107020:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0107022:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107025:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010702c:	00 
c010702d:	89 04 24             	mov    %eax,(%esp)
c0107030:	e8 05 e1 ff ff       	call   c010513a <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107035:	8b 45 08             	mov    0x8(%ebp),%eax
c0107038:	8b 40 0c             	mov    0xc(%eax),%eax
c010703b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010703e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107042:	89 04 24             	mov    %eax,(%esp)
c0107045:	e8 1f ef ff ff       	call   c0105f69 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010704a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010704e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107051:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107054:	0f 85 9a fe ff ff    	jne    c0106ef4 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010705a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010705d:	c9                   	leave  
c010705e:	c3                   	ret    

c010705f <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010705f:	55                   	push   %ebp
c0107060:	89 e5                	mov    %esp,%ebp
c0107062:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0107065:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010706c:	e8 5e e0 ff ff       	call   c01050cf <alloc_pages>
c0107071:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0107074:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107078:	75 24                	jne    c010709e <swap_in+0x3f>
c010707a:	c7 44 24 0c 54 6b 11 	movl   $0xc0116b54,0xc(%esp)
c0107081:	c0 
c0107082:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107089:	c0 
c010708a:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0107091:	00 
c0107092:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107099:	e8 2a 9e ff ff       	call   c0100ec8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010709e:	8b 45 08             	mov    0x8(%ebp),%eax
c01070a1:	8b 40 0c             	mov    0xc(%eax),%eax
c01070a4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01070ab:	00 
c01070ac:	8b 55 0c             	mov    0xc(%ebp),%edx
c01070af:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070b3:	89 04 24             	mov    %eax,(%esp)
c01070b6:	e8 7b e7 ff ff       	call   c0105836 <get_pte>
c01070bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01070be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070c1:	8b 00                	mov    (%eax),%eax
c01070c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01070c6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070ca:	89 04 24             	mov    %eax,(%esp)
c01070cd:	e8 1b 7d 00 00       	call   c010eded <swapfs_read>
c01070d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01070d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01070d9:	74 2a                	je     c0107105 <swap_in+0xa6>
     {
        assert(r!=0);
c01070db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01070df:	75 24                	jne    c0107105 <swap_in+0xa6>
c01070e1:	c7 44 24 0c 61 6b 11 	movl   $0xc0116b61,0xc(%esp)
c01070e8:	c0 
c01070e9:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01070f0:	c0 
c01070f1:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01070f8:	00 
c01070f9:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107100:	e8 c3 9d ff ff       	call   c0100ec8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107105:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107108:	8b 00                	mov    (%eax),%eax
c010710a:	c1 e8 08             	shr    $0x8,%eax
c010710d:	89 c2                	mov    %eax,%edx
c010710f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107112:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107116:	89 54 24 04          	mov    %edx,0x4(%esp)
c010711a:	c7 04 24 68 6b 11 c0 	movl   $0xc0116b68,(%esp)
c0107121:	e8 3f 92 ff ff       	call   c0100365 <cprintf>
     *ptr_result=result;
c0107126:	8b 45 10             	mov    0x10(%ebp),%eax
c0107129:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010712c:	89 10                	mov    %edx,(%eax)
     return 0;
c010712e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107133:	c9                   	leave  
c0107134:	c3                   	ret    

c0107135 <check_content_set>:



static inline void
check_content_set(void)
{
c0107135:	55                   	push   %ebp
c0107136:	89 e5                	mov    %esp,%ebp
c0107138:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010713b:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107140:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107143:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107148:	83 f8 01             	cmp    $0x1,%eax
c010714b:	74 24                	je     c0107171 <check_content_set+0x3c>
c010714d:	c7 44 24 0c a6 6b 11 	movl   $0xc0116ba6,0xc(%esp)
c0107154:	c0 
c0107155:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c010715c:	c0 
c010715d:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0107164:	00 
c0107165:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c010716c:	e8 57 9d ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107171:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107176:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107179:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010717e:	83 f8 01             	cmp    $0x1,%eax
c0107181:	74 24                	je     c01071a7 <check_content_set+0x72>
c0107183:	c7 44 24 0c a6 6b 11 	movl   $0xc0116ba6,0xc(%esp)
c010718a:	c0 
c010718b:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107192:	c0 
c0107193:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010719a:	00 
c010719b:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01071a2:	e8 21 9d ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01071a7:	b8 00 20 00 00       	mov    $0x2000,%eax
c01071ac:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01071af:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01071b4:	83 f8 02             	cmp    $0x2,%eax
c01071b7:	74 24                	je     c01071dd <check_content_set+0xa8>
c01071b9:	c7 44 24 0c b5 6b 11 	movl   $0xc0116bb5,0xc(%esp)
c01071c0:	c0 
c01071c1:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01071c8:	c0 
c01071c9:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01071d0:	00 
c01071d1:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01071d8:	e8 eb 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01071dd:	b8 10 20 00 00       	mov    $0x2010,%eax
c01071e2:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01071e5:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01071ea:	83 f8 02             	cmp    $0x2,%eax
c01071ed:	74 24                	je     c0107213 <check_content_set+0xde>
c01071ef:	c7 44 24 0c b5 6b 11 	movl   $0xc0116bb5,0xc(%esp)
c01071f6:	c0 
c01071f7:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01071fe:	c0 
c01071ff:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107206:	00 
c0107207:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c010720e:	e8 b5 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107213:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107218:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010721b:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107220:	83 f8 03             	cmp    $0x3,%eax
c0107223:	74 24                	je     c0107249 <check_content_set+0x114>
c0107225:	c7 44 24 0c c4 6b 11 	movl   $0xc0116bc4,0xc(%esp)
c010722c:	c0 
c010722d:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107234:	c0 
c0107235:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010723c:	00 
c010723d:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107244:	e8 7f 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107249:	b8 10 30 00 00       	mov    $0x3010,%eax
c010724e:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107251:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107256:	83 f8 03             	cmp    $0x3,%eax
c0107259:	74 24                	je     c010727f <check_content_set+0x14a>
c010725b:	c7 44 24 0c c4 6b 11 	movl   $0xc0116bc4,0xc(%esp)
c0107262:	c0 
c0107263:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c010726a:	c0 
c010726b:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0107272:	00 
c0107273:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c010727a:	e8 49 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c010727f:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107284:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107287:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010728c:	83 f8 04             	cmp    $0x4,%eax
c010728f:	74 24                	je     c01072b5 <check_content_set+0x180>
c0107291:	c7 44 24 0c d3 6b 11 	movl   $0xc0116bd3,0xc(%esp)
c0107298:	c0 
c0107299:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01072a0:	c0 
c01072a1:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01072a8:	00 
c01072a9:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01072b0:	e8 13 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01072b5:	b8 10 40 00 00       	mov    $0x4010,%eax
c01072ba:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072bd:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01072c2:	83 f8 04             	cmp    $0x4,%eax
c01072c5:	74 24                	je     c01072eb <check_content_set+0x1b6>
c01072c7:	c7 44 24 0c d3 6b 11 	movl   $0xc0116bd3,0xc(%esp)
c01072ce:	c0 
c01072cf:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01072d6:	c0 
c01072d7:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01072de:	00 
c01072df:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01072e6:	e8 dd 9b ff ff       	call   c0100ec8 <__panic>
}
c01072eb:	c9                   	leave  
c01072ec:	c3                   	ret    

c01072ed <check_content_access>:

static inline int
check_content_access(void)
{
c01072ed:	55                   	push   %ebp
c01072ee:	89 e5                	mov    %esp,%ebp
c01072f0:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01072f3:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c01072f8:	8b 40 1c             	mov    0x1c(%eax),%eax
c01072fb:	ff d0                	call   *%eax
c01072fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107300:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107303:	c9                   	leave  
c0107304:	c3                   	ret    

c0107305 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107305:	55                   	push   %ebp
c0107306:	89 e5                	mov    %esp,%ebp
c0107308:	53                   	push   %ebx
c0107309:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010730c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107313:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c010731a:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107321:	eb 6b                	jmp    c010738e <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107323:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107326:	83 e8 0c             	sub    $0xc,%eax
c0107329:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010732c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010732f:	83 c0 04             	add    $0x4,%eax
c0107332:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107339:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010733c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010733f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107342:	0f a3 10             	bt     %edx,(%eax)
c0107345:	19 c0                	sbb    %eax,%eax
c0107347:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c010734a:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010734e:	0f 95 c0             	setne  %al
c0107351:	0f b6 c0             	movzbl %al,%eax
c0107354:	85 c0                	test   %eax,%eax
c0107356:	75 24                	jne    c010737c <check_swap+0x77>
c0107358:	c7 44 24 0c e2 6b 11 	movl   $0xc0116be2,0xc(%esp)
c010735f:	c0 
c0107360:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107367:	c0 
c0107368:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c010736f:	00 
c0107370:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107377:	e8 4c 9b ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c010737c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107380:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107383:	8b 50 08             	mov    0x8(%eax),%edx
c0107386:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107389:	01 d0                	add    %edx,%eax
c010738b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010738e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107391:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107394:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107397:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010739a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010739d:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c01073a4:	0f 85 79 ff ff ff    	jne    c0107323 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01073aa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01073ad:	e8 ba dd ff ff       	call   c010516c <nr_free_pages>
c01073b2:	39 c3                	cmp    %eax,%ebx
c01073b4:	74 24                	je     c01073da <check_swap+0xd5>
c01073b6:	c7 44 24 0c f2 6b 11 	movl   $0xc0116bf2,0xc(%esp)
c01073bd:	c0 
c01073be:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01073c5:	c0 
c01073c6:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01073cd:	00 
c01073ce:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01073d5:	e8 ee 9a ff ff       	call   c0100ec8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01073da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01073e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01073e8:	c7 04 24 0c 6c 11 c0 	movl   $0xc0116c0c,(%esp)
c01073ef:	e8 71 8f ff ff       	call   c0100365 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01073f4:	e8 6a 0a 00 00       	call   c0107e63 <mm_create>
c01073f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01073fc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107400:	75 24                	jne    c0107426 <check_swap+0x121>
c0107402:	c7 44 24 0c 32 6c 11 	movl   $0xc0116c32,0xc(%esp)
c0107409:	c0 
c010740a:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107411:	c0 
c0107412:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107419:	00 
c010741a:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107421:	e8 a2 9a ff ff       	call   c0100ec8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107426:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c010742b:	85 c0                	test   %eax,%eax
c010742d:	74 24                	je     c0107453 <check_swap+0x14e>
c010742f:	c7 44 24 0c 3d 6c 11 	movl   $0xc0116c3d,0xc(%esp)
c0107436:	c0 
c0107437:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c010743e:	c0 
c010743f:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107446:	00 
c0107447:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c010744e:	e8 75 9a ff ff       	call   c0100ec8 <__panic>

     check_mm_struct = mm;
c0107453:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107456:	a3 0c 31 15 c0       	mov    %eax,0xc015310c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010745b:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c0107461:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107464:	89 50 0c             	mov    %edx,0xc(%eax)
c0107467:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010746a:	8b 40 0c             	mov    0xc(%eax),%eax
c010746d:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0107470:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107473:	8b 00                	mov    (%eax),%eax
c0107475:	85 c0                	test   %eax,%eax
c0107477:	74 24                	je     c010749d <check_swap+0x198>
c0107479:	c7 44 24 0c 55 6c 11 	movl   $0xc0116c55,0xc(%esp)
c0107480:	c0 
c0107481:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107488:	c0 
c0107489:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107490:	00 
c0107491:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107498:	e8 2b 9a ff ff       	call   c0100ec8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c010749d:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01074a4:	00 
c01074a5:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01074ac:	00 
c01074ad:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01074b4:	e8 4f 0a 00 00       	call   c0107f08 <vma_create>
c01074b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01074bc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01074c0:	75 24                	jne    c01074e6 <check_swap+0x1e1>
c01074c2:	c7 44 24 0c 63 6c 11 	movl   $0xc0116c63,0xc(%esp)
c01074c9:	c0 
c01074ca:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01074d1:	c0 
c01074d2:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01074d9:	00 
c01074da:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01074e1:	e8 e2 99 ff ff       	call   c0100ec8 <__panic>

     insert_vma_struct(mm, vma);
c01074e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01074e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074f0:	89 04 24             	mov    %eax,(%esp)
c01074f3:	e8 a0 0b 00 00       	call   c0108098 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01074f8:	c7 04 24 70 6c 11 c0 	movl   $0xc0116c70,(%esp)
c01074ff:	e8 61 8e ff ff       	call   c0100365 <cprintf>
     pte_t *temp_ptep=NULL;
c0107504:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010750b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010750e:	8b 40 0c             	mov    0xc(%eax),%eax
c0107511:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107518:	00 
c0107519:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107520:	00 
c0107521:	89 04 24             	mov    %eax,(%esp)
c0107524:	e8 0d e3 ff ff       	call   c0105836 <get_pte>
c0107529:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010752c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0107530:	75 24                	jne    c0107556 <check_swap+0x251>
c0107532:	c7 44 24 0c a4 6c 11 	movl   $0xc0116ca4,0xc(%esp)
c0107539:	c0 
c010753a:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107541:	c0 
c0107542:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107549:	00 
c010754a:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107551:	e8 72 99 ff ff       	call   c0100ec8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107556:	c7 04 24 b8 6c 11 c0 	movl   $0xc0116cb8,(%esp)
c010755d:	e8 03 8e ff ff       	call   c0100365 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107562:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107569:	e9 a3 00 00 00       	jmp    c0107611 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c010756e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107575:	e8 55 db ff ff       	call   c01050cf <alloc_pages>
c010757a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010757d:	89 04 95 40 30 15 c0 	mov    %eax,-0x3feacfc0(,%edx,4)
          assert(check_rp[i] != NULL );
c0107584:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107587:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c010758e:	85 c0                	test   %eax,%eax
c0107590:	75 24                	jne    c01075b6 <check_swap+0x2b1>
c0107592:	c7 44 24 0c dc 6c 11 	movl   $0xc0116cdc,0xc(%esp)
c0107599:	c0 
c010759a:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01075a1:	c0 
c01075a2:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01075a9:	00 
c01075aa:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01075b1:	e8 12 99 ff ff       	call   c0100ec8 <__panic>
          assert(!PageProperty(check_rp[i]));
c01075b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075b9:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01075c0:	83 c0 04             	add    $0x4,%eax
c01075c3:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01075ca:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01075cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01075d0:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01075d3:	0f a3 10             	bt     %edx,(%eax)
c01075d6:	19 c0                	sbb    %eax,%eax
c01075d8:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01075db:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c01075df:	0f 95 c0             	setne  %al
c01075e2:	0f b6 c0             	movzbl %al,%eax
c01075e5:	85 c0                	test   %eax,%eax
c01075e7:	74 24                	je     c010760d <check_swap+0x308>
c01075e9:	c7 44 24 0c f0 6c 11 	movl   $0xc0116cf0,0xc(%esp)
c01075f0:	c0 
c01075f1:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01075f8:	c0 
c01075f9:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0107600:	00 
c0107601:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107608:	e8 bb 98 ff ff       	call   c0100ec8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010760d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107611:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107615:	0f 8e 53 ff ff ff    	jle    c010756e <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010761b:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0107620:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0107626:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107629:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010762c:	c7 45 a8 14 30 15 c0 	movl   $0xc0153014,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107633:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107636:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107639:	89 50 04             	mov    %edx,0x4(%eax)
c010763c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010763f:	8b 50 04             	mov    0x4(%eax),%edx
c0107642:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107645:	89 10                	mov    %edx,(%eax)
c0107647:	c7 45 a4 14 30 15 c0 	movl   $0xc0153014,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010764e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107651:	8b 40 04             	mov    0x4(%eax),%eax
c0107654:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107657:	0f 94 c0             	sete   %al
c010765a:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010765d:	85 c0                	test   %eax,%eax
c010765f:	75 24                	jne    c0107685 <check_swap+0x380>
c0107661:	c7 44 24 0c 0b 6d 11 	movl   $0xc0116d0b,0xc(%esp)
c0107668:	c0 
c0107669:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107670:	c0 
c0107671:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107678:	00 
c0107679:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107680:	e8 43 98 ff ff       	call   c0100ec8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107685:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010768a:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c010768d:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0107694:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107697:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010769e:	eb 1e                	jmp    c01076be <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01076a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076a3:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01076aa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01076b1:	00 
c01076b2:	89 04 24             	mov    %eax,(%esp)
c01076b5:	e8 80 da ff ff       	call   c010513a <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076ba:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076be:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076c2:	7e dc                	jle    c01076a0 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01076c4:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01076c9:	83 f8 04             	cmp    $0x4,%eax
c01076cc:	74 24                	je     c01076f2 <check_swap+0x3ed>
c01076ce:	c7 44 24 0c 24 6d 11 	movl   $0xc0116d24,0xc(%esp)
c01076d5:	c0 
c01076d6:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01076dd:	c0 
c01076de:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01076e5:	00 
c01076e6:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01076ed:	e8 d6 97 ff ff       	call   c0100ec8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01076f2:	c7 04 24 48 6d 11 c0 	movl   $0xc0116d48,(%esp)
c01076f9:	e8 67 8c ff ff       	call   c0100365 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01076fe:	c7 05 18 ff 14 c0 00 	movl   $0x0,0xc014ff18
c0107705:	00 00 00 
     
     check_content_set();
c0107708:	e8 28 fa ff ff       	call   c0107135 <check_content_set>
     assert( nr_free == 0);         
c010770d:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0107712:	85 c0                	test   %eax,%eax
c0107714:	74 24                	je     c010773a <check_swap+0x435>
c0107716:	c7 44 24 0c 6f 6d 11 	movl   $0xc0116d6f,0xc(%esp)
c010771d:	c0 
c010771e:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107725:	c0 
c0107726:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010772d:	00 
c010772e:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107735:	e8 8e 97 ff ff       	call   c0100ec8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010773a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107741:	eb 26                	jmp    c0107769 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107743:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107746:	c7 04 85 60 30 15 c0 	movl   $0xffffffff,-0x3feacfa0(,%eax,4)
c010774d:	ff ff ff ff 
c0107751:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107754:	8b 14 85 60 30 15 c0 	mov    -0x3feacfa0(,%eax,4),%edx
c010775b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010775e:	89 14 85 a0 30 15 c0 	mov    %edx,-0x3feacf60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107765:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107769:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c010776d:	7e d4                	jle    c0107743 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010776f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107776:	e9 eb 00 00 00       	jmp    c0107866 <check_swap+0x561>
         check_ptep[i]=0;
c010777b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010777e:	c7 04 85 f4 30 15 c0 	movl   $0x0,-0x3feacf0c(,%eax,4)
c0107785:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107789:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010778c:	83 c0 01             	add    $0x1,%eax
c010778f:	c1 e0 0c             	shl    $0xc,%eax
c0107792:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107799:	00 
c010779a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010779e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01077a1:	89 04 24             	mov    %eax,(%esp)
c01077a4:	e8 8d e0 ff ff       	call   c0105836 <get_pte>
c01077a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01077ac:	89 04 95 f4 30 15 c0 	mov    %eax,-0x3feacf0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01077b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077b6:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c01077bd:	85 c0                	test   %eax,%eax
c01077bf:	75 24                	jne    c01077e5 <check_swap+0x4e0>
c01077c1:	c7 44 24 0c 7c 6d 11 	movl   $0xc0116d7c,0xc(%esp)
c01077c8:	c0 
c01077c9:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c01077d0:	c0 
c01077d1:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01077d8:	00 
c01077d9:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01077e0:	e8 e3 96 ff ff       	call   c0100ec8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01077e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077e8:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c01077ef:	8b 00                	mov    (%eax),%eax
c01077f1:	89 04 24             	mov    %eax,(%esp)
c01077f4:	e8 9f f5 ff ff       	call   c0106d98 <pte2page>
c01077f9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01077fc:	8b 14 95 40 30 15 c0 	mov    -0x3feacfc0(,%edx,4),%edx
c0107803:	39 d0                	cmp    %edx,%eax
c0107805:	74 24                	je     c010782b <check_swap+0x526>
c0107807:	c7 44 24 0c 94 6d 11 	movl   $0xc0116d94,0xc(%esp)
c010780e:	c0 
c010780f:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107816:	c0 
c0107817:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010781e:	00 
c010781f:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0107826:	e8 9d 96 ff ff       	call   c0100ec8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c010782b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010782e:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c0107835:	8b 00                	mov    (%eax),%eax
c0107837:	83 e0 01             	and    $0x1,%eax
c010783a:	85 c0                	test   %eax,%eax
c010783c:	75 24                	jne    c0107862 <check_swap+0x55d>
c010783e:	c7 44 24 0c bc 6d 11 	movl   $0xc0116dbc,0xc(%esp)
c0107845:	c0 
c0107846:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c010784d:	c0 
c010784e:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107855:	00 
c0107856:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c010785d:	e8 66 96 ff ff       	call   c0100ec8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107862:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107866:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010786a:	0f 8e 0b ff ff ff    	jle    c010777b <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107870:	c7 04 24 d8 6d 11 c0 	movl   $0xc0116dd8,(%esp)
c0107877:	e8 e9 8a ff ff       	call   c0100365 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c010787c:	e8 6c fa ff ff       	call   c01072ed <check_content_access>
c0107881:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0107884:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107888:	74 24                	je     c01078ae <check_swap+0x5a9>
c010788a:	c7 44 24 0c fe 6d 11 	movl   $0xc0116dfe,0xc(%esp)
c0107891:	c0 
c0107892:	c7 44 24 08 e6 6a 11 	movl   $0xc0116ae6,0x8(%esp)
c0107899:	c0 
c010789a:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01078a1:	00 
c01078a2:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c01078a9:	e8 1a 96 ff ff       	call   c0100ec8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078b5:	eb 1e                	jmp    c01078d5 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01078b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078ba:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01078c1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01078c8:	00 
c01078c9:	89 04 24             	mov    %eax,(%esp)
c01078cc:	e8 69 d8 ff ff       	call   c010513a <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078d1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078d5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078d9:	7e dc                	jle    c01078b7 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c01078db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01078de:	8b 00                	mov    (%eax),%eax
c01078e0:	89 04 24             	mov    %eax,(%esp)
c01078e3:	e8 6b f4 ff ff       	call   c0106d53 <pa2page>
c01078e8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01078ef:	00 
c01078f0:	89 04 24             	mov    %eax,(%esp)
c01078f3:	e8 42 d8 ff ff       	call   c010513a <free_pages>
     pgdir[0] = 0;
c01078f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01078fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107901:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107904:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c010790b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010790e:	89 04 24             	mov    %eax,(%esp)
c0107911:	e8 b2 08 00 00       	call   c01081c8 <mm_destroy>
     check_mm_struct = NULL;
c0107916:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c010791d:	00 00 00 
     
     nr_free = nr_free_store;
c0107920:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107923:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
     free_list = free_list_store;
c0107928:	8b 45 98             	mov    -0x68(%ebp),%eax
c010792b:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010792e:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c0107933:	89 15 18 30 15 c0    	mov    %edx,0xc0153018

     
     le = &free_list;
c0107939:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107940:	eb 1d                	jmp    c010795f <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0107942:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107945:	83 e8 0c             	sub    $0xc,%eax
c0107948:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c010794b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010794f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107952:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107955:	8b 40 08             	mov    0x8(%eax),%eax
c0107958:	29 c2                	sub    %eax,%edx
c010795a:	89 d0                	mov    %edx,%eax
c010795c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010795f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107962:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107965:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107968:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010796b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010796e:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c0107975:	75 cb                	jne    c0107942 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107977:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010797a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010797e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107981:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107985:	c7 04 24 05 6e 11 c0 	movl   $0xc0116e05,(%esp)
c010798c:	e8 d4 89 ff ff       	call   c0100365 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107991:	c7 04 24 1f 6e 11 c0 	movl   $0xc0116e1f,(%esp)
c0107998:	e8 c8 89 ff ff       	call   c0100365 <cprintf>
}
c010799d:	83 c4 74             	add    $0x74,%esp
c01079a0:	5b                   	pop    %ebx
c01079a1:	5d                   	pop    %ebp
c01079a2:	c3                   	ret    

c01079a3 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01079a3:	55                   	push   %ebp
c01079a4:	89 e5                	mov    %esp,%ebp
c01079a6:	83 ec 10             	sub    $0x10,%esp
c01079a9:	c7 45 fc 04 31 15 c0 	movl   $0xc0153104,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01079b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079b3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01079b6:	89 50 04             	mov    %edx,0x4(%eax)
c01079b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079bc:	8b 50 04             	mov    0x4(%eax),%edx
c01079bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079c2:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01079c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01079c7:	c7 40 14 04 31 15 c0 	movl   $0xc0153104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01079ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01079d3:	c9                   	leave  
c01079d4:	c3                   	ret    

c01079d5 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01079d5:	55                   	push   %ebp
c01079d6:	89 e5                	mov    %esp,%ebp
c01079d8:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01079db:	8b 45 08             	mov    0x8(%ebp),%eax
c01079de:	8b 40 14             	mov    0x14(%eax),%eax
c01079e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01079e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01079e7:	83 c0 14             	add    $0x14,%eax
c01079ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c01079ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01079f1:	74 06                	je     c01079f9 <_fifo_map_swappable+0x24>
c01079f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01079f7:	75 24                	jne    c0107a1d <_fifo_map_swappable+0x48>
c01079f9:	c7 44 24 0c 38 6e 11 	movl   $0xc0116e38,0xc(%esp)
c0107a00:	c0 
c0107a01:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107a08:	c0 
c0107a09:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107a10:	00 
c0107a11:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107a18:	e8 ab 94 ff ff       	call   c0100ec8 <__panic>
c0107a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a26:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a2c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107a2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a32:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a38:	8b 40 04             	mov    0x4(%eax),%eax
c0107a3b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a3e:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107a41:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a44:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107a47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107a4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a4d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a50:	89 10                	mov    %edx,(%eax)
c0107a52:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a55:	8b 10                	mov    (%eax),%edx
c0107a57:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107a5a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107a5d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a60:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107a63:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107a66:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a69:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107a6c:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107a6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a73:	c9                   	leave  
c0107a74:	c3                   	ret    

c0107a75 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107a75:	55                   	push   %ebp
c0107a76:	89 e5                	mov    %esp,%ebp
c0107a78:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a7e:	8b 40 14             	mov    0x14(%eax),%eax
c0107a81:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107a84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a88:	75 24                	jne    c0107aae <_fifo_swap_out_victim+0x39>
c0107a8a:	c7 44 24 0c 7f 6e 11 	movl   $0xc0116e7f,0xc(%esp)
c0107a91:	c0 
c0107a92:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107a99:	c0 
c0107a9a:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107aa1:	00 
c0107aa2:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107aa9:	e8 1a 94 ff ff       	call   c0100ec8 <__panic>
     assert(in_tick==0);
c0107aae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107ab2:	74 24                	je     c0107ad8 <_fifo_swap_out_victim+0x63>
c0107ab4:	c7 44 24 0c 8c 6e 11 	movl   $0xc0116e8c,0xc(%esp)
c0107abb:	c0 
c0107abc:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107ac3:	c0 
c0107ac4:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107acb:	00 
c0107acc:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107ad3:	e8 f0 93 ff ff       	call   c0100ec8 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t* le = head->prev;
c0107ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107adb:	8b 00                	mov    (%eax),%eax
c0107add:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(le != head);
c0107ae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ae3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107ae6:	75 24                	jne    c0107b0c <_fifo_swap_out_victim+0x97>
c0107ae8:	c7 44 24 0c 97 6e 11 	movl   $0xc0116e97,0xc(%esp)
c0107aef:	c0 
c0107af0:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107af7:	c0 
c0107af8:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107aff:	00 
c0107b00:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107b07:	e8 bc 93 ff ff       	call   c0100ec8 <__panic>
     //}
     //else{
    //	 cprintf("-1\n");
     //}
     //cprintf("page's position = %d\n", p - pages);
     *ptr_page = le2page(le, pra_page_link);
c0107b0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b0f:	8d 50 ec             	lea    -0x14(%eax),%edx
c0107b12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b15:	89 10                	mov    %edx,(%eax)
c0107b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107b20:	8b 40 04             	mov    0x4(%eax),%eax
c0107b23:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107b26:	8b 12                	mov    (%edx),%edx
c0107b28:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0107b2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107b2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b31:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b34:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107b37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b3a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107b3d:	89 10                	mov    %edx,(%eax)
     list_del(le);
     return 0;
c0107b3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b44:	c9                   	leave  
c0107b45:	c3                   	ret    

c0107b46 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107b46:	55                   	push   %ebp
c0107b47:	89 e5                	mov    %esp,%ebp
c0107b49:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107b4c:	c7 04 24 a4 6e 11 c0 	movl   $0xc0116ea4,(%esp)
c0107b53:	e8 0d 88 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107b58:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107b5d:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107b60:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107b65:	83 f8 04             	cmp    $0x4,%eax
c0107b68:	74 24                	je     c0107b8e <_fifo_check_swap+0x48>
c0107b6a:	c7 44 24 0c ca 6e 11 	movl   $0xc0116eca,0xc(%esp)
c0107b71:	c0 
c0107b72:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107b79:	c0 
c0107b7a:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107b81:	00 
c0107b82:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107b89:	e8 3a 93 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107b8e:	c7 04 24 dc 6e 11 c0 	movl   $0xc0116edc,(%esp)
c0107b95:	e8 cb 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107b9a:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107b9f:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107ba2:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107ba7:	83 f8 04             	cmp    $0x4,%eax
c0107baa:	74 24                	je     c0107bd0 <_fifo_check_swap+0x8a>
c0107bac:	c7 44 24 0c ca 6e 11 	movl   $0xc0116eca,0xc(%esp)
c0107bb3:	c0 
c0107bb4:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107bbb:	c0 
c0107bbc:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107bc3:	00 
c0107bc4:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107bcb:	e8 f8 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107bd0:	c7 04 24 04 6f 11 c0 	movl   $0xc0116f04,(%esp)
c0107bd7:	e8 89 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107bdc:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107be1:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107be4:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107be9:	83 f8 04             	cmp    $0x4,%eax
c0107bec:	74 24                	je     c0107c12 <_fifo_check_swap+0xcc>
c0107bee:	c7 44 24 0c ca 6e 11 	movl   $0xc0116eca,0xc(%esp)
c0107bf5:	c0 
c0107bf6:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107bfd:	c0 
c0107bfe:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107c05:	00 
c0107c06:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107c0d:	e8 b6 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c12:	c7 04 24 2c 6f 11 c0 	movl   $0xc0116f2c,(%esp)
c0107c19:	e8 47 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c1e:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c23:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107c26:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c2b:	83 f8 04             	cmp    $0x4,%eax
c0107c2e:	74 24                	je     c0107c54 <_fifo_check_swap+0x10e>
c0107c30:	c7 44 24 0c ca 6e 11 	movl   $0xc0116eca,0xc(%esp)
c0107c37:	c0 
c0107c38:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107c3f:	c0 
c0107c40:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107c47:	00 
c0107c48:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107c4f:	e8 74 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107c54:	c7 04 24 54 6f 11 c0 	movl   $0xc0116f54,(%esp)
c0107c5b:	e8 05 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107c60:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107c65:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107c68:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c6d:	83 f8 05             	cmp    $0x5,%eax
c0107c70:	74 24                	je     c0107c96 <_fifo_check_swap+0x150>
c0107c72:	c7 44 24 0c 7a 6f 11 	movl   $0xc0116f7a,0xc(%esp)
c0107c79:	c0 
c0107c7a:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107c81:	c0 
c0107c82:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107c89:	00 
c0107c8a:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107c91:	e8 32 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c96:	c7 04 24 2c 6f 11 c0 	movl   $0xc0116f2c,(%esp)
c0107c9d:	e8 c3 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107ca2:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107ca7:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107caa:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107caf:	83 f8 05             	cmp    $0x5,%eax
c0107cb2:	74 24                	je     c0107cd8 <_fifo_check_swap+0x192>
c0107cb4:	c7 44 24 0c 7a 6f 11 	movl   $0xc0116f7a,0xc(%esp)
c0107cbb:	c0 
c0107cbc:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107cc3:	c0 
c0107cc4:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107ccb:	00 
c0107ccc:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107cd3:	e8 f0 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107cd8:	c7 04 24 dc 6e 11 c0 	movl   $0xc0116edc,(%esp)
c0107cdf:	e8 81 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107ce4:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107ce9:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107cec:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107cf1:	83 f8 06             	cmp    $0x6,%eax
c0107cf4:	74 24                	je     c0107d1a <_fifo_check_swap+0x1d4>
c0107cf6:	c7 44 24 0c 89 6f 11 	movl   $0xc0116f89,0xc(%esp)
c0107cfd:	c0 
c0107cfe:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107d05:	c0 
c0107d06:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107d0d:	00 
c0107d0e:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107d15:	e8 ae 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d1a:	c7 04 24 2c 6f 11 c0 	movl   $0xc0116f2c,(%esp)
c0107d21:	e8 3f 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d26:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d2b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107d2e:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d33:	83 f8 07             	cmp    $0x7,%eax
c0107d36:	74 24                	je     c0107d5c <_fifo_check_swap+0x216>
c0107d38:	c7 44 24 0c 98 6f 11 	movl   $0xc0116f98,0xc(%esp)
c0107d3f:	c0 
c0107d40:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107d47:	c0 
c0107d48:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107d4f:	00 
c0107d50:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107d57:	e8 6c 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107d5c:	c7 04 24 a4 6e 11 c0 	movl   $0xc0116ea4,(%esp)
c0107d63:	e8 fd 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107d68:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107d6d:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107d70:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d75:	83 f8 08             	cmp    $0x8,%eax
c0107d78:	74 24                	je     c0107d9e <_fifo_check_swap+0x258>
c0107d7a:	c7 44 24 0c a7 6f 11 	movl   $0xc0116fa7,0xc(%esp)
c0107d81:	c0 
c0107d82:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107d89:	c0 
c0107d8a:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c0107d91:	00 
c0107d92:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107d99:	e8 2a 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107d9e:	c7 04 24 04 6f 11 c0 	movl   $0xc0116f04,(%esp)
c0107da5:	e8 bb 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107daa:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107daf:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107db2:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107db7:	83 f8 09             	cmp    $0x9,%eax
c0107dba:	74 24                	je     c0107de0 <_fifo_check_swap+0x29a>
c0107dbc:	c7 44 24 0c b6 6f 11 	movl   $0xc0116fb6,0xc(%esp)
c0107dc3:	c0 
c0107dc4:	c7 44 24 08 56 6e 11 	movl   $0xc0116e56,0x8(%esp)
c0107dcb:	c0 
c0107dcc:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0107dd3:	00 
c0107dd4:	c7 04 24 6b 6e 11 c0 	movl   $0xc0116e6b,(%esp)
c0107ddb:	e8 e8 90 ff ff       	call   c0100ec8 <__panic>
    return 0;
c0107de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107de5:	c9                   	leave  
c0107de6:	c3                   	ret    

c0107de7 <_fifo_init>:


static int
_fifo_init(void)
{
c0107de7:	55                   	push   %ebp
c0107de8:	89 e5                	mov    %esp,%ebp
    return 0;
c0107dea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107def:	5d                   	pop    %ebp
c0107df0:	c3                   	ret    

c0107df1 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107df1:	55                   	push   %ebp
c0107df2:	89 e5                	mov    %esp,%ebp
    return 0;
c0107df4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107df9:	5d                   	pop    %ebp
c0107dfa:	c3                   	ret    

c0107dfb <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107dfb:	55                   	push   %ebp
c0107dfc:	89 e5                	mov    %esp,%ebp
c0107dfe:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e03:	5d                   	pop    %ebp
c0107e04:	c3                   	ret    

c0107e05 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107e05:	55                   	push   %ebp
c0107e06:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107e08:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e0b:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107e0e:	5d                   	pop    %ebp
c0107e0f:	c3                   	ret    

c0107e10 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107e10:	55                   	push   %ebp
c0107e11:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107e13:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e16:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e19:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107e1c:	5d                   	pop    %ebp
c0107e1d:	c3                   	ret    

c0107e1e <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107e1e:	55                   	push   %ebp
c0107e1f:	89 e5                	mov    %esp,%ebp
c0107e21:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e27:	c1 e8 0c             	shr    $0xc,%eax
c0107e2a:	89 c2                	mov    %eax,%edx
c0107e2c:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0107e31:	39 c2                	cmp    %eax,%edx
c0107e33:	72 1c                	jb     c0107e51 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107e35:	c7 44 24 08 d8 6f 11 	movl   $0xc0116fd8,0x8(%esp)
c0107e3c:	c0 
c0107e3d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107e44:	00 
c0107e45:	c7 04 24 f7 6f 11 c0 	movl   $0xc0116ff7,(%esp)
c0107e4c:	e8 77 90 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0107e51:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0107e56:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e59:	c1 ea 0c             	shr    $0xc,%edx
c0107e5c:	c1 e2 05             	shl    $0x5,%edx
c0107e5f:	01 d0                	add    %edx,%eax
}
c0107e61:	c9                   	leave  
c0107e62:	c3                   	ret    

c0107e63 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107e63:	55                   	push   %ebp
c0107e64:	89 e5                	mov    %esp,%ebp
c0107e66:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107e69:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107e70:	e8 e5 cd ff ff       	call   c0104c5a <kmalloc>
c0107e75:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107e78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e7c:	0f 84 81 00 00 00    	je     c0107f03 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e85:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107e8e:	89 50 04             	mov    %edx,0x4(%eax)
c0107e91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e94:	8b 50 04             	mov    0x4(%eax),%edx
c0107e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e9a:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e9f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ea9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107eb3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107eba:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0107ebf:	85 c0                	test   %eax,%eax
c0107ec1:	74 0d                	je     c0107ed0 <mm_create+0x6d>
c0107ec3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ec6:	89 04 24             	mov    %eax,(%esp)
c0107ec9:	e8 98 ef ff ff       	call   c0106e66 <swap_init_mm>
c0107ece:	eb 0a                	jmp    c0107eda <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107ed0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ed3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107eda:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107ee1:	00 
c0107ee2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ee5:	89 04 24             	mov    %eax,(%esp)
c0107ee8:	e8 23 ff ff ff       	call   c0107e10 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ef0:	83 c0 1c             	add    $0x1c,%eax
c0107ef3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107efa:	00 
c0107efb:	89 04 24             	mov    %eax,(%esp)
c0107efe:	e8 36 1b 00 00       	call   c0109a39 <sem_init>
    }    
    return mm;
c0107f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f06:	c9                   	leave  
c0107f07:	c3                   	ret    

c0107f08 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107f08:	55                   	push   %ebp
c0107f09:	89 e5                	mov    %esp,%ebp
c0107f0b:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107f0e:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107f15:	e8 40 cd ff ff       	call   c0104c5a <kmalloc>
c0107f1a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107f1d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f21:	74 1b                	je     c0107f3e <vma_create+0x36>
        vma->vm_start = vm_start;
c0107f23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f26:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f29:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f2f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f32:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f38:	8b 55 10             	mov    0x10(%ebp),%edx
c0107f3b:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f41:	c9                   	leave  
c0107f42:	c3                   	ret    

c0107f43 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107f43:	55                   	push   %ebp
c0107f44:	89 e5                	mov    %esp,%ebp
c0107f46:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107f49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107f50:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107f54:	0f 84 95 00 00 00    	je     c0107fef <find_vma+0xac>
        vma = mm->mmap_cache;
c0107f5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f5d:	8b 40 08             	mov    0x8(%eax),%eax
c0107f60:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107f63:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107f67:	74 16                	je     c0107f7f <find_vma+0x3c>
c0107f69:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f6c:	8b 40 04             	mov    0x4(%eax),%eax
c0107f6f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f72:	77 0b                	ja     c0107f7f <find_vma+0x3c>
c0107f74:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f77:	8b 40 08             	mov    0x8(%eax),%eax
c0107f7a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f7d:	77 61                	ja     c0107fe0 <find_vma+0x9d>
                bool found = 0;
c0107f7f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107f86:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f89:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107f92:	eb 28                	jmp    c0107fbc <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0107f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f97:	83 e8 10             	sub    $0x10,%eax
c0107f9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0107f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fa0:	8b 40 04             	mov    0x4(%eax),%eax
c0107fa3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fa6:	77 14                	ja     c0107fbc <find_vma+0x79>
c0107fa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fab:	8b 40 08             	mov    0x8(%eax),%eax
c0107fae:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fb1:	76 09                	jbe    c0107fbc <find_vma+0x79>
                        found = 1;
c0107fb3:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0107fba:	eb 17                	jmp    c0107fd3 <find_vma+0x90>
c0107fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fbf:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107fc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fc5:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0107fc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107fd1:	75 c1                	jne    c0107f94 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0107fd3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0107fd7:	75 07                	jne    c0107fe0 <find_vma+0x9d>
                    vma = NULL;
c0107fd9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0107fe0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107fe4:	74 09                	je     c0107fef <find_vma+0xac>
            mm->mmap_cache = vma;
c0107fe6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fe9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107fec:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0107fef:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0107ff2:	c9                   	leave  
c0107ff3:	c3                   	ret    

c0107ff4 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0107ff4:	55                   	push   %ebp
c0107ff5:	89 e5                	mov    %esp,%ebp
c0107ff7:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0107ffa:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ffd:	8b 50 04             	mov    0x4(%eax),%edx
c0108000:	8b 45 08             	mov    0x8(%ebp),%eax
c0108003:	8b 40 08             	mov    0x8(%eax),%eax
c0108006:	39 c2                	cmp    %eax,%edx
c0108008:	72 24                	jb     c010802e <check_vma_overlap+0x3a>
c010800a:	c7 44 24 0c 05 70 11 	movl   $0xc0117005,0xc(%esp)
c0108011:	c0 
c0108012:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108019:	c0 
c010801a:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108021:	00 
c0108022:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108029:	e8 9a 8e ff ff       	call   c0100ec8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c010802e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108031:	8b 50 08             	mov    0x8(%eax),%edx
c0108034:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108037:	8b 40 04             	mov    0x4(%eax),%eax
c010803a:	39 c2                	cmp    %eax,%edx
c010803c:	76 24                	jbe    c0108062 <check_vma_overlap+0x6e>
c010803e:	c7 44 24 0c 48 70 11 	movl   $0xc0117048,0xc(%esp)
c0108045:	c0 
c0108046:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c010804d:	c0 
c010804e:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0108055:	00 
c0108056:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c010805d:	e8 66 8e ff ff       	call   c0100ec8 <__panic>
    assert(next->vm_start < next->vm_end);
c0108062:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108065:	8b 50 04             	mov    0x4(%eax),%edx
c0108068:	8b 45 0c             	mov    0xc(%ebp),%eax
c010806b:	8b 40 08             	mov    0x8(%eax),%eax
c010806e:	39 c2                	cmp    %eax,%edx
c0108070:	72 24                	jb     c0108096 <check_vma_overlap+0xa2>
c0108072:	c7 44 24 0c 67 70 11 	movl   $0xc0117067,0xc(%esp)
c0108079:	c0 
c010807a:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108081:	c0 
c0108082:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108089:	00 
c010808a:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108091:	e8 32 8e ff ff       	call   c0100ec8 <__panic>
}
c0108096:	c9                   	leave  
c0108097:	c3                   	ret    

c0108098 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0108098:	55                   	push   %ebp
c0108099:	89 e5                	mov    %esp,%ebp
c010809b:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c010809e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080a1:	8b 50 04             	mov    0x4(%eax),%edx
c01080a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080a7:	8b 40 08             	mov    0x8(%eax),%eax
c01080aa:	39 c2                	cmp    %eax,%edx
c01080ac:	72 24                	jb     c01080d2 <insert_vma_struct+0x3a>
c01080ae:	c7 44 24 0c 85 70 11 	movl   $0xc0117085,0xc(%esp)
c01080b5:	c0 
c01080b6:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01080bd:	c0 
c01080be:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01080c5:	00 
c01080c6:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01080cd:	e8 f6 8d ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01080d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01080d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01080d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080db:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01080de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01080e4:	eb 21                	jmp    c0108107 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01080e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080e9:	83 e8 10             	sub    $0x10,%eax
c01080ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01080ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01080f2:	8b 50 04             	mov    0x4(%eax),%edx
c01080f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080f8:	8b 40 04             	mov    0x4(%eax),%eax
c01080fb:	39 c2                	cmp    %eax,%edx
c01080fd:	76 02                	jbe    c0108101 <insert_vma_struct+0x69>
                break;
c01080ff:	eb 1d                	jmp    c010811e <insert_vma_struct+0x86>
            }
            le_prev = le;
c0108101:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108104:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108107:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010810a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010810d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108110:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0108113:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108116:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108119:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010811c:	75 c8                	jne    c01080e6 <insert_vma_struct+0x4e>
c010811e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108121:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108124:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108127:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c010812a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c010812d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108130:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108133:	74 15                	je     c010814a <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0108135:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108138:	8d 50 f0             	lea    -0x10(%eax),%edx
c010813b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010813e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108142:	89 14 24             	mov    %edx,(%esp)
c0108145:	e8 aa fe ff ff       	call   c0107ff4 <check_vma_overlap>
    }
    if (le_next != list) {
c010814a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010814d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108150:	74 15                	je     c0108167 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0108152:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108155:	83 e8 10             	sub    $0x10,%eax
c0108158:	89 44 24 04          	mov    %eax,0x4(%esp)
c010815c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010815f:	89 04 24             	mov    %eax,(%esp)
c0108162:	e8 8d fe ff ff       	call   c0107ff4 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0108167:	8b 45 0c             	mov    0xc(%ebp),%eax
c010816a:	8b 55 08             	mov    0x8(%ebp),%edx
c010816d:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010816f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108172:	8d 50 10             	lea    0x10(%eax),%edx
c0108175:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108178:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010817b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010817e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108181:	8b 40 04             	mov    0x4(%eax),%eax
c0108184:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108187:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010818a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010818d:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0108190:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108193:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108196:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108199:	89 10                	mov    %edx,(%eax)
c010819b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010819e:	8b 10                	mov    (%eax),%edx
c01081a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01081a3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01081a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01081a9:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01081ac:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01081af:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01081b2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01081b5:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01081b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01081ba:	8b 40 10             	mov    0x10(%eax),%eax
c01081bd:	8d 50 01             	lea    0x1(%eax),%edx
c01081c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01081c3:	89 50 10             	mov    %edx,0x10(%eax)
}
c01081c6:	c9                   	leave  
c01081c7:	c3                   	ret    

c01081c8 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01081c8:	55                   	push   %ebp
c01081c9:	89 e5                	mov    %esp,%ebp
c01081cb:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01081ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01081d1:	89 04 24             	mov    %eax,(%esp)
c01081d4:	e8 2c fc ff ff       	call   c0107e05 <mm_count>
c01081d9:	85 c0                	test   %eax,%eax
c01081db:	74 24                	je     c0108201 <mm_destroy+0x39>
c01081dd:	c7 44 24 0c a1 70 11 	movl   $0xc01170a1,0xc(%esp)
c01081e4:	c0 
c01081e5:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01081ec:	c0 
c01081ed:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01081f4:	00 
c01081f5:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01081fc:	e8 c7 8c ff ff       	call   c0100ec8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0108201:	8b 45 08             	mov    0x8(%ebp),%eax
c0108204:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108207:	eb 36                	jmp    c010823f <mm_destroy+0x77>
c0108209:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010820c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010820f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108212:	8b 40 04             	mov    0x4(%eax),%eax
c0108215:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108218:	8b 12                	mov    (%edx),%edx
c010821a:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010821d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108220:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108223:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108226:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108229:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010822c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010822f:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108231:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108234:	83 e8 10             	sub    $0x10,%eax
c0108237:	89 04 24             	mov    %eax,(%esp)
c010823a:	e8 36 ca ff ff       	call   c0104c75 <kfree>
c010823f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108242:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108245:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108248:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c010824b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010824e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108251:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108254:	75 b3                	jne    c0108209 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0108256:	8b 45 08             	mov    0x8(%ebp),%eax
c0108259:	89 04 24             	mov    %eax,(%esp)
c010825c:	e8 14 ca ff ff       	call   c0104c75 <kfree>
    mm=NULL;
c0108261:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108268:	c9                   	leave  
c0108269:	c3                   	ret    

c010826a <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010826a:	55                   	push   %ebp
c010826b:	89 e5                	mov    %esp,%ebp
c010826d:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108270:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108273:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108276:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108279:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010827e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108281:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108288:	8b 45 10             	mov    0x10(%ebp),%eax
c010828b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010828e:	01 c2                	add    %eax,%edx
c0108290:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108293:	01 d0                	add    %edx,%eax
c0108295:	83 e8 01             	sub    $0x1,%eax
c0108298:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010829b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010829e:	ba 00 00 00 00       	mov    $0x0,%edx
c01082a3:	f7 75 e8             	divl   -0x18(%ebp)
c01082a6:	89 d0                	mov    %edx,%eax
c01082a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01082ab:	29 c2                	sub    %eax,%edx
c01082ad:	89 d0                	mov    %edx,%eax
c01082af:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01082b2:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01082b9:	76 11                	jbe    c01082cc <mm_map+0x62>
c01082bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082be:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01082c1:	73 09                	jae    c01082cc <mm_map+0x62>
c01082c3:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01082ca:	76 0a                	jbe    c01082d6 <mm_map+0x6c>
        return -E_INVAL;
c01082cc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01082d1:	e9 ae 00 00 00       	jmp    c0108384 <mm_map+0x11a>
    }

    assert(mm != NULL);
c01082d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01082da:	75 24                	jne    c0108300 <mm_map+0x96>
c01082dc:	c7 44 24 0c b3 70 11 	movl   $0xc01170b3,0xc(%esp)
c01082e3:	c0 
c01082e4:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01082eb:	c0 
c01082ec:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01082f3:	00 
c01082f4:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01082fb:	e8 c8 8b ff ff       	call   c0100ec8 <__panic>

    int ret = -E_INVAL;
c0108300:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108307:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010830a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010830e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108311:	89 04 24             	mov    %eax,(%esp)
c0108314:	e8 2a fc ff ff       	call   c0107f43 <find_vma>
c0108319:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010831c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108320:	74 0d                	je     c010832f <mm_map+0xc5>
c0108322:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108325:	8b 40 04             	mov    0x4(%eax),%eax
c0108328:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010832b:	73 02                	jae    c010832f <mm_map+0xc5>
        goto out;
c010832d:	eb 52                	jmp    c0108381 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c010832f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108336:	8b 45 14             	mov    0x14(%ebp),%eax
c0108339:	89 44 24 08          	mov    %eax,0x8(%esp)
c010833d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108340:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108344:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108347:	89 04 24             	mov    %eax,(%esp)
c010834a:	e8 b9 fb ff ff       	call   c0107f08 <vma_create>
c010834f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108352:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108356:	75 02                	jne    c010835a <mm_map+0xf0>
        goto out;
c0108358:	eb 27                	jmp    c0108381 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c010835a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010835d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108361:	8b 45 08             	mov    0x8(%ebp),%eax
c0108364:	89 04 24             	mov    %eax,(%esp)
c0108367:	e8 2c fd ff ff       	call   c0108098 <insert_vma_struct>
    if (vma_store != NULL) {
c010836c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108370:	74 08                	je     c010837a <mm_map+0x110>
        *vma_store = vma;
c0108372:	8b 45 18             	mov    0x18(%ebp),%eax
c0108375:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108378:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c010837a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108381:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108384:	c9                   	leave  
c0108385:	c3                   	ret    

c0108386 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108386:	55                   	push   %ebp
c0108387:	89 e5                	mov    %esp,%ebp
c0108389:	56                   	push   %esi
c010838a:	53                   	push   %ebx
c010838b:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010838e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108392:	74 06                	je     c010839a <dup_mmap+0x14>
c0108394:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108398:	75 24                	jne    c01083be <dup_mmap+0x38>
c010839a:	c7 44 24 0c be 70 11 	movl   $0xc01170be,0xc(%esp)
c01083a1:	c0 
c01083a2:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01083a9:	c0 
c01083aa:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01083b1:	00 
c01083b2:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01083b9:	e8 0a 8b ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01083be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01083ca:	e9 92 00 00 00       	jmp    c0108461 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01083cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083d2:	83 e8 10             	sub    $0x10,%eax
c01083d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01083d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083db:	8b 48 0c             	mov    0xc(%eax),%ecx
c01083de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083e1:	8b 50 08             	mov    0x8(%eax),%edx
c01083e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083e7:	8b 40 04             	mov    0x4(%eax),%eax
c01083ea:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01083ee:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083f2:	89 04 24             	mov    %eax,(%esp)
c01083f5:	e8 0e fb ff ff       	call   c0107f08 <vma_create>
c01083fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01083fd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108401:	75 07                	jne    c010840a <dup_mmap+0x84>
            return -E_NO_MEM;
c0108403:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108408:	eb 76                	jmp    c0108480 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c010840a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010840d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108411:	8b 45 08             	mov    0x8(%ebp),%eax
c0108414:	89 04 24             	mov    %eax,(%esp)
c0108417:	e8 7c fc ff ff       	call   c0108098 <insert_vma_struct>

        bool share = 0;
c010841c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108423:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108426:	8b 58 08             	mov    0x8(%eax),%ebx
c0108429:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010842c:	8b 48 04             	mov    0x4(%eax),%ecx
c010842f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108432:	8b 50 0c             	mov    0xc(%eax),%edx
c0108435:	8b 45 08             	mov    0x8(%ebp),%eax
c0108438:	8b 40 0c             	mov    0xc(%eax),%eax
c010843b:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010843e:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108442:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108446:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010844a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010844e:	89 04 24             	mov    %eax,(%esp)
c0108451:	e8 f3 d7 ff ff       	call   c0105c49 <copy_range>
c0108456:	85 c0                	test   %eax,%eax
c0108458:	74 07                	je     c0108461 <dup_mmap+0xdb>
            return -E_NO_MEM;
c010845a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010845f:	eb 1f                	jmp    c0108480 <dup_mmap+0xfa>
c0108461:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108464:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108467:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010846a:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c010846c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010846f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108472:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108475:	0f 85 54 ff ff ff    	jne    c01083cf <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c010847b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108480:	83 c4 40             	add    $0x40,%esp
c0108483:	5b                   	pop    %ebx
c0108484:	5e                   	pop    %esi
c0108485:	5d                   	pop    %ebp
c0108486:	c3                   	ret    

c0108487 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108487:	55                   	push   %ebp
c0108488:	89 e5                	mov    %esp,%ebp
c010848a:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c010848d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108491:	74 0f                	je     c01084a2 <exit_mmap+0x1b>
c0108493:	8b 45 08             	mov    0x8(%ebp),%eax
c0108496:	89 04 24             	mov    %eax,(%esp)
c0108499:	e8 67 f9 ff ff       	call   c0107e05 <mm_count>
c010849e:	85 c0                	test   %eax,%eax
c01084a0:	74 24                	je     c01084c6 <exit_mmap+0x3f>
c01084a2:	c7 44 24 0c dc 70 11 	movl   $0xc01170dc,0xc(%esp)
c01084a9:	c0 
c01084aa:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01084b1:	c0 
c01084b2:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01084b9:	00 
c01084ba:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01084c1:	e8 02 8a ff ff       	call   c0100ec8 <__panic>
    pde_t *pgdir = mm->pgdir;
c01084c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01084c9:	8b 40 0c             	mov    0xc(%eax),%eax
c01084cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01084cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01084d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01084d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01084db:	eb 28                	jmp    c0108505 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01084dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084e0:	83 e8 10             	sub    $0x10,%eax
c01084e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01084e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084e9:	8b 50 08             	mov    0x8(%eax),%edx
c01084ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084ef:	8b 40 04             	mov    0x4(%eax),%eax
c01084f2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01084f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084fd:	89 04 24             	mov    %eax,(%esp)
c0108500:	e8 49 d5 ff ff       	call   c0105a4e <unmap_range>
c0108505:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108508:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010850b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010850e:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0108511:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108514:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108517:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010851a:	75 c1                	jne    c01084dd <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010851c:	eb 28                	jmp    c0108546 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c010851e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108521:	83 e8 10             	sub    $0x10,%eax
c0108524:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108527:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010852a:	8b 50 08             	mov    0x8(%eax),%edx
c010852d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108530:	8b 40 04             	mov    0x4(%eax),%eax
c0108533:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108537:	89 44 24 04          	mov    %eax,0x4(%esp)
c010853b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010853e:	89 04 24             	mov    %eax,(%esp)
c0108541:	e8 fc d5 ff ff       	call   c0105b42 <exit_range>
c0108546:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108549:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010854c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010854f:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108552:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108555:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108558:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010855b:	75 c1                	jne    c010851e <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c010855d:	c9                   	leave  
c010855e:	c3                   	ret    

c010855f <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c010855f:	55                   	push   %ebp
c0108560:	89 e5                	mov    %esp,%ebp
c0108562:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0108565:	8b 45 10             	mov    0x10(%ebp),%eax
c0108568:	8b 55 18             	mov    0x18(%ebp),%edx
c010856b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010856f:	8b 55 14             	mov    0x14(%ebp),%edx
c0108572:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108576:	89 44 24 04          	mov    %eax,0x4(%esp)
c010857a:	8b 45 08             	mov    0x8(%ebp),%eax
c010857d:	89 04 24             	mov    %eax,(%esp)
c0108580:	e8 a7 09 00 00       	call   c0108f2c <user_mem_check>
c0108585:	85 c0                	test   %eax,%eax
c0108587:	75 07                	jne    c0108590 <copy_from_user+0x31>
        return 0;
c0108589:	b8 00 00 00 00       	mov    $0x0,%eax
c010858e:	eb 1e                	jmp    c01085ae <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108590:	8b 45 14             	mov    0x14(%ebp),%eax
c0108593:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108597:	8b 45 10             	mov    0x10(%ebp),%eax
c010859a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010859e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085a1:	89 04 24             	mov    %eax,(%esp)
c01085a4:	e8 6b cf 00 00       	call   c0115514 <memcpy>
    return 1;
c01085a9:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01085ae:	c9                   	leave  
c01085af:	c3                   	ret    

c01085b0 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01085b0:	55                   	push   %ebp
c01085b1:	89 e5                	mov    %esp,%ebp
c01085b3:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01085b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085b9:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01085c0:	00 
c01085c1:	8b 55 14             	mov    0x14(%ebp),%edx
c01085c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01085cf:	89 04 24             	mov    %eax,(%esp)
c01085d2:	e8 55 09 00 00       	call   c0108f2c <user_mem_check>
c01085d7:	85 c0                	test   %eax,%eax
c01085d9:	75 07                	jne    c01085e2 <copy_to_user+0x32>
        return 0;
c01085db:	b8 00 00 00 00       	mov    $0x0,%eax
c01085e0:	eb 1e                	jmp    c0108600 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01085e2:	8b 45 14             	mov    0x14(%ebp),%eax
c01085e5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01085e9:	8b 45 10             	mov    0x10(%ebp),%eax
c01085ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085f3:	89 04 24             	mov    %eax,(%esp)
c01085f6:	e8 19 cf 00 00       	call   c0115514 <memcpy>
    return 1;
c01085fb:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108600:	c9                   	leave  
c0108601:	c3                   	ret    

c0108602 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0108602:	55                   	push   %ebp
c0108603:	89 e5                	mov    %esp,%ebp
c0108605:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108608:	e8 02 00 00 00       	call   c010860f <check_vmm>
}
c010860d:	c9                   	leave  
c010860e:	c3                   	ret    

c010860f <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010860f:	55                   	push   %ebp
c0108610:	89 e5                	mov    %esp,%ebp
c0108612:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108615:	e8 52 cb ff ff       	call   c010516c <nr_free_pages>
c010861a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c010861d:	e8 13 00 00 00       	call   c0108635 <check_vma_struct>
    check_pgfault();
c0108622:	e8 a7 04 00 00       	call   c0108ace <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108627:	c7 04 24 fc 70 11 c0 	movl   $0xc01170fc,(%esp)
c010862e:	e8 32 7d ff ff       	call   c0100365 <cprintf>
}
c0108633:	c9                   	leave  
c0108634:	c3                   	ret    

c0108635 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108635:	55                   	push   %ebp
c0108636:	89 e5                	mov    %esp,%ebp
c0108638:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010863b:	e8 2c cb ff ff       	call   c010516c <nr_free_pages>
c0108640:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108643:	e8 1b f8 ff ff       	call   c0107e63 <mm_create>
c0108648:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c010864b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010864f:	75 24                	jne    c0108675 <check_vma_struct+0x40>
c0108651:	c7 44 24 0c b3 70 11 	movl   $0xc01170b3,0xc(%esp)
c0108658:	c0 
c0108659:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108660:	c0 
c0108661:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108668:	00 
c0108669:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108670:	e8 53 88 ff ff       	call   c0100ec8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108675:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c010867c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010867f:	89 d0                	mov    %edx,%eax
c0108681:	c1 e0 02             	shl    $0x2,%eax
c0108684:	01 d0                	add    %edx,%eax
c0108686:	01 c0                	add    %eax,%eax
c0108688:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c010868b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010868e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108691:	eb 70                	jmp    c0108703 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108693:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108696:	89 d0                	mov    %edx,%eax
c0108698:	c1 e0 02             	shl    $0x2,%eax
c010869b:	01 d0                	add    %edx,%eax
c010869d:	83 c0 02             	add    $0x2,%eax
c01086a0:	89 c1                	mov    %eax,%ecx
c01086a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086a5:	89 d0                	mov    %edx,%eax
c01086a7:	c1 e0 02             	shl    $0x2,%eax
c01086aa:	01 d0                	add    %edx,%eax
c01086ac:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01086b3:	00 
c01086b4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01086b8:	89 04 24             	mov    %eax,(%esp)
c01086bb:	e8 48 f8 ff ff       	call   c0107f08 <vma_create>
c01086c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01086c3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01086c7:	75 24                	jne    c01086ed <check_vma_struct+0xb8>
c01086c9:	c7 44 24 0c 14 71 11 	movl   $0xc0117114,0xc(%esp)
c01086d0:	c0 
c01086d1:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01086d8:	c0 
c01086d9:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01086e0:	00 
c01086e1:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01086e8:	e8 db 87 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c01086ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086f7:	89 04 24             	mov    %eax,(%esp)
c01086fa:	e8 99 f9 ff ff       	call   c0108098 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01086ff:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108703:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108707:	7f 8a                	jg     c0108693 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108709:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010870c:	83 c0 01             	add    $0x1,%eax
c010870f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108712:	eb 70                	jmp    c0108784 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108714:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108717:	89 d0                	mov    %edx,%eax
c0108719:	c1 e0 02             	shl    $0x2,%eax
c010871c:	01 d0                	add    %edx,%eax
c010871e:	83 c0 02             	add    $0x2,%eax
c0108721:	89 c1                	mov    %eax,%ecx
c0108723:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108726:	89 d0                	mov    %edx,%eax
c0108728:	c1 e0 02             	shl    $0x2,%eax
c010872b:	01 d0                	add    %edx,%eax
c010872d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108734:	00 
c0108735:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108739:	89 04 24             	mov    %eax,(%esp)
c010873c:	e8 c7 f7 ff ff       	call   c0107f08 <vma_create>
c0108741:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108744:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108748:	75 24                	jne    c010876e <check_vma_struct+0x139>
c010874a:	c7 44 24 0c 14 71 11 	movl   $0xc0117114,0xc(%esp)
c0108751:	c0 
c0108752:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108759:	c0 
c010875a:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108761:	00 
c0108762:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108769:	e8 5a 87 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c010876e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108771:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108775:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108778:	89 04 24             	mov    %eax,(%esp)
c010877b:	e8 18 f9 ff ff       	call   c0108098 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108780:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108784:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108787:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010878a:	7e 88                	jle    c0108714 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c010878c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010878f:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108792:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108795:	8b 40 04             	mov    0x4(%eax),%eax
c0108798:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c010879b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01087a2:	e9 97 00 00 00       	jmp    c010883e <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c01087a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01087ad:	75 24                	jne    c01087d3 <check_vma_struct+0x19e>
c01087af:	c7 44 24 0c 20 71 11 	movl   $0xc0117120,0xc(%esp)
c01087b6:	c0 
c01087b7:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01087be:	c0 
c01087bf:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01087c6:	00 
c01087c7:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01087ce:	e8 f5 86 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01087d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087d6:	83 e8 10             	sub    $0x10,%eax
c01087d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01087dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01087df:	8b 48 04             	mov    0x4(%eax),%ecx
c01087e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087e5:	89 d0                	mov    %edx,%eax
c01087e7:	c1 e0 02             	shl    $0x2,%eax
c01087ea:	01 d0                	add    %edx,%eax
c01087ec:	39 c1                	cmp    %eax,%ecx
c01087ee:	75 17                	jne    c0108807 <check_vma_struct+0x1d2>
c01087f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01087f3:	8b 48 08             	mov    0x8(%eax),%ecx
c01087f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087f9:	89 d0                	mov    %edx,%eax
c01087fb:	c1 e0 02             	shl    $0x2,%eax
c01087fe:	01 d0                	add    %edx,%eax
c0108800:	83 c0 02             	add    $0x2,%eax
c0108803:	39 c1                	cmp    %eax,%ecx
c0108805:	74 24                	je     c010882b <check_vma_struct+0x1f6>
c0108807:	c7 44 24 0c 38 71 11 	movl   $0xc0117138,0xc(%esp)
c010880e:	c0 
c010880f:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108816:	c0 
c0108817:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c010881e:	00 
c010881f:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108826:	e8 9d 86 ff ff       	call   c0100ec8 <__panic>
c010882b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010882e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108831:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108834:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108837:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c010883a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010883e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108841:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108844:	0f 8e 5d ff ff ff    	jle    c01087a7 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010884a:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108851:	e9 cd 01 00 00       	jmp    c0108a23 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108856:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108859:	89 44 24 04          	mov    %eax,0x4(%esp)
c010885d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108860:	89 04 24             	mov    %eax,(%esp)
c0108863:	e8 db f6 ff ff       	call   c0107f43 <find_vma>
c0108868:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c010886b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010886f:	75 24                	jne    c0108895 <check_vma_struct+0x260>
c0108871:	c7 44 24 0c 6d 71 11 	movl   $0xc011716d,0xc(%esp)
c0108878:	c0 
c0108879:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108880:	c0 
c0108881:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108888:	00 
c0108889:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108890:	e8 33 86 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108895:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108898:	83 c0 01             	add    $0x1,%eax
c010889b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010889f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088a2:	89 04 24             	mov    %eax,(%esp)
c01088a5:	e8 99 f6 ff ff       	call   c0107f43 <find_vma>
c01088aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c01088ad:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01088b1:	75 24                	jne    c01088d7 <check_vma_struct+0x2a2>
c01088b3:	c7 44 24 0c 7a 71 11 	movl   $0xc011717a,0xc(%esp)
c01088ba:	c0 
c01088bb:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01088c2:	c0 
c01088c3:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c01088ca:	00 
c01088cb:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01088d2:	e8 f1 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01088d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088da:	83 c0 02             	add    $0x2,%eax
c01088dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088e4:	89 04 24             	mov    %eax,(%esp)
c01088e7:	e8 57 f6 ff ff       	call   c0107f43 <find_vma>
c01088ec:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01088ef:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01088f3:	74 24                	je     c0108919 <check_vma_struct+0x2e4>
c01088f5:	c7 44 24 0c 87 71 11 	movl   $0xc0117187,0xc(%esp)
c01088fc:	c0 
c01088fd:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108904:	c0 
c0108905:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c010890c:	00 
c010890d:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108914:	e8 af 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108919:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010891c:	83 c0 03             	add    $0x3,%eax
c010891f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108923:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108926:	89 04 24             	mov    %eax,(%esp)
c0108929:	e8 15 f6 ff ff       	call   c0107f43 <find_vma>
c010892e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108931:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108935:	74 24                	je     c010895b <check_vma_struct+0x326>
c0108937:	c7 44 24 0c 94 71 11 	movl   $0xc0117194,0xc(%esp)
c010893e:	c0 
c010893f:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108946:	c0 
c0108947:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c010894e:	00 
c010894f:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108956:	e8 6d 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c010895b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010895e:	83 c0 04             	add    $0x4,%eax
c0108961:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108965:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108968:	89 04 24             	mov    %eax,(%esp)
c010896b:	e8 d3 f5 ff ff       	call   c0107f43 <find_vma>
c0108970:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108973:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108977:	74 24                	je     c010899d <check_vma_struct+0x368>
c0108979:	c7 44 24 0c a1 71 11 	movl   $0xc01171a1,0xc(%esp)
c0108980:	c0 
c0108981:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108988:	c0 
c0108989:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108990:	00 
c0108991:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108998:	e8 2b 85 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c010899d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01089a0:	8b 50 04             	mov    0x4(%eax),%edx
c01089a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089a6:	39 c2                	cmp    %eax,%edx
c01089a8:	75 10                	jne    c01089ba <check_vma_struct+0x385>
c01089aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01089ad:	8b 50 08             	mov    0x8(%eax),%edx
c01089b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089b3:	83 c0 02             	add    $0x2,%eax
c01089b6:	39 c2                	cmp    %eax,%edx
c01089b8:	74 24                	je     c01089de <check_vma_struct+0x3a9>
c01089ba:	c7 44 24 0c b0 71 11 	movl   $0xc01171b0,0xc(%esp)
c01089c1:	c0 
c01089c2:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c01089c9:	c0 
c01089ca:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c01089d1:	00 
c01089d2:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c01089d9:	e8 ea 84 ff ff       	call   c0100ec8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01089de:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01089e1:	8b 50 04             	mov    0x4(%eax),%edx
c01089e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089e7:	39 c2                	cmp    %eax,%edx
c01089e9:	75 10                	jne    c01089fb <check_vma_struct+0x3c6>
c01089eb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01089ee:	8b 50 08             	mov    0x8(%eax),%edx
c01089f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089f4:	83 c0 02             	add    $0x2,%eax
c01089f7:	39 c2                	cmp    %eax,%edx
c01089f9:	74 24                	je     c0108a1f <check_vma_struct+0x3ea>
c01089fb:	c7 44 24 0c e0 71 11 	movl   $0xc01171e0,0xc(%esp)
c0108a02:	c0 
c0108a03:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108a0a:	c0 
c0108a0b:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108a12:	00 
c0108a13:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108a1a:	e8 a9 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108a1f:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108a23:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a26:	89 d0                	mov    %edx,%eax
c0108a28:	c1 e0 02             	shl    $0x2,%eax
c0108a2b:	01 d0                	add    %edx,%eax
c0108a2d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108a30:	0f 8d 20 fe ff ff    	jge    c0108856 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108a36:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108a3d:	eb 70                	jmp    c0108aaf <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a42:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a46:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a49:	89 04 24             	mov    %eax,(%esp)
c0108a4c:	e8 f2 f4 ff ff       	call   c0107f43 <find_vma>
c0108a51:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108a54:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108a58:	74 27                	je     c0108a81 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108a5a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108a5d:	8b 50 08             	mov    0x8(%eax),%edx
c0108a60:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108a63:	8b 40 04             	mov    0x4(%eax),%eax
c0108a66:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108a6a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a75:	c7 04 24 10 72 11 c0 	movl   $0xc0117210,(%esp)
c0108a7c:	e8 e4 78 ff ff       	call   c0100365 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108a81:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108a85:	74 24                	je     c0108aab <check_vma_struct+0x476>
c0108a87:	c7 44 24 0c 35 72 11 	movl   $0xc0117235,0xc(%esp)
c0108a8e:	c0 
c0108a8f:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108a96:	c0 
c0108a97:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108a9e:	00 
c0108a9f:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108aa6:	e8 1d 84 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108aab:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108aaf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108ab3:	79 8a                	jns    c0108a3f <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108ab5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ab8:	89 04 24             	mov    %eax,(%esp)
c0108abb:	e8 08 f7 ff ff       	call   c01081c8 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108ac0:	c7 04 24 4c 72 11 c0 	movl   $0xc011724c,(%esp)
c0108ac7:	e8 99 78 ff ff       	call   c0100365 <cprintf>
}
c0108acc:	c9                   	leave  
c0108acd:	c3                   	ret    

c0108ace <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108ace:	55                   	push   %ebp
c0108acf:	89 e5                	mov    %esp,%ebp
c0108ad1:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108ad4:	e8 93 c6 ff ff       	call   c010516c <nr_free_pages>
c0108ad9:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108adc:	e8 82 f3 ff ff       	call   c0107e63 <mm_create>
c0108ae1:	a3 0c 31 15 c0       	mov    %eax,0xc015310c
    assert(check_mm_struct != NULL);
c0108ae6:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108aeb:	85 c0                	test   %eax,%eax
c0108aed:	75 24                	jne    c0108b13 <check_pgfault+0x45>
c0108aef:	c7 44 24 0c 6b 72 11 	movl   $0xc011726b,0xc(%esp)
c0108af6:	c0 
c0108af7:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108afe:	c0 
c0108aff:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108b06:	00 
c0108b07:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108b0e:	e8 b5 83 ff ff       	call   c0100ec8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108b13:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108b18:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108b1b:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c0108b21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b24:	89 50 0c             	mov    %edx,0xc(%eax)
c0108b27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b2a:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108b30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b33:	8b 00                	mov    (%eax),%eax
c0108b35:	85 c0                	test   %eax,%eax
c0108b37:	74 24                	je     c0108b5d <check_pgfault+0x8f>
c0108b39:	c7 44 24 0c 83 72 11 	movl   $0xc0117283,0xc(%esp)
c0108b40:	c0 
c0108b41:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108b48:	c0 
c0108b49:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108b50:	00 
c0108b51:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108b58:	e8 6b 83 ff ff       	call   c0100ec8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108b5d:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108b64:	00 
c0108b65:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108b6c:	00 
c0108b6d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108b74:	e8 8f f3 ff ff       	call   c0107f08 <vma_create>
c0108b79:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108b7c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108b80:	75 24                	jne    c0108ba6 <check_pgfault+0xd8>
c0108b82:	c7 44 24 0c 14 71 11 	movl   $0xc0117114,0xc(%esp)
c0108b89:	c0 
c0108b8a:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108b91:	c0 
c0108b92:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108b99:	00 
c0108b9a:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108ba1:	e8 22 83 ff ff       	call   c0100ec8 <__panic>

    insert_vma_struct(mm, vma);
c0108ba6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108ba9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bb0:	89 04 24             	mov    %eax,(%esp)
c0108bb3:	e8 e0 f4 ff ff       	call   c0108098 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108bb8:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108bbf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108bc2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bc6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bc9:	89 04 24             	mov    %eax,(%esp)
c0108bcc:	e8 72 f3 ff ff       	call   c0107f43 <find_vma>
c0108bd1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108bd4:	74 24                	je     c0108bfa <check_pgfault+0x12c>
c0108bd6:	c7 44 24 0c 91 72 11 	movl   $0xc0117291,0xc(%esp)
c0108bdd:	c0 
c0108bde:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108be5:	c0 
c0108be6:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108bed:	00 
c0108bee:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108bf5:	e8 ce 82 ff ff       	call   c0100ec8 <__panic>

    int i, sum = 0;
c0108bfa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108c01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c08:	eb 17                	jmp    c0108c21 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108c0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c0d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c10:	01 d0                	add    %edx,%eax
c0108c12:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c15:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c1a:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108c1d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c21:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108c25:	7e e3                	jle    c0108c0a <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c2e:	eb 15                	jmp    c0108c45 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108c30:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c33:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c36:	01 d0                	add    %edx,%eax
c0108c38:	0f b6 00             	movzbl (%eax),%eax
c0108c3b:	0f be c0             	movsbl %al,%eax
c0108c3e:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c41:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c45:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108c49:	7e e5                	jle    c0108c30 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108c4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108c4f:	74 24                	je     c0108c75 <check_pgfault+0x1a7>
c0108c51:	c7 44 24 0c ab 72 11 	movl   $0xc01172ab,0xc(%esp)
c0108c58:	c0 
c0108c59:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108c60:	c0 
c0108c61:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108c68:	00 
c0108c69:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108c70:	e8 53 82 ff ff       	call   c0100ec8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108c75:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c78:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108c7b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108c7e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108c83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c8a:	89 04 24             	mov    %eax,(%esp)
c0108c8d:	e8 da d1 ff ff       	call   c0105e6c <page_remove>
    free_page(pa2page(pgdir[0]));
c0108c92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c95:	8b 00                	mov    (%eax),%eax
c0108c97:	89 04 24             	mov    %eax,(%esp)
c0108c9a:	e8 7f f1 ff ff       	call   c0107e1e <pa2page>
c0108c9f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108ca6:	00 
c0108ca7:	89 04 24             	mov    %eax,(%esp)
c0108caa:	e8 8b c4 ff ff       	call   c010513a <free_pages>
    pgdir[0] = 0;
c0108caf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108cb2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108cb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cbb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108cc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cc5:	89 04 24             	mov    %eax,(%esp)
c0108cc8:	e8 fb f4 ff ff       	call   c01081c8 <mm_destroy>
    check_mm_struct = NULL;
c0108ccd:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0108cd4:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108cd7:	e8 90 c4 ff ff       	call   c010516c <nr_free_pages>
c0108cdc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108cdf:	74 24                	je     c0108d05 <check_pgfault+0x237>
c0108ce1:	c7 44 24 0c b4 72 11 	movl   $0xc01172b4,0xc(%esp)
c0108ce8:	c0 
c0108ce9:	c7 44 24 08 23 70 11 	movl   $0xc0117023,0x8(%esp)
c0108cf0:	c0 
c0108cf1:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108cf8:	00 
c0108cf9:	c7 04 24 38 70 11 c0 	movl   $0xc0117038,(%esp)
c0108d00:	e8 c3 81 ff ff       	call   c0100ec8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108d05:	c7 04 24 db 72 11 c0 	movl   $0xc01172db,(%esp)
c0108d0c:	e8 54 76 ff ff       	call   c0100365 <cprintf>
}
c0108d11:	c9                   	leave  
c0108d12:	c3                   	ret    

c0108d13 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108d13:	55                   	push   %ebp
c0108d14:	89 e5                	mov    %esp,%ebp
c0108d16:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108d19:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108d20:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d23:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d27:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d2a:	89 04 24             	mov    %eax,(%esp)
c0108d2d:	e8 11 f2 ff ff       	call   c0107f43 <find_vma>
c0108d32:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108d35:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0108d3a:	83 c0 01             	add    $0x1,%eax
c0108d3d:	a3 18 ff 14 c0       	mov    %eax,0xc014ff18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108d42:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108d46:	74 0b                	je     c0108d53 <do_pgfault+0x40>
c0108d48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d4b:	8b 40 04             	mov    0x4(%eax),%eax
c0108d4e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108d51:	76 18                	jbe    c0108d6b <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108d53:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d5a:	c7 04 24 f8 72 11 c0 	movl   $0xc01172f8,(%esp)
c0108d61:	e8 ff 75 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108d66:	e9 bc 01 00 00       	jmp    c0108f27 <do_pgfault+0x214>
    }
    //check the error_code
    switch (error_code & 3) {
c0108d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108d6e:	83 e0 03             	and    $0x3,%eax
c0108d71:	85 c0                	test   %eax,%eax
c0108d73:	74 36                	je     c0108dab <do_pgfault+0x98>
c0108d75:	83 f8 01             	cmp    $0x1,%eax
c0108d78:	74 20                	je     c0108d9a <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108d7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d7d:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d80:	83 e0 02             	and    $0x2,%eax
c0108d83:	85 c0                	test   %eax,%eax
c0108d85:	75 11                	jne    c0108d98 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108d87:	c7 04 24 28 73 11 c0 	movl   $0xc0117328,(%esp)
c0108d8e:	e8 d2 75 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108d93:	e9 8f 01 00 00       	jmp    c0108f27 <do_pgfault+0x214>
        }
        break;
c0108d98:	eb 2f                	jmp    c0108dc9 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108d9a:	c7 04 24 88 73 11 c0 	movl   $0xc0117388,(%esp)
c0108da1:	e8 bf 75 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108da6:	e9 7c 01 00 00       	jmp    c0108f27 <do_pgfault+0x214>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108dab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108dae:	8b 40 0c             	mov    0xc(%eax),%eax
c0108db1:	83 e0 05             	and    $0x5,%eax
c0108db4:	85 c0                	test   %eax,%eax
c0108db6:	75 11                	jne    c0108dc9 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108db8:	c7 04 24 c0 73 11 c0 	movl   $0xc01173c0,(%esp)
c0108dbf:	e8 a1 75 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108dc4:	e9 5e 01 00 00       	jmp    c0108f27 <do_pgfault+0x214>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108dc9:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108dd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108dd3:	8b 40 0c             	mov    0xc(%eax),%eax
c0108dd6:	83 e0 02             	and    $0x2,%eax
c0108dd9:	85 c0                	test   %eax,%eax
c0108ddb:	74 04                	je     c0108de1 <do_pgfault+0xce>
        perm |= PTE_W;
c0108ddd:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108de1:	8b 45 10             	mov    0x10(%ebp),%eax
c0108de4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108de7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108def:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108df2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108df9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
    if((ptep = get_pte(mm->pgdir, addr, 1)) == NULL){
c0108e00:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e03:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e06:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108e0d:	00 
c0108e0e:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e11:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e15:	89 04 24             	mov    %eax,(%esp)
c0108e18:	e8 19 ca ff ff       	call   c0105836 <get_pte>
c0108e1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108e20:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108e24:	75 11                	jne    c0108e37 <do_pgfault+0x124>
		cprintf("get_pte in do_pgfault failed\n");
c0108e26:	c7 04 24 23 74 11 c0 	movl   $0xc0117423,(%esp)
c0108e2d:	e8 33 75 ff ff       	call   c0100365 <cprintf>
		goto failed;
c0108e32:	e9 f0 00 00 00       	jmp    c0108f27 <do_pgfault+0x214>
    }
    if(*ptep == 0){
c0108e37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e3a:	8b 00                	mov    (%eax),%eax
c0108e3c:	85 c0                	test   %eax,%eax
c0108e3e:	75 35                	jne    c0108e75 <do_pgfault+0x162>
     	if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL){
c0108e40:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e43:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e46:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108e49:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108e4d:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e50:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e54:	89 04 24             	mov    %eax,(%esp)
c0108e57:	e8 6a d1 ff ff       	call   c0105fc6 <pgdir_alloc_page>
c0108e5c:	85 c0                	test   %eax,%eax
c0108e5e:	0f 85 bc 00 00 00    	jne    c0108f20 <do_pgfault+0x20d>
			cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108e64:	c7 04 24 44 74 11 c0 	movl   $0xc0117444,(%esp)
c0108e6b:	e8 f5 74 ff ff       	call   c0100365 <cprintf>
			goto failed;
c0108e70:	e9 b2 00 00 00       	jmp    c0108f27 <do_pgfault+0x214>
		}
    }
    else{
    	if(swap_init_ok){
c0108e75:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0108e7a:	85 c0                	test   %eax,%eax
c0108e7c:	0f 84 87 00 00 00    	je     c0108f09 <do_pgfault+0x1f6>
    		struct Page *page = NULL;
c0108e82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    		if(ret = swap_in(mm, addr, &page) != 0){
c0108e89:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108e8c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e90:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e93:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e97:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e9a:	89 04 24             	mov    %eax,(%esp)
c0108e9d:	e8 bd e1 ff ff       	call   c010705f <swap_in>
c0108ea2:	85 c0                	test   %eax,%eax
c0108ea4:	0f 95 c0             	setne  %al
c0108ea7:	0f b6 c0             	movzbl %al,%eax
c0108eaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108ead:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108eb1:	74 0e                	je     c0108ec1 <do_pgfault+0x1ae>
    			cprintf("swap_in in do_pgfault failed\n");
c0108eb3:	c7 04 24 6b 74 11 c0 	movl   $0xc011746b,(%esp)
c0108eba:	e8 a6 74 ff ff       	call   c0100365 <cprintf>
c0108ebf:	eb 66                	jmp    c0108f27 <do_pgfault+0x214>
    			goto failed;
    		}
    		page_insert(mm->pgdir, page, addr, perm);
c0108ec1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ec7:	8b 40 0c             	mov    0xc(%eax),%eax
c0108eca:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108ecd:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108ed1:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108ed4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108ed8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108edc:	89 04 24             	mov    %eax,(%esp)
c0108edf:	e8 cc cf ff ff       	call   c0105eb0 <page_insert>
    		swap_map_swappable(mm, addr, page, swap_init_ok);
c0108ee4:	8b 15 0c ff 14 c0    	mov    0xc014ff0c,%edx
c0108eea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108eed:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108ef1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ef5:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ef8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108efc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eff:	89 04 24             	mov    %eax,(%esp)
c0108f02:	e8 8f df ff ff       	call   c0106e96 <swap_map_swappable>
c0108f07:	eb 17                	jmp    c0108f20 <do_pgfault+0x20d>
    	}
    	else {
    		cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108f09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f0c:	8b 00                	mov    (%eax),%eax
c0108f0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f12:	c7 04 24 8c 74 11 c0 	movl   $0xc011748c,(%esp)
c0108f19:	e8 47 74 ff ff       	call   c0100365 <cprintf>
    	    goto failed;
c0108f1e:	eb 07                	jmp    c0108f27 <do_pgfault+0x214>
    	}
    }
   ret = 0;
c0108f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108f2a:	c9                   	leave  
c0108f2b:	c3                   	ret    

c0108f2c <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108f2c:	55                   	push   %ebp
c0108f2d:	89 e5                	mov    %esp,%ebp
c0108f2f:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108f32:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108f36:	0f 84 e0 00 00 00    	je     c010901c <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108f3c:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108f43:	76 1c                	jbe    c0108f61 <user_mem_check+0x35>
c0108f45:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f48:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f4b:	01 d0                	add    %edx,%eax
c0108f4d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108f50:	76 0f                	jbe    c0108f61 <user_mem_check+0x35>
c0108f52:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f55:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f58:	01 d0                	add    %edx,%eax
c0108f5a:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108f5f:	76 0a                	jbe    c0108f6b <user_mem_check+0x3f>
            return 0;
c0108f61:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f66:	e9 e2 00 00 00       	jmp    c010904d <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108f71:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f74:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f77:	01 d0                	add    %edx,%eax
c0108f79:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108f7c:	e9 88 00 00 00       	jmp    c0109009 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108f81:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f84:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f88:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f8b:	89 04 24             	mov    %eax,(%esp)
c0108f8e:	e8 b0 ef ff ff       	call   c0107f43 <find_vma>
c0108f93:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f9a:	74 0b                	je     c0108fa7 <user_mem_check+0x7b>
c0108f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f9f:	8b 40 04             	mov    0x4(%eax),%eax
c0108fa2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108fa5:	76 0a                	jbe    c0108fb1 <user_mem_check+0x85>
                return 0;
c0108fa7:	b8 00 00 00 00       	mov    $0x0,%eax
c0108fac:	e9 9c 00 00 00       	jmp    c010904d <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fb4:	8b 50 0c             	mov    0xc(%eax),%edx
c0108fb7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108fbb:	74 07                	je     c0108fc4 <user_mem_check+0x98>
c0108fbd:	b8 02 00 00 00       	mov    $0x2,%eax
c0108fc2:	eb 05                	jmp    c0108fc9 <user_mem_check+0x9d>
c0108fc4:	b8 01 00 00 00       	mov    $0x1,%eax
c0108fc9:	21 d0                	and    %edx,%eax
c0108fcb:	85 c0                	test   %eax,%eax
c0108fcd:	75 07                	jne    c0108fd6 <user_mem_check+0xaa>
                return 0;
c0108fcf:	b8 00 00 00 00       	mov    $0x0,%eax
c0108fd4:	eb 77                	jmp    c010904d <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0108fd6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108fda:	74 24                	je     c0109000 <user_mem_check+0xd4>
c0108fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fdf:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fe2:	83 e0 08             	and    $0x8,%eax
c0108fe5:	85 c0                	test   %eax,%eax
c0108fe7:	74 17                	je     c0109000 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0108fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fec:	8b 40 04             	mov    0x4(%eax),%eax
c0108fef:	05 00 10 00 00       	add    $0x1000,%eax
c0108ff4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108ff7:	76 07                	jbe    c0109000 <user_mem_check+0xd4>
                    return 0;
c0108ff9:	b8 00 00 00 00       	mov    $0x0,%eax
c0108ffe:	eb 4d                	jmp    c010904d <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109000:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109003:	8b 40 08             	mov    0x8(%eax),%eax
c0109006:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0109009:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010900c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010900f:	0f 82 6c ff ff ff    	jb     c0108f81 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109015:	b8 01 00 00 00       	mov    $0x1,%eax
c010901a:	eb 31                	jmp    c010904d <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010901c:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109023:	76 23                	jbe    c0109048 <user_mem_check+0x11c>
c0109025:	8b 45 10             	mov    0x10(%ebp),%eax
c0109028:	8b 55 0c             	mov    0xc(%ebp),%edx
c010902b:	01 d0                	add    %edx,%eax
c010902d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109030:	76 16                	jbe    c0109048 <user_mem_check+0x11c>
c0109032:	8b 45 10             	mov    0x10(%ebp),%eax
c0109035:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109038:	01 d0                	add    %edx,%eax
c010903a:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010903f:	77 07                	ja     c0109048 <user_mem_check+0x11c>
c0109041:	b8 01 00 00 00       	mov    $0x1,%eax
c0109046:	eb 05                	jmp    c010904d <user_mem_check+0x121>
c0109048:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010904d:	c9                   	leave  
c010904e:	c3                   	ret    

c010904f <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c010904f:	55                   	push   %ebp
c0109050:	89 e5                	mov    %esp,%ebp
c0109052:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c0109055:	8b 45 10             	mov    0x10(%ebp),%eax
c0109058:	05 00 10 00 00       	add    $0x1000,%eax
c010905d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109060:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109063:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109068:	89 c2                	mov    %eax,%edx
c010906a:	8b 45 10             	mov    0x10(%ebp),%eax
c010906d:	29 c2                	sub    %eax,%edx
c010906f:	89 d0                	mov    %edx,%eax
c0109071:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c0109074:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109077:	3b 45 14             	cmp    0x14(%ebp),%eax
c010907a:	76 06                	jbe    c0109082 <copy_string+0x33>
            part = maxn;
c010907c:	8b 45 14             	mov    0x14(%ebp),%eax
c010907f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c0109082:	8b 45 10             	mov    0x10(%ebp),%eax
c0109085:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010908c:	00 
c010908d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109090:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109098:	8b 45 08             	mov    0x8(%ebp),%eax
c010909b:	89 04 24             	mov    %eax,(%esp)
c010909e:	e8 89 fe ff ff       	call   c0108f2c <user_mem_check>
c01090a3:	85 c0                	test   %eax,%eax
c01090a5:	75 0a                	jne    c01090b1 <copy_string+0x62>
            return 0;
c01090a7:	b8 00 00 00 00       	mov    $0x0,%eax
c01090ac:	e9 86 00 00 00       	jmp    c0109137 <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01090b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090b8:	8b 45 10             	mov    0x10(%ebp),%eax
c01090bb:	89 04 24             	mov    %eax,(%esp)
c01090be:	e8 41 c0 00 00       	call   c0115104 <strnlen>
c01090c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01090c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01090c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01090cc:	73 23                	jae    c01090f1 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c01090ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01090d1:	83 c0 01             	add    $0x1,%eax
c01090d4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01090d8:	8b 45 10             	mov    0x10(%ebp),%eax
c01090db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090e2:	89 04 24             	mov    %eax,(%esp)
c01090e5:	e8 2a c4 00 00       	call   c0115514 <memcpy>
            return 1;
c01090ea:	b8 01 00 00 00       	mov    $0x1,%eax
c01090ef:	eb 46                	jmp    c0109137 <copy_string+0xe8>
        }
        if (part == maxn) {
c01090f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090f4:	3b 45 14             	cmp    0x14(%ebp),%eax
c01090f7:	75 07                	jne    c0109100 <copy_string+0xb1>
            return 0;
c01090f9:	b8 00 00 00 00       	mov    $0x0,%eax
c01090fe:	eb 37                	jmp    c0109137 <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c0109100:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109103:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109107:	8b 45 10             	mov    0x10(%ebp),%eax
c010910a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010910e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109111:	89 04 24             	mov    %eax,(%esp)
c0109114:	e8 fb c3 00 00       	call   c0115514 <memcpy>
        dst += part, src += part, maxn -= part;
c0109119:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010911c:	01 45 0c             	add    %eax,0xc(%ebp)
c010911f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109122:	01 45 10             	add    %eax,0x10(%ebp)
c0109125:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109128:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c010912b:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0109132:	e9 3d ff ff ff       	jmp    c0109074 <copy_string+0x25>
}
c0109137:	c9                   	leave  
c0109138:	c3                   	ret    

c0109139 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0109139:	55                   	push   %ebp
c010913a:	89 e5                	mov    %esp,%ebp
c010913c:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c010913f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109142:	8b 04 85 20 31 15 c0 	mov    -0x3feacee0(,%eax,4),%eax
c0109149:	83 f8 01             	cmp    $0x1,%eax
c010914c:	0f 85 85 00 00 00    	jne    c01091d7 <phi_test_sema+0x9e>
c0109152:	8b 45 08             	mov    0x8(%ebp),%eax
c0109155:	8d 48 04             	lea    0x4(%eax),%ecx
c0109158:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010915d:	89 c8                	mov    %ecx,%eax
c010915f:	f7 ea                	imul   %edx
c0109161:	d1 fa                	sar    %edx
c0109163:	89 c8                	mov    %ecx,%eax
c0109165:	c1 f8 1f             	sar    $0x1f,%eax
c0109168:	29 c2                	sub    %eax,%edx
c010916a:	89 d0                	mov    %edx,%eax
c010916c:	c1 e0 02             	shl    $0x2,%eax
c010916f:	01 d0                	add    %edx,%eax
c0109171:	29 c1                	sub    %eax,%ecx
c0109173:	89 ca                	mov    %ecx,%edx
c0109175:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c010917c:	83 f8 02             	cmp    $0x2,%eax
c010917f:	74 56                	je     c01091d7 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0109181:	8b 45 08             	mov    0x8(%ebp),%eax
c0109184:	8d 48 01             	lea    0x1(%eax),%ecx
c0109187:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010918c:	89 c8                	mov    %ecx,%eax
c010918e:	f7 ea                	imul   %edx
c0109190:	d1 fa                	sar    %edx
c0109192:	89 c8                	mov    %ecx,%eax
c0109194:	c1 f8 1f             	sar    $0x1f,%eax
c0109197:	29 c2                	sub    %eax,%edx
c0109199:	89 d0                	mov    %edx,%eax
c010919b:	c1 e0 02             	shl    $0x2,%eax
c010919e:	01 d0                	add    %edx,%eax
c01091a0:	29 c1                	sub    %eax,%ecx
c01091a2:	89 ca                	mov    %ecx,%edx
c01091a4:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c01091ab:	83 f8 02             	cmp    $0x2,%eax
c01091ae:	74 27                	je     c01091d7 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01091b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01091b3:	c7 04 85 20 31 15 c0 	movl   $0x2,-0x3feacee0(,%eax,4)
c01091ba:	02 00 00 00 
        up(&s[i]);
c01091be:	8b 55 08             	mov    0x8(%ebp),%edx
c01091c1:	89 d0                	mov    %edx,%eax
c01091c3:	01 c0                	add    %eax,%eax
c01091c5:	01 d0                	add    %edx,%eax
c01091c7:	c1 e0 02             	shl    $0x2,%eax
c01091ca:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c01091cf:	89 04 24             	mov    %eax,(%esp)
c01091d2:	e8 d5 09 00 00       	call   c0109bac <up>
    }
}
c01091d7:	c9                   	leave  
c01091d8:	c3                   	ret    

c01091d9 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01091d9:	55                   	push   %ebp
c01091da:	89 e5                	mov    %esp,%ebp
c01091dc:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01091df:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01091e6:	e8 dc 09 00 00       	call   c0109bc7 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c01091eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ee:	c7 04 85 20 31 15 c0 	movl   $0x1,-0x3feacee0(,%eax,4)
c01091f5:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c01091f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01091fc:	89 04 24             	mov    %eax,(%esp)
c01091ff:	e8 35 ff ff ff       	call   c0109139 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109204:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c010920b:	e8 9c 09 00 00       	call   c0109bac <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109210:	8b 55 08             	mov    0x8(%ebp),%edx
c0109213:	89 d0                	mov    %edx,%eax
c0109215:	01 c0                	add    %eax,%eax
c0109217:	01 d0                	add    %edx,%eax
c0109219:	c1 e0 02             	shl    $0x2,%eax
c010921c:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0109221:	89 04 24             	mov    %eax,(%esp)
c0109224:	e8 9e 09 00 00       	call   c0109bc7 <down>
}
c0109229:	c9                   	leave  
c010922a:	c3                   	ret    

c010922b <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010922b:	55                   	push   %ebp
c010922c:	89 e5                	mov    %esp,%ebp
c010922e:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109231:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109238:	e8 8a 09 00 00       	call   c0109bc7 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c010923d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109240:	c7 04 85 20 31 15 c0 	movl   $0x0,-0x3feacee0(,%eax,4)
c0109247:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c010924b:	8b 45 08             	mov    0x8(%ebp),%eax
c010924e:	8d 48 04             	lea    0x4(%eax),%ecx
c0109251:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109256:	89 c8                	mov    %ecx,%eax
c0109258:	f7 ea                	imul   %edx
c010925a:	d1 fa                	sar    %edx
c010925c:	89 c8                	mov    %ecx,%eax
c010925e:	c1 f8 1f             	sar    $0x1f,%eax
c0109261:	29 c2                	sub    %eax,%edx
c0109263:	89 d0                	mov    %edx,%eax
c0109265:	c1 e0 02             	shl    $0x2,%eax
c0109268:	01 d0                	add    %edx,%eax
c010926a:	29 c1                	sub    %eax,%ecx
c010926c:	89 ca                	mov    %ecx,%edx
c010926e:	89 14 24             	mov    %edx,(%esp)
c0109271:	e8 c3 fe ff ff       	call   c0109139 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109276:	8b 45 08             	mov    0x8(%ebp),%eax
c0109279:	8d 48 01             	lea    0x1(%eax),%ecx
c010927c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109281:	89 c8                	mov    %ecx,%eax
c0109283:	f7 ea                	imul   %edx
c0109285:	d1 fa                	sar    %edx
c0109287:	89 c8                	mov    %ecx,%eax
c0109289:	c1 f8 1f             	sar    $0x1f,%eax
c010928c:	29 c2                	sub    %eax,%edx
c010928e:	89 d0                	mov    %edx,%eax
c0109290:	c1 e0 02             	shl    $0x2,%eax
c0109293:	01 d0                	add    %edx,%eax
c0109295:	29 c1                	sub    %eax,%ecx
c0109297:	89 ca                	mov    %ecx,%edx
c0109299:	89 14 24             	mov    %edx,(%esp)
c010929c:	e8 98 fe ff ff       	call   c0109139 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01092a1:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01092a8:	e8 ff 08 00 00       	call   c0109bac <up>
}
c01092ad:	c9                   	leave  
c01092ae:	c3                   	ret    

c01092af <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01092af:	55                   	push   %ebp
c01092b0:	89 e5                	mov    %esp,%ebp
c01092b2:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01092b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01092bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01092bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01092c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092c9:	c7 04 24 b4 74 11 c0 	movl   $0xc01174b4,(%esp)
c01092d0:	e8 90 70 ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c01092d5:	eb 62                	jmp    c0109339 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01092d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092da:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092e5:	c7 04 24 d4 74 11 c0 	movl   $0xc01174d4,(%esp)
c01092ec:	e8 74 70 ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01092f1:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01092f8:	e8 50 4c 00 00       	call   c010df4d <do_sleep>
        phi_take_forks_sema(i); 
c01092fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109300:	89 04 24             	mov    %eax,(%esp)
c0109303:	e8 d1 fe ff ff       	call   c01091d9 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109308:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010930b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010930f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109312:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109316:	c7 04 24 04 75 11 c0 	movl   $0xc0117504,(%esp)
c010931d:	e8 43 70 ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109322:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109329:	e8 1f 4c 00 00       	call   c010df4d <do_sleep>
        phi_put_forks_sema(i); 
c010932e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109331:	89 04 24             	mov    %eax,(%esp)
c0109334:	e8 f2 fe ff ff       	call   c010922b <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0109339:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010933c:	8d 50 01             	lea    0x1(%eax),%edx
c010933f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109342:	83 f8 03             	cmp    $0x3,%eax
c0109345:	7e 90                	jle    c01092d7 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0109347:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010934a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010934e:	c7 04 24 2f 75 11 c0 	movl   $0xc011752f,(%esp)
c0109355:	e8 0b 70 ff ff       	call   c0100365 <cprintf>
    return 0;    
c010935a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010935f:	c9                   	leave  
c0109360:	c3                   	ret    

c0109361 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0109361:	55                   	push   %ebp
c0109362:	89 e5                	mov    %esp,%ebp
c0109364:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0109367:	8b 45 08             	mov    0x8(%ebp),%eax
c010936a:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c0109371:	83 f8 01             	cmp    $0x1,%eax
c0109374:	0f 85 b5 00 00 00    	jne    c010942f <phi_test_condvar+0xce>
c010937a:	8b 45 08             	mov    0x8(%ebp),%eax
c010937d:	8d 48 04             	lea    0x4(%eax),%ecx
c0109380:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109385:	89 c8                	mov    %ecx,%eax
c0109387:	f7 ea                	imul   %edx
c0109389:	d1 fa                	sar    %edx
c010938b:	89 c8                	mov    %ecx,%eax
c010938d:	c1 f8 1f             	sar    $0x1f,%eax
c0109390:	29 c2                	sub    %eax,%edx
c0109392:	89 d0                	mov    %edx,%eax
c0109394:	c1 e0 02             	shl    $0x2,%eax
c0109397:	01 d0                	add    %edx,%eax
c0109399:	29 c1                	sub    %eax,%ecx
c010939b:	89 ca                	mov    %ecx,%edx
c010939d:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c01093a4:	83 f8 02             	cmp    $0x2,%eax
c01093a7:	0f 84 82 00 00 00    	je     c010942f <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01093ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b0:	8d 48 01             	lea    0x1(%eax),%ecx
c01093b3:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093b8:	89 c8                	mov    %ecx,%eax
c01093ba:	f7 ea                	imul   %edx
c01093bc:	d1 fa                	sar    %edx
c01093be:	89 c8                	mov    %ecx,%eax
c01093c0:	c1 f8 1f             	sar    $0x1f,%eax
c01093c3:	29 c2                	sub    %eax,%edx
c01093c5:	89 d0                	mov    %edx,%eax
c01093c7:	c1 e0 02             	shl    $0x2,%eax
c01093ca:	01 d0                	add    %edx,%eax
c01093cc:	29 c1                	sub    %eax,%ecx
c01093ce:	89 ca                	mov    %ecx,%edx
c01093d0:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c01093d7:	83 f8 02             	cmp    $0x2,%eax
c01093da:	74 53                	je     c010942f <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01093dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01093df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093e3:	c7 04 24 4c 75 11 c0 	movl   $0xc011754c,(%esp)
c01093ea:	e8 76 6f ff ff       	call   c0100365 <cprintf>
        state_condvar[i] = EATING ;
c01093ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01093f2:	c7 04 85 80 31 15 c0 	movl   $0x2,-0x3feace80(,%eax,4)
c01093f9:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c01093fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109400:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109404:	c7 04 24 80 75 11 c0 	movl   $0xc0117580,(%esp)
c010940b:	e8 55 6f ff ff       	call   c0100365 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109410:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109415:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109418:	8b 55 08             	mov    0x8(%ebp),%edx
c010941b:	89 d0                	mov    %edx,%eax
c010941d:	c1 e0 02             	shl    $0x2,%eax
c0109420:	01 d0                	add    %edx,%eax
c0109422:	c1 e0 02             	shl    $0x2,%eax
c0109425:	01 c8                	add    %ecx,%eax
c0109427:	89 04 24             	mov    %eax,(%esp)
c010942a:	e8 7a 04 00 00       	call   c01098a9 <cond_signal>
    }
}
c010942f:	c9                   	leave  
c0109430:	c3                   	ret    

c0109431 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109431:	55                   	push   %ebp
c0109432:	89 e5                	mov    %esp,%ebp
c0109434:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109437:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010943c:	89 04 24             	mov    %eax,(%esp)
c010943f:	e8 83 07 00 00       	call   c0109bc7 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
//--------leave routine in monitor--------------
     state_condvar[i] = HUNGRY;
c0109444:	8b 45 08             	mov    0x8(%ebp),%eax
c0109447:	c7 04 85 80 31 15 c0 	movl   $0x1,-0x3feace80(,%eax,4)
c010944e:	01 00 00 00 
     phi_test_condvar(i);
c0109452:	8b 45 08             	mov    0x8(%ebp),%eax
c0109455:	89 04 24             	mov    %eax,(%esp)
c0109458:	e8 04 ff ff ff       	call   c0109361 <phi_test_condvar>
     if(state_condvar[i] != EATING){
c010945d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109460:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c0109467:	83 f8 02             	cmp    $0x2,%eax
c010946a:	74 1f                	je     c010948b <phi_take_forks_condvar+0x5a>
    	 cond_wait(&mtp->cv[i]);
c010946c:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109471:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109474:	8b 55 08             	mov    0x8(%ebp),%edx
c0109477:	89 d0                	mov    %edx,%eax
c0109479:	c1 e0 02             	shl    $0x2,%eax
c010947c:	01 d0                	add    %edx,%eax
c010947e:	c1 e0 02             	shl    $0x2,%eax
c0109481:	01 c8                	add    %ecx,%eax
c0109483:	89 04 24             	mov    %eax,(%esp)
c0109486:	e8 be 04 00 00       	call   c0109949 <cond_wait>
     }
      if(mtp->next_count>0)
c010948b:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109490:	8b 40 18             	mov    0x18(%eax),%eax
c0109493:	85 c0                	test   %eax,%eax
c0109495:	7e 12                	jle    c01094a9 <phi_take_forks_condvar+0x78>
         up(&(mtp->next));
c0109497:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010949c:	83 c0 0c             	add    $0xc,%eax
c010949f:	89 04 24             	mov    %eax,(%esp)
c01094a2:	e8 05 07 00 00       	call   c0109bac <up>
c01094a7:	eb 0d                	jmp    c01094b6 <phi_take_forks_condvar+0x85>
      else
         up(&(mtp->mutex));
c01094a9:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094ae:	89 04 24             	mov    %eax,(%esp)
c01094b1:	e8 f6 06 00 00       	call   c0109bac <up>
}
c01094b6:	c9                   	leave  
c01094b7:	c3                   	ret    

c01094b8 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01094b8:	55                   	push   %ebp
c01094b9:	89 e5                	mov    %esp,%ebp
c01094bb:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01094be:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094c3:	89 04 24             	mov    %eax,(%esp)
c01094c6:	e8 fc 06 00 00       	call   c0109bc7 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
//--------leave routine in monitor--------------
     state_condvar[i] = THINKING;
c01094cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ce:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c01094d5:	00 00 00 00 
     phi_test_condvar(LEFT);
c01094d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01094dc:	8d 48 04             	lea    0x4(%eax),%ecx
c01094df:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094e4:	89 c8                	mov    %ecx,%eax
c01094e6:	f7 ea                	imul   %edx
c01094e8:	d1 fa                	sar    %edx
c01094ea:	89 c8                	mov    %ecx,%eax
c01094ec:	c1 f8 1f             	sar    $0x1f,%eax
c01094ef:	29 c2                	sub    %eax,%edx
c01094f1:	89 d0                	mov    %edx,%eax
c01094f3:	c1 e0 02             	shl    $0x2,%eax
c01094f6:	01 d0                	add    %edx,%eax
c01094f8:	29 c1                	sub    %eax,%ecx
c01094fa:	89 ca                	mov    %ecx,%edx
c01094fc:	89 14 24             	mov    %edx,(%esp)
c01094ff:	e8 5d fe ff ff       	call   c0109361 <phi_test_condvar>
     phi_test_condvar(RIGHT);
c0109504:	8b 45 08             	mov    0x8(%ebp),%eax
c0109507:	8d 48 01             	lea    0x1(%eax),%ecx
c010950a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010950f:	89 c8                	mov    %ecx,%eax
c0109511:	f7 ea                	imul   %edx
c0109513:	d1 fa                	sar    %edx
c0109515:	89 c8                	mov    %ecx,%eax
c0109517:	c1 f8 1f             	sar    $0x1f,%eax
c010951a:	29 c2                	sub    %eax,%edx
c010951c:	89 d0                	mov    %edx,%eax
c010951e:	c1 e0 02             	shl    $0x2,%eax
c0109521:	01 d0                	add    %edx,%eax
c0109523:	29 c1                	sub    %eax,%ecx
c0109525:	89 ca                	mov    %ecx,%edx
c0109527:	89 14 24             	mov    %edx,(%esp)
c010952a:	e8 32 fe ff ff       	call   c0109361 <phi_test_condvar>
     if(mtp->next_count>0)
c010952f:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109534:	8b 40 18             	mov    0x18(%eax),%eax
c0109537:	85 c0                	test   %eax,%eax
c0109539:	7e 12                	jle    c010954d <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c010953b:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109540:	83 c0 0c             	add    $0xc,%eax
c0109543:	89 04 24             	mov    %eax,(%esp)
c0109546:	e8 61 06 00 00       	call   c0109bac <up>
c010954b:	eb 0d                	jmp    c010955a <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c010954d:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109552:	89 04 24             	mov    %eax,(%esp)
c0109555:	e8 52 06 00 00       	call   c0109bac <up>
}
c010955a:	c9                   	leave  
c010955b:	c3                   	ret    

c010955c <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c010955c:	55                   	push   %ebp
c010955d:	89 e5                	mov    %esp,%ebp
c010955f:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109562:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109569:	8b 45 08             	mov    0x8(%ebp),%eax
c010956c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c010956f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109572:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109576:	c7 04 24 a8 75 11 c0 	movl   $0xc01175a8,(%esp)
c010957d:	e8 e3 6d ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c0109582:	eb 62                	jmp    c01095e6 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0109584:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109587:	89 44 24 08          	mov    %eax,0x8(%esp)
c010958b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010958e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109592:	c7 04 24 c8 75 11 c0 	movl   $0xc01175c8,(%esp)
c0109599:	e8 c7 6d ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c010959e:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01095a5:	e8 a3 49 00 00       	call   c010df4d <do_sleep>
        phi_take_forks_condvar(i); 
c01095aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095ad:	89 04 24             	mov    %eax,(%esp)
c01095b0:	e8 7c fe ff ff       	call   c0109431 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01095b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095b8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01095bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095c3:	c7 04 24 f8 75 11 c0 	movl   $0xc01175f8,(%esp)
c01095ca:	e8 96 6d ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01095cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01095d6:	e8 72 49 00 00       	call   c010df4d <do_sleep>
        phi_put_forks_condvar(i); 
c01095db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095de:	89 04 24             	mov    %eax,(%esp)
c01095e1:	e8 d2 fe ff ff       	call   c01094b8 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c01095e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095e9:	8d 50 01             	lea    0x1(%eax),%edx
c01095ec:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01095ef:	83 f8 03             	cmp    $0x3,%eax
c01095f2:	7e 90                	jle    c0109584 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c01095f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095fb:	c7 04 24 28 76 11 c0 	movl   $0xc0117628,(%esp)
c0109602:	e8 5e 6d ff ff       	call   c0100365 <cprintf>
    return 0;    
c0109607:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010960c:	c9                   	leave  
c010960d:	c3                   	ret    

c010960e <check_sync>:

void check_sync(void){
c010960e:	55                   	push   %ebp
c010960f:	89 e5                	mov    %esp,%ebp
c0109611:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0109614:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010961b:	00 
c010961c:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109623:	e8 11 04 00 00       	call   c0109a39 <sem_init>
    for(i=0;i<N;i++){
c0109628:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010962f:	e9 94 00 00 00       	jmp    c01096c8 <check_sync+0xba>
        sem_init(&s[i], 0);
c0109634:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109637:	89 d0                	mov    %edx,%eax
c0109639:	01 c0                	add    %eax,%eax
c010963b:	01 d0                	add    %edx,%eax
c010963d:	c1 e0 02             	shl    $0x2,%eax
c0109640:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0109645:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010964c:	00 
c010964d:	89 04 24             	mov    %eax,(%esp)
c0109650:	e8 e4 03 00 00       	call   c0109a39 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0109655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109658:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010965f:	00 
c0109660:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109664:	c7 04 24 af 92 10 c0 	movl   $0xc01092af,(%esp)
c010966b:	e8 e8 2d 00 00       	call   c010c458 <kernel_thread>
c0109670:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109673:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109677:	7f 1c                	jg     c0109695 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0109679:	c7 44 24 08 48 76 11 	movl   $0xc0117648,0x8(%esp)
c0109680:	c0 
c0109681:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0109688:	00 
c0109689:	c7 04 24 7a 76 11 c0 	movl   $0xc011767a,(%esp)
c0109690:	e8 33 78 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c0109695:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109698:	89 04 24             	mov    %eax,(%esp)
c010969b:	e8 44 2d 00 00       	call   c010c3e4 <find_proc>
c01096a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01096a3:	89 04 95 94 31 15 c0 	mov    %eax,-0x3feace6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01096aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096ad:	8b 04 85 94 31 15 c0 	mov    -0x3feace6c(,%eax,4),%eax
c01096b4:	c7 44 24 04 91 76 11 	movl   $0xc0117691,0x4(%esp)
c01096bb:	c0 
c01096bc:	89 04 24             	mov    %eax,(%esp)
c01096bf:	e8 07 29 00 00       	call   c010bfcb <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01096c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01096c8:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01096cc:	0f 8e 62 ff ff ff    	jle    c0109634 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01096d2:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01096d9:	00 
c01096da:	c7 04 24 60 31 15 c0 	movl   $0xc0153160,(%esp)
c01096e1:	e8 99 00 00 00       	call   c010977f <monitor_init>
    for(i=0;i<N;i++){
c01096e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01096ed:	e9 81 00 00 00       	jmp    c0109773 <check_sync+0x165>
        state_condvar[i]=THINKING;
c01096f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096f5:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c01096fc:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109700:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109703:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010970a:	00 
c010970b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010970f:	c7 04 24 5c 95 10 c0 	movl   $0xc010955c,(%esp)
c0109716:	e8 3d 2d 00 00       	call   c010c458 <kernel_thread>
c010971b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c010971e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109722:	7f 1c                	jg     c0109740 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109724:	c7 44 24 08 a8 76 11 	movl   $0xc01176a8,0x8(%esp)
c010972b:	c0 
c010972c:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0109733:	00 
c0109734:	c7 04 24 7a 76 11 c0 	movl   $0xc011767a,(%esp)
c010973b:	e8 88 77 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109740:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109743:	89 04 24             	mov    %eax,(%esp)
c0109746:	e8 99 2c 00 00       	call   c010c3e4 <find_proc>
c010974b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010974e:	89 04 95 34 31 15 c0 	mov    %eax,-0x3feacecc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109755:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109758:	8b 04 85 34 31 15 c0 	mov    -0x3feacecc(,%eax,4),%eax
c010975f:	c7 44 24 04 d8 76 11 	movl   $0xc01176d8,0x4(%esp)
c0109766:	c0 
c0109767:	89 04 24             	mov    %eax,(%esp)
c010976a:	e8 5c 28 00 00       	call   c010bfcb <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c010976f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109773:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109777:	0f 8e 75 ff ff ff    	jle    c01096f2 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c010977d:	c9                   	leave  
c010977e:	c3                   	ret    

c010977f <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010977f:	55                   	push   %ebp
c0109780:	89 e5                	mov    %esp,%ebp
c0109782:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109785:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109789:	75 24                	jne    c01097af <monitor_init+0x30>
c010978b:	c7 44 24 0c f4 76 11 	movl   $0xc01176f4,0xc(%esp)
c0109792:	c0 
c0109793:	c7 44 24 08 fd 76 11 	movl   $0xc01176fd,0x8(%esp)
c010979a:	c0 
c010979b:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01097a2:	00 
c01097a3:	c7 04 24 12 77 11 c0 	movl   $0xc0117712,(%esp)
c01097aa:	e8 19 77 ff ff       	call   c0100ec8 <__panic>
    mtp->next_count = 0;
c01097af:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b2:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01097b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01097bc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01097c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01097c6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01097cd:	00 
c01097ce:	89 04 24             	mov    %eax,(%esp)
c01097d1:	e8 63 02 00 00       	call   c0109a39 <sem_init>
    sem_init(&(mtp->next), 0);
c01097d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01097d9:	83 c0 0c             	add    $0xc,%eax
c01097dc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01097e3:	00 
c01097e4:	89 04 24             	mov    %eax,(%esp)
c01097e7:	e8 4d 02 00 00       	call   c0109a39 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01097ec:	8b 55 0c             	mov    0xc(%ebp),%edx
c01097ef:	89 d0                	mov    %edx,%eax
c01097f1:	c1 e0 02             	shl    $0x2,%eax
c01097f4:	01 d0                	add    %edx,%eax
c01097f6:	c1 e0 02             	shl    $0x2,%eax
c01097f9:	89 04 24             	mov    %eax,(%esp)
c01097fc:	e8 59 b4 ff ff       	call   c0104c5a <kmalloc>
c0109801:	8b 55 08             	mov    0x8(%ebp),%edx
c0109804:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109807:	8b 45 08             	mov    0x8(%ebp),%eax
c010980a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010980d:	85 c0                	test   %eax,%eax
c010980f:	75 24                	jne    c0109835 <monitor_init+0xb6>
c0109811:	c7 44 24 0c 26 77 11 	movl   $0xc0117726,0xc(%esp)
c0109818:	c0 
c0109819:	c7 44 24 08 fd 76 11 	movl   $0xc01176fd,0x8(%esp)
c0109820:	c0 
c0109821:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109828:	00 
c0109829:	c7 04 24 12 77 11 c0 	movl   $0xc0117712,(%esp)
c0109830:	e8 93 76 ff ff       	call   c0100ec8 <__panic>
    for(i=0; i<num_cv; i++){
c0109835:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010983c:	eb 61                	jmp    c010989f <monitor_init+0x120>
        mtp->cv[i].count=0;
c010983e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109841:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109844:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109847:	89 d0                	mov    %edx,%eax
c0109849:	c1 e0 02             	shl    $0x2,%eax
c010984c:	01 d0                	add    %edx,%eax
c010984e:	c1 e0 02             	shl    $0x2,%eax
c0109851:	01 c8                	add    %ecx,%eax
c0109853:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010985a:	8b 45 08             	mov    0x8(%ebp),%eax
c010985d:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109860:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109863:	89 d0                	mov    %edx,%eax
c0109865:	c1 e0 02             	shl    $0x2,%eax
c0109868:	01 d0                	add    %edx,%eax
c010986a:	c1 e0 02             	shl    $0x2,%eax
c010986d:	01 c8                	add    %ecx,%eax
c010986f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109876:	00 
c0109877:	89 04 24             	mov    %eax,(%esp)
c010987a:	e8 ba 01 00 00       	call   c0109a39 <sem_init>
        mtp->cv[i].owner=mtp;
c010987f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109882:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109885:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109888:	89 d0                	mov    %edx,%eax
c010988a:	c1 e0 02             	shl    $0x2,%eax
c010988d:	01 d0                	add    %edx,%eax
c010988f:	c1 e0 02             	shl    $0x2,%eax
c0109892:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109895:	8b 45 08             	mov    0x8(%ebp),%eax
c0109898:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c010989b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010989f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098a2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01098a5:	72 97                	jb     c010983e <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01098a7:	c9                   	leave  
c01098a8:	c3                   	ret    

c01098a9 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01098a9:	55                   	push   %ebp
c01098aa:	89 e5                	mov    %esp,%ebp
c01098ac:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01098af:	8b 45 08             	mov    0x8(%ebp),%eax
c01098b2:	8b 40 10             	mov    0x10(%eax),%eax
c01098b5:	8b 50 18             	mov    0x18(%eax),%edx
c01098b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01098bb:	8b 40 0c             	mov    0xc(%eax),%eax
c01098be:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01098c2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01098c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098cd:	c7 04 24 34 77 11 c0 	movl   $0xc0117734,(%esp)
c01098d4:	e8 8c 6a ff ff       	call   c0100365 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   if(cvp->count > 0){
c01098d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098dc:	8b 40 0c             	mov    0xc(%eax),%eax
c01098df:	85 c0                	test   %eax,%eax
c01098e1:	7e 3a                	jle    c010991d <cond_signal+0x74>
	   cvp->owner->next_count++;
c01098e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e6:	8b 40 10             	mov    0x10(%eax),%eax
c01098e9:	8b 50 18             	mov    0x18(%eax),%edx
c01098ec:	83 c2 01             	add    $0x1,%edx
c01098ef:	89 50 18             	mov    %edx,0x18(%eax)
	   up(&(cvp->sem));
c01098f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f5:	89 04 24             	mov    %eax,(%esp)
c01098f8:	e8 af 02 00 00       	call   c0109bac <up>
	   down(&(cvp->owner->next));
c01098fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109900:	8b 40 10             	mov    0x10(%eax),%eax
c0109903:	83 c0 0c             	add    $0xc,%eax
c0109906:	89 04 24             	mov    %eax,(%esp)
c0109909:	e8 b9 02 00 00       	call   c0109bc7 <down>
	   cvp->owner->next_count--;
c010990e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109911:	8b 40 10             	mov    0x10(%eax),%eax
c0109914:	8b 50 18             	mov    0x18(%eax),%edx
c0109917:	83 ea 01             	sub    $0x1,%edx
c010991a:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010991d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109920:	8b 40 10             	mov    0x10(%eax),%eax
c0109923:	8b 50 18             	mov    0x18(%eax),%edx
c0109926:	8b 45 08             	mov    0x8(%ebp),%eax
c0109929:	8b 40 0c             	mov    0xc(%eax),%eax
c010992c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109930:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109934:	8b 45 08             	mov    0x8(%ebp),%eax
c0109937:	89 44 24 04          	mov    %eax,0x4(%esp)
c010993b:	c7 04 24 7c 77 11 c0 	movl   $0xc011777c,(%esp)
c0109942:	e8 1e 6a ff ff       	call   c0100365 <cprintf>
}
c0109947:	c9                   	leave  
c0109948:	c3                   	ret    

c0109949 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109949:	55                   	push   %ebp
c010994a:	89 e5                	mov    %esp,%ebp
c010994c:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010994f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109952:	8b 40 10             	mov    0x10(%eax),%eax
c0109955:	8b 50 18             	mov    0x18(%eax),%edx
c0109958:	8b 45 08             	mov    0x8(%ebp),%eax
c010995b:	8b 40 0c             	mov    0xc(%eax),%eax
c010995e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109962:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109966:	8b 45 08             	mov    0x8(%ebp),%eax
c0109969:	89 44 24 04          	mov    %eax,0x4(%esp)
c010996d:	c7 04 24 c0 77 11 c0 	movl   $0xc01177c0,(%esp)
c0109974:	e8 ec 69 ff ff       	call   c0100365 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    cvp->count++;
c0109979:	8b 45 08             	mov    0x8(%ebp),%eax
c010997c:	8b 40 0c             	mov    0xc(%eax),%eax
c010997f:	8d 50 01             	lea    0x1(%eax),%edx
c0109982:	8b 45 08             	mov    0x8(%ebp),%eax
c0109985:	89 50 0c             	mov    %edx,0xc(%eax)
    if(cvp->owner->next_count > 0){
c0109988:	8b 45 08             	mov    0x8(%ebp),%eax
c010998b:	8b 40 10             	mov    0x10(%eax),%eax
c010998e:	8b 40 18             	mov    0x18(%eax),%eax
c0109991:	85 c0                	test   %eax,%eax
c0109993:	7e 13                	jle    c01099a8 <cond_wait+0x5f>
    	up(&(cvp->owner->next));
c0109995:	8b 45 08             	mov    0x8(%ebp),%eax
c0109998:	8b 40 10             	mov    0x10(%eax),%eax
c010999b:	83 c0 0c             	add    $0xc,%eax
c010999e:	89 04 24             	mov    %eax,(%esp)
c01099a1:	e8 06 02 00 00       	call   c0109bac <up>
c01099a6:	eb 0e                	jmp    c01099b6 <cond_wait+0x6d>
    }
    else{
    	up(&(cvp->owner->mutex));
c01099a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ab:	8b 40 10             	mov    0x10(%eax),%eax
c01099ae:	89 04 24             	mov    %eax,(%esp)
c01099b1:	e8 f6 01 00 00       	call   c0109bac <up>
    }
    down(&(cvp->sem));
c01099b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b9:	89 04 24             	mov    %eax,(%esp)
c01099bc:	e8 06 02 00 00       	call   c0109bc7 <down>
    cvp->count--;
c01099c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c4:	8b 40 0c             	mov    0xc(%eax),%eax
c01099c7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01099ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01099cd:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01099d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d3:	8b 40 10             	mov    0x10(%eax),%eax
c01099d6:	8b 50 18             	mov    0x18(%eax),%edx
c01099d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01099dc:	8b 40 0c             	mov    0xc(%eax),%eax
c01099df:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01099e3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099ee:	c7 04 24 04 78 11 c0 	movl   $0xc0117804,(%esp)
c01099f5:	e8 6b 69 ff ff       	call   c0100365 <cprintf>
}
c01099fa:	c9                   	leave  
c01099fb:	c3                   	ret    

c01099fc <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01099fc:	55                   	push   %ebp
c01099fd:	89 e5                	mov    %esp,%ebp
c01099ff:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109a02:	9c                   	pushf  
c0109a03:	58                   	pop    %eax
c0109a04:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109a0a:	25 00 02 00 00       	and    $0x200,%eax
c0109a0f:	85 c0                	test   %eax,%eax
c0109a11:	74 0c                	je     c0109a1f <__intr_save+0x23>
        intr_disable();
c0109a13:	e8 12 87 ff ff       	call   c010212a <intr_disable>
        return 1;
c0109a18:	b8 01 00 00 00       	mov    $0x1,%eax
c0109a1d:	eb 05                	jmp    c0109a24 <__intr_save+0x28>
    }
    return 0;
c0109a1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109a24:	c9                   	leave  
c0109a25:	c3                   	ret    

c0109a26 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109a26:	55                   	push   %ebp
c0109a27:	89 e5                	mov    %esp,%ebp
c0109a29:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109a2c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109a30:	74 05                	je     c0109a37 <__intr_restore+0x11>
        intr_enable();
c0109a32:	e8 ed 86 ff ff       	call   c0102124 <intr_enable>
    }
}
c0109a37:	c9                   	leave  
c0109a38:	c3                   	ret    

c0109a39 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109a39:	55                   	push   %ebp
c0109a3a:	89 e5                	mov    %esp,%ebp
c0109a3c:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109a3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a42:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109a45:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109a47:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a4a:	83 c0 04             	add    $0x4,%eax
c0109a4d:	89 04 24             	mov    %eax,(%esp)
c0109a50:	e8 33 02 00 00       	call   c0109c88 <wait_queue_init>
}
c0109a55:	c9                   	leave  
c0109a56:	c3                   	ret    

c0109a57 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109a57:	55                   	push   %ebp
c0109a58:	89 e5                	mov    %esp,%ebp
c0109a5a:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109a5d:	e8 9a ff ff ff       	call   c01099fc <__intr_save>
c0109a62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109a65:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a68:	83 c0 04             	add    $0x4,%eax
c0109a6b:	89 04 24             	mov    %eax,(%esp)
c0109a6e:	e8 69 04 00 00       	call   c0109edc <wait_queue_first>
c0109a73:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109a7a:	75 0f                	jne    c0109a8b <__up+0x34>
            sem->value ++;
c0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a7f:	8b 00                	mov    (%eax),%eax
c0109a81:	8d 50 01             	lea    0x1(%eax),%edx
c0109a84:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a87:	89 10                	mov    %edx,(%eax)
c0109a89:	eb 58                	jmp    c0109ae3 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109a8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a8e:	8b 00                	mov    (%eax),%eax
c0109a90:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109a96:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109a99:	74 24                	je     c0109abf <__up+0x68>
c0109a9b:	c7 44 24 0c 48 78 11 	movl   $0xc0117848,0xc(%esp)
c0109aa2:	c0 
c0109aa3:	c7 44 24 08 6d 78 11 	movl   $0xc011786d,0x8(%esp)
c0109aaa:	c0 
c0109aab:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109ab2:	00 
c0109ab3:	c7 04 24 82 78 11 c0 	movl   $0xc0117882,(%esp)
c0109aba:	e8 09 74 ff ff       	call   c0100ec8 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109abf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac2:	8d 50 04             	lea    0x4(%eax),%edx
c0109ac5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109acc:	00 
c0109acd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ad0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ad7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109adb:	89 14 24             	mov    %edx,(%esp)
c0109ade:	e8 95 04 00 00       	call   c0109f78 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ae6:	89 04 24             	mov    %eax,(%esp)
c0109ae9:	e8 38 ff ff ff       	call   c0109a26 <__intr_restore>
}
c0109aee:	c9                   	leave  
c0109aef:	c3                   	ret    

c0109af0 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109af0:	55                   	push   %ebp
c0109af1:	89 e5                	mov    %esp,%ebp
c0109af3:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109af6:	e8 01 ff ff ff       	call   c01099fc <__intr_save>
c0109afb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109afe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b01:	8b 00                	mov    (%eax),%eax
c0109b03:	85 c0                	test   %eax,%eax
c0109b05:	7e 22                	jle    c0109b29 <__down+0x39>
        sem->value --;
c0109b07:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0a:	8b 00                	mov    (%eax),%eax
c0109b0c:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b12:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b17:	89 04 24             	mov    %eax,(%esp)
c0109b1a:	e8 07 ff ff ff       	call   c0109a26 <__intr_restore>
        return 0;
c0109b1f:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b24:	e9 81 00 00 00       	jmp    c0109baa <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109b29:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109b2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b32:	8d 50 04             	lea    0x4(%eax),%edx
c0109b35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b38:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b43:	89 14 24             	mov    %edx,(%esp)
c0109b46:	e8 34 05 00 00       	call   c010a07f <wait_current_set>
    local_intr_restore(intr_flag);
c0109b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b4e:	89 04 24             	mov    %eax,(%esp)
c0109b51:	e8 d0 fe ff ff       	call   c0109a26 <__intr_restore>

    schedule();
c0109b56:	e8 02 4a 00 00       	call   c010e55d <schedule>

    local_intr_save(intr_flag);
c0109b5b:	e8 9c fe ff ff       	call   c01099fc <__intr_save>
c0109b60:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109b63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b66:	89 04 24             	mov    %eax,(%esp)
c0109b69:	e8 e2 03 00 00       	call   c0109f50 <wait_in_queue>
c0109b6e:	85 c0                	test   %eax,%eax
c0109b70:	74 15                	je     c0109b87 <__down+0x97>
c0109b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b75:	8d 50 04             	lea    0x4(%eax),%edx
c0109b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b7f:	89 14 24             	mov    %edx,(%esp)
c0109b82:	e8 c4 01 00 00       	call   c0109d4b <wait_queue_del>
    local_intr_restore(intr_flag);
c0109b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b8a:	89 04 24             	mov    %eax,(%esp)
c0109b8d:	e8 94 fe ff ff       	call   c0109a26 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109b92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b95:	8b 40 04             	mov    0x4(%eax),%eax
c0109b98:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109b9b:	74 08                	je     c0109ba5 <__down+0xb5>
        return wait->wakeup_flags;
c0109b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ba0:	8b 40 04             	mov    0x4(%eax),%eax
c0109ba3:	eb 05                	jmp    c0109baa <__down+0xba>
    }
    return 0;
c0109ba5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109baa:	c9                   	leave  
c0109bab:	c3                   	ret    

c0109bac <up>:

void
up(semaphore_t *sem) {
c0109bac:	55                   	push   %ebp
c0109bad:	89 e5                	mov    %esp,%ebp
c0109baf:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109bb2:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109bb9:	00 
c0109bba:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bbd:	89 04 24             	mov    %eax,(%esp)
c0109bc0:	e8 92 fe ff ff       	call   c0109a57 <__up>
}
c0109bc5:	c9                   	leave  
c0109bc6:	c3                   	ret    

c0109bc7 <down>:

void
down(semaphore_t *sem) {
c0109bc7:	55                   	push   %ebp
c0109bc8:	89 e5                	mov    %esp,%ebp
c0109bca:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109bcd:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109bd4:	00 
c0109bd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd8:	89 04 24             	mov    %eax,(%esp)
c0109bdb:	e8 10 ff ff ff       	call   c0109af0 <__down>
c0109be0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109be3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109be7:	74 24                	je     c0109c0d <down+0x46>
c0109be9:	c7 44 24 0c 92 78 11 	movl   $0xc0117892,0xc(%esp)
c0109bf0:	c0 
c0109bf1:	c7 44 24 08 6d 78 11 	movl   $0xc011786d,0x8(%esp)
c0109bf8:	c0 
c0109bf9:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109c00:	00 
c0109c01:	c7 04 24 82 78 11 c0 	movl   $0xc0117882,(%esp)
c0109c08:	e8 bb 72 ff ff       	call   c0100ec8 <__panic>
}
c0109c0d:	c9                   	leave  
c0109c0e:	c3                   	ret    

c0109c0f <try_down>:

bool
try_down(semaphore_t *sem) {
c0109c0f:	55                   	push   %ebp
c0109c10:	89 e5                	mov    %esp,%ebp
c0109c12:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109c15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109c1c:	e8 db fd ff ff       	call   c01099fc <__intr_save>
c0109c21:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109c24:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c27:	8b 00                	mov    (%eax),%eax
c0109c29:	85 c0                	test   %eax,%eax
c0109c2b:	7e 14                	jle    c0109c41 <try_down+0x32>
        sem->value --, ret = 1;
c0109c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c30:	8b 00                	mov    (%eax),%eax
c0109c32:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c35:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c38:	89 10                	mov    %edx,(%eax)
c0109c3a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109c41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c44:	89 04 24             	mov    %eax,(%esp)
c0109c47:	e8 da fd ff ff       	call   c0109a26 <__intr_restore>
    return ret;
c0109c4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109c4f:	c9                   	leave  
c0109c50:	c3                   	ret    

c0109c51 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109c51:	55                   	push   %ebp
c0109c52:	89 e5                	mov    %esp,%ebp
c0109c54:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109c57:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109c5d:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109c5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c62:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109c69:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c6c:	83 c0 0c             	add    $0xc,%eax
c0109c6f:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109c72:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c75:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109c78:	89 50 04             	mov    %edx,0x4(%eax)
c0109c7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c7e:	8b 50 04             	mov    0x4(%eax),%edx
c0109c81:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c84:	89 10                	mov    %edx,(%eax)
}
c0109c86:	c9                   	leave  
c0109c87:	c3                   	ret    

c0109c88 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109c88:	55                   	push   %ebp
c0109c89:	89 e5                	mov    %esp,%ebp
c0109c8b:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109c8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c91:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109c94:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109c97:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109c9a:	89 50 04             	mov    %edx,0x4(%eax)
c0109c9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ca0:	8b 50 04             	mov    0x4(%eax),%edx
c0109ca3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ca6:	89 10                	mov    %edx,(%eax)
}
c0109ca8:	c9                   	leave  
c0109ca9:	c3                   	ret    

c0109caa <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109caa:	55                   	push   %ebp
c0109cab:	89 e5                	mov    %esp,%ebp
c0109cad:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cb3:	83 c0 0c             	add    $0xc,%eax
c0109cb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cbc:	8b 40 04             	mov    0x4(%eax),%eax
c0109cbf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109cc2:	0f 94 c0             	sete   %al
c0109cc5:	0f b6 c0             	movzbl %al,%eax
c0109cc8:	85 c0                	test   %eax,%eax
c0109cca:	74 09                	je     c0109cd5 <wait_queue_add+0x2b>
c0109ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ccf:	8b 00                	mov    (%eax),%eax
c0109cd1:	85 c0                	test   %eax,%eax
c0109cd3:	75 24                	jne    c0109cf9 <wait_queue_add+0x4f>
c0109cd5:	c7 44 24 0c a0 78 11 	movl   $0xc01178a0,0xc(%esp)
c0109cdc:	c0 
c0109cdd:	c7 44 24 08 d5 78 11 	movl   $0xc01178d5,0x8(%esp)
c0109ce4:	c0 
c0109ce5:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109cec:	00 
c0109ced:	c7 04 24 ea 78 11 c0 	movl   $0xc01178ea,(%esp)
c0109cf4:	e8 cf 71 ff ff       	call   c0100ec8 <__panic>
    wait->wait_queue = queue;
c0109cf9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cfc:	8b 55 08             	mov    0x8(%ebp),%edx
c0109cff:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d05:	8d 50 0c             	lea    0xc(%eax),%edx
c0109d08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d0e:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109d11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d14:	8b 00                	mov    (%eax),%eax
c0109d16:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109d19:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109d1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109d1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d22:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109d25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d28:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109d2b:	89 10                	mov    %edx,(%eax)
c0109d2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109d30:	8b 10                	mov    (%eax),%edx
c0109d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d35:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109d38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d3b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109d3e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109d41:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d44:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109d47:	89 10                	mov    %edx,(%eax)
}
c0109d49:	c9                   	leave  
c0109d4a:	c3                   	ret    

c0109d4b <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109d4b:	55                   	push   %ebp
c0109d4c:	89 e5                	mov    %esp,%ebp
c0109d4e:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109d51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d54:	83 c0 0c             	add    $0xc,%eax
c0109d57:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d5d:	8b 40 04             	mov    0x4(%eax),%eax
c0109d60:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109d63:	0f 94 c0             	sete   %al
c0109d66:	0f b6 c0             	movzbl %al,%eax
c0109d69:	85 c0                	test   %eax,%eax
c0109d6b:	75 0b                	jne    c0109d78 <wait_queue_del+0x2d>
c0109d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d70:	8b 40 08             	mov    0x8(%eax),%eax
c0109d73:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109d76:	74 24                	je     c0109d9c <wait_queue_del+0x51>
c0109d78:	c7 44 24 0c fc 78 11 	movl   $0xc01178fc,0xc(%esp)
c0109d7f:	c0 
c0109d80:	c7 44 24 08 d5 78 11 	movl   $0xc01178d5,0x8(%esp)
c0109d87:	c0 
c0109d88:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109d8f:	00 
c0109d90:	c7 04 24 ea 78 11 c0 	movl   $0xc01178ea,(%esp)
c0109d97:	e8 2c 71 ff ff       	call   c0100ec8 <__panic>
    list_del_init(&(wait->wait_link));
c0109d9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d9f:	83 c0 0c             	add    $0xc,%eax
c0109da2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109da5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109da8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109dab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109dae:	8b 40 04             	mov    0x4(%eax),%eax
c0109db1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109db4:	8b 12                	mov    (%edx),%edx
c0109db6:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109db9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109dbc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dbf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109dc2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109dc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109dc8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109dcb:	89 10                	mov    %edx,(%eax)
c0109dcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dd0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109dd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109dd6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109dd9:	89 50 04             	mov    %edx,0x4(%eax)
c0109ddc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ddf:	8b 50 04             	mov    0x4(%eax),%edx
c0109de2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109de5:	89 10                	mov    %edx,(%eax)
}
c0109de7:	c9                   	leave  
c0109de8:	c3                   	ret    

c0109de9 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109de9:	55                   	push   %ebp
c0109dea:	89 e5                	mov    %esp,%ebp
c0109dec:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109def:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109df2:	83 c0 0c             	add    $0xc,%eax
c0109df5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109df8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dfb:	8b 40 04             	mov    0x4(%eax),%eax
c0109dfe:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109e01:	0f 94 c0             	sete   %al
c0109e04:	0f b6 c0             	movzbl %al,%eax
c0109e07:	85 c0                	test   %eax,%eax
c0109e09:	75 0b                	jne    c0109e16 <wait_queue_next+0x2d>
c0109e0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e0e:	8b 40 08             	mov    0x8(%eax),%eax
c0109e11:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e14:	74 24                	je     c0109e3a <wait_queue_next+0x51>
c0109e16:	c7 44 24 0c fc 78 11 	movl   $0xc01178fc,0xc(%esp)
c0109e1d:	c0 
c0109e1e:	c7 44 24 08 d5 78 11 	movl   $0xc01178d5,0x8(%esp)
c0109e25:	c0 
c0109e26:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109e2d:	00 
c0109e2e:	c7 04 24 ea 78 11 c0 	movl   $0xc01178ea,(%esp)
c0109e35:	e8 8e 70 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109e3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e3d:	83 c0 0c             	add    $0xc,%eax
c0109e40:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e46:	8b 40 04             	mov    0x4(%eax),%eax
c0109e49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109e4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109e52:	74 08                	je     c0109e5c <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e57:	83 e8 0c             	sub    $0xc,%eax
c0109e5a:	eb 05                	jmp    c0109e61 <wait_queue_next+0x78>
    }
    return NULL;
c0109e5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e61:	c9                   	leave  
c0109e62:	c3                   	ret    

c0109e63 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109e63:	55                   	push   %ebp
c0109e64:	89 e5                	mov    %esp,%ebp
c0109e66:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109e69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e6c:	83 c0 0c             	add    $0xc,%eax
c0109e6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e75:	8b 40 04             	mov    0x4(%eax),%eax
c0109e78:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109e7b:	0f 94 c0             	sete   %al
c0109e7e:	0f b6 c0             	movzbl %al,%eax
c0109e81:	85 c0                	test   %eax,%eax
c0109e83:	75 0b                	jne    c0109e90 <wait_queue_prev+0x2d>
c0109e85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e88:	8b 40 08             	mov    0x8(%eax),%eax
c0109e8b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e8e:	74 24                	je     c0109eb4 <wait_queue_prev+0x51>
c0109e90:	c7 44 24 0c fc 78 11 	movl   $0xc01178fc,0xc(%esp)
c0109e97:	c0 
c0109e98:	c7 44 24 08 d5 78 11 	movl   $0xc01178d5,0x8(%esp)
c0109e9f:	c0 
c0109ea0:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109ea7:	00 
c0109ea8:	c7 04 24 ea 78 11 c0 	movl   $0xc01178ea,(%esp)
c0109eaf:	e8 14 70 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109eb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eb7:	83 c0 0c             	add    $0xc,%eax
c0109eba:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109ebd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ec0:	8b 00                	mov    (%eax),%eax
c0109ec2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109ec5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109ecb:	74 08                	je     c0109ed5 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ed0:	83 e8 0c             	sub    $0xc,%eax
c0109ed3:	eb 05                	jmp    c0109eda <wait_queue_prev+0x77>
    }
    return NULL;
c0109ed5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109eda:	c9                   	leave  
c0109edb:	c3                   	ret    

c0109edc <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109edc:	55                   	push   %ebp
c0109edd:	89 e5                	mov    %esp,%ebp
c0109edf:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109ee2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ee5:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109ee8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109eeb:	8b 40 04             	mov    0x4(%eax),%eax
c0109eee:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109ef1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109ef7:	74 08                	je     c0109f01 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109ef9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109efc:	83 e8 0c             	sub    $0xc,%eax
c0109eff:	eb 05                	jmp    c0109f06 <wait_queue_first+0x2a>
    }
    return NULL;
c0109f01:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f06:	c9                   	leave  
c0109f07:	c3                   	ret    

c0109f08 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109f08:	55                   	push   %ebp
c0109f09:	89 e5                	mov    %esp,%ebp
c0109f0b:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109f0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f11:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109f14:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f17:	8b 00                	mov    (%eax),%eax
c0109f19:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109f1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f1f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109f22:	74 08                	je     c0109f2c <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109f24:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f27:	83 e8 0c             	sub    $0xc,%eax
c0109f2a:	eb 05                	jmp    c0109f31 <wait_queue_last+0x29>
    }
    return NULL;
c0109f2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f31:	c9                   	leave  
c0109f32:	c3                   	ret    

c0109f33 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109f33:	55                   	push   %ebp
c0109f34:	89 e5                	mov    %esp,%ebp
c0109f36:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109f39:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f42:	8b 40 04             	mov    0x4(%eax),%eax
c0109f45:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109f48:	0f 94 c0             	sete   %al
c0109f4b:	0f b6 c0             	movzbl %al,%eax
}
c0109f4e:	c9                   	leave  
c0109f4f:	c3                   	ret    

c0109f50 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109f50:	55                   	push   %ebp
c0109f51:	89 e5                	mov    %esp,%ebp
c0109f53:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f59:	83 c0 0c             	add    $0xc,%eax
c0109f5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109f5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f62:	8b 40 04             	mov    0x4(%eax),%eax
c0109f65:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109f68:	0f 94 c0             	sete   %al
c0109f6b:	0f b6 c0             	movzbl %al,%eax
c0109f6e:	85 c0                	test   %eax,%eax
c0109f70:	0f 94 c0             	sete   %al
c0109f73:	0f b6 c0             	movzbl %al,%eax
}
c0109f76:	c9                   	leave  
c0109f77:	c3                   	ret    

c0109f78 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109f78:	55                   	push   %ebp
c0109f79:	89 e5                	mov    %esp,%ebp
c0109f7b:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109f7e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109f82:	74 12                	je     c0109f96 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109f84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f8e:	89 04 24             	mov    %eax,(%esp)
c0109f91:	e8 b5 fd ff ff       	call   c0109d4b <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109f96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f99:	8b 55 10             	mov    0x10(%ebp),%edx
c0109f9c:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fa2:	8b 00                	mov    (%eax),%eax
c0109fa4:	89 04 24             	mov    %eax,(%esp)
c0109fa7:	e8 15 45 00 00       	call   c010e4c1 <wakeup_proc>
}
c0109fac:	c9                   	leave  
c0109fad:	c3                   	ret    

c0109fae <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109fae:	55                   	push   %ebp
c0109faf:	89 e5                	mov    %esp,%ebp
c0109fb1:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109fb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fb7:	89 04 24             	mov    %eax,(%esp)
c0109fba:	e8 1d ff ff ff       	call   c0109edc <wait_queue_first>
c0109fbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fc6:	74 20                	je     c0109fe8 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109fc8:	8b 45 10             	mov    0x10(%ebp),%eax
c0109fcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fe0:	89 04 24             	mov    %eax,(%esp)
c0109fe3:	e8 90 ff ff ff       	call   c0109f78 <wakeup_wait>
    }
}
c0109fe8:	c9                   	leave  
c0109fe9:	c3                   	ret    

c0109fea <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109fea:	55                   	push   %ebp
c0109feb:	89 e5                	mov    %esp,%ebp
c0109fed:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109ff0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ff3:	89 04 24             	mov    %eax,(%esp)
c0109ff6:	e8 e1 fe ff ff       	call   c0109edc <wait_queue_first>
c0109ffb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ffe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a002:	74 79                	je     c010a07d <wakeup_queue+0x93>
        if (del) {
c010a004:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a008:	74 37                	je     c010a041 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a00a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a011:	00 
c010a012:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a015:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a019:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a01c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a020:	8b 45 08             	mov    0x8(%ebp),%eax
c010a023:	89 04 24             	mov    %eax,(%esp)
c010a026:	e8 4d ff ff ff       	call   c0109f78 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a02b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a02e:	89 04 24             	mov    %eax,(%esp)
c010a031:	e8 a6 fe ff ff       	call   c0109edc <wait_queue_first>
c010a036:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a039:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a03d:	75 cb                	jne    c010a00a <wakeup_queue+0x20>
c010a03f:	eb 3c                	jmp    c010a07d <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a041:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a048:	00 
c010a049:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a04c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a050:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a053:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a057:	8b 45 08             	mov    0x8(%ebp),%eax
c010a05a:	89 04 24             	mov    %eax,(%esp)
c010a05d:	e8 16 ff ff ff       	call   c0109f78 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a065:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a069:	8b 45 08             	mov    0x8(%ebp),%eax
c010a06c:	89 04 24             	mov    %eax,(%esp)
c010a06f:	e8 75 fd ff ff       	call   c0109de9 <wait_queue_next>
c010a074:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a077:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a07b:	75 c4                	jne    c010a041 <wakeup_queue+0x57>
        }
    }
}
c010a07d:	c9                   	leave  
c010a07e:	c3                   	ret    

c010a07f <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a07f:	55                   	push   %ebp
c010a080:	89 e5                	mov    %esp,%ebp
c010a082:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a085:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a08a:	85 c0                	test   %eax,%eax
c010a08c:	75 24                	jne    c010a0b2 <wait_current_set+0x33>
c010a08e:	c7 44 24 0c 39 79 11 	movl   $0xc0117939,0xc(%esp)
c010a095:	c0 
c010a096:	c7 44 24 08 d5 78 11 	movl   $0xc01178d5,0x8(%esp)
c010a09d:	c0 
c010a09e:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a0a5:	00 
c010a0a6:	c7 04 24 ea 78 11 c0 	movl   $0xc01178ea,(%esp)
c010a0ad:	e8 16 6e ff ff       	call   c0100ec8 <__panic>
    wait_init(wait, current);
c010a0b2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a0b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0be:	89 04 24             	mov    %eax,(%esp)
c010a0c1:	e8 8b fb ff ff       	call   c0109c51 <wait_init>
    current->state = PROC_SLEEPING;
c010a0c6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a0cb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a0d1:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a0d6:	8b 55 10             	mov    0x10(%ebp),%edx
c010a0d9:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a0df:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0e9:	89 04 24             	mov    %eax,(%esp)
c010a0ec:	e8 b9 fb ff ff       	call   c0109caa <wait_queue_add>
}
c010a0f1:	c9                   	leave  
c010a0f2:	c3                   	ret    

c010a0f3 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a0f3:	55                   	push   %ebp
c010a0f4:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a0f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f9:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a0fc:	5d                   	pop    %ebp
c010a0fd:	c3                   	ret    

c010a0fe <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a0fe:	55                   	push   %ebp
c010a0ff:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a101:	8b 45 08             	mov    0x8(%ebp),%eax
c010a104:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a107:	5d                   	pop    %ebp
c010a108:	c3                   	ret    

c010a109 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a109:	55                   	push   %ebp
c010a10a:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a10c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a10f:	8b 40 18             	mov    0x18(%eax),%eax
c010a112:	8d 50 01             	lea    0x1(%eax),%edx
c010a115:	8b 45 08             	mov    0x8(%ebp),%eax
c010a118:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a11b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a11e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a121:	5d                   	pop    %ebp
c010a122:	c3                   	ret    

c010a123 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a123:	55                   	push   %ebp
c010a124:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a126:	8b 45 08             	mov    0x8(%ebp),%eax
c010a129:	8b 40 18             	mov    0x18(%eax),%eax
c010a12c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a12f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a132:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a135:	8b 45 08             	mov    0x8(%ebp),%eax
c010a138:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a13b:	5d                   	pop    %ebp
c010a13c:	c3                   	ret    

c010a13d <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a13d:	55                   	push   %ebp
c010a13e:	89 e5                	mov    %esp,%ebp
c010a140:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a143:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a148:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a14e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a151:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a155:	74 0f                	je     c010a166 <get_fd_array+0x29>
c010a157:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a15a:	89 04 24             	mov    %eax,(%esp)
c010a15d:	e8 91 ff ff ff       	call   c010a0f3 <files_count>
c010a162:	85 c0                	test   %eax,%eax
c010a164:	7f 24                	jg     c010a18a <get_fd_array+0x4d>
c010a166:	c7 44 24 0c 4c 79 11 	movl   $0xc011794c,0xc(%esp)
c010a16d:	c0 
c010a16e:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a175:	c0 
c010a176:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a17d:	00 
c010a17e:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a185:	e8 3e 6d ff ff       	call   c0100ec8 <__panic>
    return filesp->fd_array;
c010a18a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a18d:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a190:	c9                   	leave  
c010a191:	c3                   	ret    

c010a192 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a192:	55                   	push   %ebp
c010a193:	89 e5                	mov    %esp,%ebp
c010a195:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a198:	8b 45 08             	mov    0x8(%ebp),%eax
c010a19b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a19e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a1a5:	eb 24                	jmp    c010a1cb <fd_array_init+0x39>
        file->open_count = 0;
c010a1a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1aa:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a1b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a1ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1bd:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a1c0:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a1c3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a1c7:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a1cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1ce:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a1d3:	76 d2                	jbe    c010a1a7 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a1d5:	c9                   	leave  
c010a1d6:	c3                   	ret    

c010a1d7 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a1d7:	55                   	push   %ebp
c010a1d8:	89 e5                	mov    %esp,%ebp
c010a1da:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a1dd:	e8 5b ff ff ff       	call   c010a13d <get_fd_array>
c010a1e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a1e5:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a1ec:	75 30                	jne    c010a21e <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a1ee:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a1f5:	eb 13                	jmp    c010a20a <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010a1f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1fa:	8b 00                	mov    (%eax),%eax
c010a1fc:	85 c0                	test   %eax,%eax
c010a1fe:	75 02                	jne    c010a202 <fd_array_alloc+0x2b>
                goto found;
c010a200:	eb 59                	jmp    c010a25b <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a202:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a206:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a20a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a20d:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a212:	76 e3                	jbe    c010a1f7 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a214:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a219:	e9 90 00 00 00       	jmp    c010a2ae <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010a21e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a222:	78 30                	js     c010a254 <fd_array_alloc+0x7d>
c010a224:	8b 45 08             	mov    0x8(%ebp),%eax
c010a227:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a22c:	77 26                	ja     c010a254 <fd_array_alloc+0x7d>
            file += fd;
c010a22e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a231:	c1 e0 02             	shl    $0x2,%eax
c010a234:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a23b:	29 c2                	sub    %eax,%edx
c010a23d:	89 d0                	mov    %edx,%eax
c010a23f:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a245:	8b 00                	mov    (%eax),%eax
c010a247:	85 c0                	test   %eax,%eax
c010a249:	75 02                	jne    c010a24d <fd_array_alloc+0x76>
                goto found;
c010a24b:	eb 0e                	jmp    c010a25b <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a24d:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a252:	eb 5a                	jmp    c010a2ae <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a254:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a259:	eb 53                	jmp    c010a2ae <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a25b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a25e:	89 04 24             	mov    %eax,(%esp)
c010a261:	e8 98 fe ff ff       	call   c010a0fe <fopen_count>
c010a266:	85 c0                	test   %eax,%eax
c010a268:	74 24                	je     c010a28e <fd_array_alloc+0xb7>
c010a26a:	c7 44 24 0c 9a 79 11 	movl   $0xc011799a,0xc(%esp)
c010a271:	c0 
c010a272:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a279:	c0 
c010a27a:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010a281:	00 
c010a282:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a289:	e8 3a 6c ff ff       	call   c0100ec8 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a28e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a291:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a29a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a2a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a2a7:	89 10                	mov    %edx,(%eax)
    return 0;
c010a2a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a2ae:	c9                   	leave  
c010a2af:	c3                   	ret    

c010a2b0 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a2b0:	55                   	push   %ebp
c010a2b1:	89 e5                	mov    %esp,%ebp
c010a2b3:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a2b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b9:	8b 00                	mov    (%eax),%eax
c010a2bb:	83 f8 01             	cmp    $0x1,%eax
c010a2be:	74 2e                	je     c010a2ee <fd_array_free+0x3e>
c010a2c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2c3:	8b 00                	mov    (%eax),%eax
c010a2c5:	83 f8 03             	cmp    $0x3,%eax
c010a2c8:	74 24                	je     c010a2ee <fd_array_free+0x3e>
c010a2ca:	c7 44 24 0c b4 79 11 	movl   $0xc01179b4,0xc(%esp)
c010a2d1:	c0 
c010a2d2:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a2d9:	c0 
c010a2da:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010a2e1:	00 
c010a2e2:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a2e9:	e8 da 6b ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) == 0);
c010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f1:	89 04 24             	mov    %eax,(%esp)
c010a2f4:	e8 05 fe ff ff       	call   c010a0fe <fopen_count>
c010a2f9:	85 c0                	test   %eax,%eax
c010a2fb:	74 24                	je     c010a321 <fd_array_free+0x71>
c010a2fd:	c7 44 24 0c 9a 79 11 	movl   $0xc011799a,0xc(%esp)
c010a304:	c0 
c010a305:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a30c:	c0 
c010a30d:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a314:	00 
c010a315:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a31c:	e8 a7 6b ff ff       	call   c0100ec8 <__panic>
    if (file->status == FD_CLOSED) {
c010a321:	8b 45 08             	mov    0x8(%ebp),%eax
c010a324:	8b 00                	mov    (%eax),%eax
c010a326:	83 f8 03             	cmp    $0x3,%eax
c010a329:	75 0e                	jne    c010a339 <fd_array_free+0x89>
        vfs_close(file->node);
c010a32b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a32e:	8b 40 14             	mov    0x14(%eax),%eax
c010a331:	89 04 24             	mov    %eax,(%esp)
c010a334:	e8 5a 5c 00 00       	call   c010ff93 <vfs_close>
    }
    file->status = FD_NONE;
c010a339:	8b 45 08             	mov    0x8(%ebp),%eax
c010a33c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a342:	c9                   	leave  
c010a343:	c3                   	ret    

c010a344 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a344:	55                   	push   %ebp
c010a345:	89 e5                	mov    %esp,%ebp
c010a347:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a34a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34d:	8b 00                	mov    (%eax),%eax
c010a34f:	83 f8 02             	cmp    $0x2,%eax
c010a352:	74 24                	je     c010a378 <fd_array_acquire+0x34>
c010a354:	c7 44 24 0c e9 79 11 	movl   $0xc01179e9,0xc(%esp)
c010a35b:	c0 
c010a35c:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a363:	c0 
c010a364:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010a36b:	00 
c010a36c:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a373:	e8 50 6b ff ff       	call   c0100ec8 <__panic>
    fopen_count_inc(file);
c010a378:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37b:	89 04 24             	mov    %eax,(%esp)
c010a37e:	e8 86 fd ff ff       	call   c010a109 <fopen_count_inc>
}
c010a383:	c9                   	leave  
c010a384:	c3                   	ret    

c010a385 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a385:	55                   	push   %ebp
c010a386:	89 e5                	mov    %esp,%ebp
c010a388:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a38b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a38e:	8b 00                	mov    (%eax),%eax
c010a390:	83 f8 02             	cmp    $0x2,%eax
c010a393:	74 2e                	je     c010a3c3 <fd_array_release+0x3e>
c010a395:	8b 45 08             	mov    0x8(%ebp),%eax
c010a398:	8b 00                	mov    (%eax),%eax
c010a39a:	83 f8 03             	cmp    $0x3,%eax
c010a39d:	74 24                	je     c010a3c3 <fd_array_release+0x3e>
c010a39f:	c7 44 24 0c 04 7a 11 	movl   $0xc0117a04,0xc(%esp)
c010a3a6:	c0 
c010a3a7:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a3ae:	c0 
c010a3af:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a3b6:	00 
c010a3b7:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a3be:	e8 05 6b ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a3c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3c6:	89 04 24             	mov    %eax,(%esp)
c010a3c9:	e8 30 fd ff ff       	call   c010a0fe <fopen_count>
c010a3ce:	85 c0                	test   %eax,%eax
c010a3d0:	7f 24                	jg     c010a3f6 <fd_array_release+0x71>
c010a3d2:	c7 44 24 0c 3b 7a 11 	movl   $0xc0117a3b,0xc(%esp)
c010a3d9:	c0 
c010a3da:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a3e1:	c0 
c010a3e2:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a3e9:	00 
c010a3ea:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a3f1:	e8 d2 6a ff ff       	call   c0100ec8 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a3f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3f9:	89 04 24             	mov    %eax,(%esp)
c010a3fc:	e8 22 fd ff ff       	call   c010a123 <fopen_count_dec>
c010a401:	85 c0                	test   %eax,%eax
c010a403:	75 0b                	jne    c010a410 <fd_array_release+0x8b>
        fd_array_free(file);
c010a405:	8b 45 08             	mov    0x8(%ebp),%eax
c010a408:	89 04 24             	mov    %eax,(%esp)
c010a40b:	e8 a0 fe ff ff       	call   c010a2b0 <fd_array_free>
    }
}
c010a410:	c9                   	leave  
c010a411:	c3                   	ret    

c010a412 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a412:	55                   	push   %ebp
c010a413:	89 e5                	mov    %esp,%ebp
c010a415:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a418:	8b 45 08             	mov    0x8(%ebp),%eax
c010a41b:	8b 00                	mov    (%eax),%eax
c010a41d:	83 f8 01             	cmp    $0x1,%eax
c010a420:	75 0a                	jne    c010a42c <fd_array_open+0x1a>
c010a422:	8b 45 08             	mov    0x8(%ebp),%eax
c010a425:	8b 40 14             	mov    0x14(%eax),%eax
c010a428:	85 c0                	test   %eax,%eax
c010a42a:	75 24                	jne    c010a450 <fd_array_open+0x3e>
c010a42c:	c7 44 24 0c 54 7a 11 	movl   $0xc0117a54,0xc(%esp)
c010a433:	c0 
c010a434:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a43b:	c0 
c010a43c:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010a443:	00 
c010a444:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a44b:	e8 78 6a ff ff       	call   c0100ec8 <__panic>
    file->status = FD_OPENED;
c010a450:	8b 45 08             	mov    0x8(%ebp),%eax
c010a453:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a459:	8b 45 08             	mov    0x8(%ebp),%eax
c010a45c:	89 04 24             	mov    %eax,(%esp)
c010a45f:	e8 a5 fc ff ff       	call   c010a109 <fopen_count_inc>
}
c010a464:	c9                   	leave  
c010a465:	c3                   	ret    

c010a466 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a466:	55                   	push   %ebp
c010a467:	89 e5                	mov    %esp,%ebp
c010a469:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a46c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a46f:	8b 00                	mov    (%eax),%eax
c010a471:	83 f8 02             	cmp    $0x2,%eax
c010a474:	74 24                	je     c010a49a <fd_array_close+0x34>
c010a476:	c7 44 24 0c e9 79 11 	movl   $0xc01179e9,0xc(%esp)
c010a47d:	c0 
c010a47e:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a485:	c0 
c010a486:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a48d:	00 
c010a48e:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a495:	e8 2e 6a ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a49a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a49d:	89 04 24             	mov    %eax,(%esp)
c010a4a0:	e8 59 fc ff ff       	call   c010a0fe <fopen_count>
c010a4a5:	85 c0                	test   %eax,%eax
c010a4a7:	7f 24                	jg     c010a4cd <fd_array_close+0x67>
c010a4a9:	c7 44 24 0c 3b 7a 11 	movl   $0xc0117a3b,0xc(%esp)
c010a4b0:	c0 
c010a4b1:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a4b8:	c0 
c010a4b9:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010a4c0:	00 
c010a4c1:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a4c8:	e8 fb 69 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_CLOSED;
c010a4cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d0:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a4d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d9:	89 04 24             	mov    %eax,(%esp)
c010a4dc:	e8 42 fc ff ff       	call   c010a123 <fopen_count_dec>
c010a4e1:	85 c0                	test   %eax,%eax
c010a4e3:	75 0b                	jne    c010a4f0 <fd_array_close+0x8a>
        fd_array_free(file);
c010a4e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4e8:	89 04 24             	mov    %eax,(%esp)
c010a4eb:	e8 c0 fd ff ff       	call   c010a2b0 <fd_array_free>
    }
}
c010a4f0:	c9                   	leave  
c010a4f1:	c3                   	ret    

c010a4f2 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a4f2:	55                   	push   %ebp
c010a4f3:	89 e5                	mov    %esp,%ebp
c010a4f5:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a4f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4fb:	8b 00                	mov    (%eax),%eax
c010a4fd:	83 f8 01             	cmp    $0x1,%eax
c010a500:	75 0a                	jne    c010a50c <fd_array_dup+0x1a>
c010a502:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a505:	8b 00                	mov    (%eax),%eax
c010a507:	83 f8 02             	cmp    $0x2,%eax
c010a50a:	74 24                	je     c010a530 <fd_array_dup+0x3e>
c010a50c:	c7 44 24 0c 84 7a 11 	movl   $0xc0117a84,0xc(%esp)
c010a513:	c0 
c010a514:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a51b:	c0 
c010a51c:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010a523:	00 
c010a524:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a52b:	e8 98 69 ff ff       	call   c0100ec8 <__panic>
    to->pos = from->pos;
c010a530:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a533:	8b 50 10             	mov    0x10(%eax),%edx
c010a536:	8b 45 08             	mov    0x8(%ebp),%eax
c010a539:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a53c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a53f:	8b 50 04             	mov    0x4(%eax),%edx
c010a542:	8b 45 08             	mov    0x8(%ebp),%eax
c010a545:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a548:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a54b:	8b 50 08             	mov    0x8(%eax),%edx
c010a54e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a551:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a554:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a557:	8b 40 14             	mov    0x14(%eax),%eax
c010a55a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a55d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a560:	89 04 24             	mov    %eax,(%esp)
c010a563:	e8 5a 4a 00 00       	call   c010efc2 <inode_ref_inc>
c010a568:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a56b:	89 04 24             	mov    %eax,(%esp)
c010a56e:	e8 56 4b 00 00       	call   c010f0c9 <inode_open_inc>
    to->node = node;
c010a573:	8b 45 08             	mov    0x8(%ebp),%eax
c010a576:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a579:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a57c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57f:	89 04 24             	mov    %eax,(%esp)
c010a582:	e8 8b fe ff ff       	call   c010a412 <fd_array_open>
}
c010a587:	c9                   	leave  
c010a588:	c3                   	ret    

c010a589 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a589:	55                   	push   %ebp
c010a58a:	89 e5                	mov    %esp,%ebp
c010a58c:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a58f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a593:	78 4b                	js     c010a5e0 <fd2file+0x57>
c010a595:	8b 45 08             	mov    0x8(%ebp),%eax
c010a598:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a59d:	77 41                	ja     c010a5e0 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a59f:	e8 99 fb ff ff       	call   c010a13d <get_fd_array>
c010a5a4:	89 c2                	mov    %eax,%edx
c010a5a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5a9:	c1 e0 02             	shl    $0x2,%eax
c010a5ac:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a5b3:	29 c1                	sub    %eax,%ecx
c010a5b5:	89 c8                	mov    %ecx,%eax
c010a5b7:	01 d0                	add    %edx,%eax
c010a5b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a5bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5bf:	8b 00                	mov    (%eax),%eax
c010a5c1:	83 f8 02             	cmp    $0x2,%eax
c010a5c4:	75 1a                	jne    c010a5e0 <fd2file+0x57>
c010a5c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5c9:	8b 40 0c             	mov    0xc(%eax),%eax
c010a5cc:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a5cf:	75 0f                	jne    c010a5e0 <fd2file+0x57>
            *file_store = file;
c010a5d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a5d7:	89 10                	mov    %edx,(%eax)
            return 0;
c010a5d9:	b8 00 00 00 00       	mov    $0x0,%eax
c010a5de:	eb 05                	jmp    c010a5e5 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a5e0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a5e5:	c9                   	leave  
c010a5e6:	c3                   	ret    

c010a5e7 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a5e7:	55                   	push   %ebp
c010a5e8:	89 e5                	mov    %esp,%ebp
c010a5ea:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a5ed:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a5f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a5f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f7:	89 04 24             	mov    %eax,(%esp)
c010a5fa:	e8 8a ff ff ff       	call   c010a589 <fd2file>
c010a5ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a602:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a606:	74 07                	je     c010a60f <file_testfd+0x28>
        return 0;
c010a608:	b8 00 00 00 00       	mov    $0x0,%eax
c010a60d:	eb 33                	jmp    c010a642 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a60f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a613:	74 11                	je     c010a626 <file_testfd+0x3f>
c010a615:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a618:	8b 40 04             	mov    0x4(%eax),%eax
c010a61b:	85 c0                	test   %eax,%eax
c010a61d:	75 07                	jne    c010a626 <file_testfd+0x3f>
        return 0;
c010a61f:	b8 00 00 00 00       	mov    $0x0,%eax
c010a624:	eb 1c                	jmp    c010a642 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a626:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a62a:	74 11                	je     c010a63d <file_testfd+0x56>
c010a62c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a62f:	8b 40 08             	mov    0x8(%eax),%eax
c010a632:	85 c0                	test   %eax,%eax
c010a634:	75 07                	jne    c010a63d <file_testfd+0x56>
        return 0;
c010a636:	b8 00 00 00 00       	mov    $0x0,%eax
c010a63b:	eb 05                	jmp    c010a642 <file_testfd+0x5b>
    }
    return 1;
c010a63d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a642:	c9                   	leave  
c010a643:	c3                   	ret    

c010a644 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a644:	55                   	push   %ebp
c010a645:	89 e5                	mov    %esp,%ebp
c010a647:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010a64a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a651:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a658:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a65b:	83 e0 03             	and    $0x3,%eax
c010a65e:	83 f8 01             	cmp    $0x1,%eax
c010a661:	74 15                	je     c010a678 <file_open+0x34>
c010a663:	83 f8 01             	cmp    $0x1,%eax
c010a666:	72 07                	jb     c010a66f <file_open+0x2b>
c010a668:	83 f8 02             	cmp    $0x2,%eax
c010a66b:	74 14                	je     c010a681 <file_open+0x3d>
c010a66d:	eb 21                	jmp    c010a690 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a66f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a676:	eb 22                	jmp    c010a69a <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a678:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a67f:	eb 19                	jmp    c010a69a <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a681:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a688:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a68b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a68e:	eb 0a                	jmp    c010a69a <file_open+0x56>
    default:
        return -E_INVAL;
c010a690:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a695:	e9 45 01 00 00       	jmp    c010a7df <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a69a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a69d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6a1:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a6a8:	e8 2a fb ff ff       	call   c010a1d7 <fd_array_alloc>
c010a6ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a6b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a6b4:	74 08                	je     c010a6be <file_open+0x7a>
        return ret;
c010a6b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6b9:	e9 21 01 00 00       	jmp    c010a7df <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a6be:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a6c1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a6c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6cf:	89 04 24             	mov    %eax,(%esp)
c010a6d2:	e8 cc 55 00 00       	call   c010fca3 <vfs_open>
c010a6d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a6da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a6de:	74 13                	je     c010a6f3 <file_open+0xaf>
        fd_array_free(file);
c010a6e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a6e3:	89 04 24             	mov    %eax,(%esp)
c010a6e6:	e8 c5 fb ff ff       	call   c010a2b0 <fd_array_free>
        return ret;
c010a6eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6ee:	e9 ec 00 00 00       	jmp    c010a7df <file_open+0x19b>
    }

    file->pos = 0;
c010a6f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a6f6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a6fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a700:	83 e0 20             	and    $0x20,%eax
c010a703:	85 c0                	test   %eax,%eax
c010a705:	0f 84 a8 00 00 00    	je     c010a7b3 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010a70b:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a70e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a711:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a714:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a717:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a71b:	74 17                	je     c010a734 <file_open+0xf0>
c010a71d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a720:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a723:	85 c0                	test   %eax,%eax
c010a725:	74 0d                	je     c010a734 <file_open+0xf0>
c010a727:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a72a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a72d:	8b 40 14             	mov    0x14(%eax),%eax
c010a730:	85 c0                	test   %eax,%eax
c010a732:	75 24                	jne    c010a758 <file_open+0x114>
c010a734:	c7 44 24 0c b8 7a 11 	movl   $0xc0117ab8,0xc(%esp)
c010a73b:	c0 
c010a73c:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a743:	c0 
c010a744:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010a74b:	00 
c010a74c:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a753:	e8 70 67 ff ff       	call   c0100ec8 <__panic>
c010a758:	c7 44 24 04 06 7b 11 	movl   $0xc0117b06,0x4(%esp)
c010a75f:	c0 
c010a760:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a763:	89 04 24             	mov    %eax,(%esp)
c010a766:	e8 5f 4a 00 00       	call   c010f1ca <inode_check>
c010a76b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a76e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a771:	8b 40 14             	mov    0x14(%eax),%eax
c010a774:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a777:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a77a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a77e:	89 14 24             	mov    %edx,(%esp)
c010a781:	ff d0                	call   *%eax
c010a783:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a786:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a78a:	74 1b                	je     c010a7a7 <file_open+0x163>
            vfs_close(node);
c010a78c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a78f:	89 04 24             	mov    %eax,(%esp)
c010a792:	e8 fc 57 00 00       	call   c010ff93 <vfs_close>
            fd_array_free(file);
c010a797:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a79a:	89 04 24             	mov    %eax,(%esp)
c010a79d:	e8 0e fb ff ff       	call   c010a2b0 <fd_array_free>
            return ret;
c010a7a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7a5:	eb 38                	jmp    c010a7df <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010a7a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7aa:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a7ad:	8b 52 0c             	mov    0xc(%edx),%edx
c010a7b0:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a7b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7b6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a7b9:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a7bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a7c2:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a7c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a7cb:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a7ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7d1:	89 04 24             	mov    %eax,(%esp)
c010a7d4:	e8 39 fc ff ff       	call   c010a412 <fd_array_open>
    return file->fd;
c010a7d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7dc:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a7df:	c9                   	leave  
c010a7e0:	c3                   	ret    

c010a7e1 <file_close>:

// close file
int
file_close(int fd) {
c010a7e1:	55                   	push   %ebp
c010a7e2:	89 e5                	mov    %esp,%ebp
c010a7e4:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a7e7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a7ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7f1:	89 04 24             	mov    %eax,(%esp)
c010a7f4:	e8 90 fd ff ff       	call   c010a589 <fd2file>
c010a7f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a7fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a800:	74 05                	je     c010a807 <file_close+0x26>
        return ret;
c010a802:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a805:	eb 10                	jmp    c010a817 <file_close+0x36>
    }
    fd_array_close(file);
c010a807:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a80a:	89 04 24             	mov    %eax,(%esp)
c010a80d:	e8 54 fc ff ff       	call   c010a466 <fd_array_close>
    return 0;
c010a812:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a817:	c9                   	leave  
c010a818:	c3                   	ret    

c010a819 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a819:	55                   	push   %ebp
c010a81a:	89 e5                	mov    %esp,%ebp
c010a81c:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a81f:	8b 45 14             	mov    0x14(%ebp),%eax
c010a822:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a828:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a82b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a82f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a832:	89 04 24             	mov    %eax,(%esp)
c010a835:	e8 4f fd ff ff       	call   c010a589 <fd2file>
c010a83a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a83d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a841:	74 08                	je     c010a84b <file_read+0x32>
        return ret;
c010a843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a846:	e9 06 01 00 00       	jmp    c010a951 <file_read+0x138>
    }
    if (!file->readable) {
c010a84b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a84e:	8b 40 04             	mov    0x4(%eax),%eax
c010a851:	85 c0                	test   %eax,%eax
c010a853:	75 0a                	jne    c010a85f <file_read+0x46>
        return -E_INVAL;
c010a855:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a85a:	e9 f2 00 00 00       	jmp    c010a951 <file_read+0x138>
    }
    fd_array_acquire(file);
c010a85f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a862:	89 04 24             	mov    %eax,(%esp)
c010a865:	e8 da fa ff ff       	call   c010a344 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a86a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a86d:	8b 40 10             	mov    0x10(%eax),%eax
c010a870:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a874:	8b 45 10             	mov    0x10(%ebp),%eax
c010a877:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a87b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a87e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a882:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a885:	89 04 24             	mov    %eax,(%esp)
c010a888:	e8 81 09 00 00       	call   c010b20e <iobuf_init>
c010a88d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a890:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a893:	8b 40 14             	mov    0x14(%eax),%eax
c010a896:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a899:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a89d:	74 17                	je     c010a8b6 <file_read+0x9d>
c010a89f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8a2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8a5:	85 c0                	test   %eax,%eax
c010a8a7:	74 0d                	je     c010a8b6 <file_read+0x9d>
c010a8a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8ac:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8af:	8b 40 0c             	mov    0xc(%eax),%eax
c010a8b2:	85 c0                	test   %eax,%eax
c010a8b4:	75 24                	jne    c010a8da <file_read+0xc1>
c010a8b6:	c7 44 24 0c 0c 7b 11 	movl   $0xc0117b0c,0xc(%esp)
c010a8bd:	c0 
c010a8be:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a8c5:	c0 
c010a8c6:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010a8cd:	00 
c010a8ce:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010a8d5:	e8 ee 65 ff ff       	call   c0100ec8 <__panic>
c010a8da:	c7 44 24 04 59 7b 11 	movl   $0xc0117b59,0x4(%esp)
c010a8e1:	c0 
c010a8e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8e5:	89 04 24             	mov    %eax,(%esp)
c010a8e8:	e8 dd 48 00 00       	call   c010f1ca <inode_check>
c010a8ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8f0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8f3:	8b 40 0c             	mov    0xc(%eax),%eax
c010a8f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a8f9:	8b 52 14             	mov    0x14(%edx),%edx
c010a8fc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a8ff:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a903:	89 14 24             	mov    %edx,(%esp)
c010a906:	ff d0                	call   *%eax
c010a908:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a90b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a90e:	8b 50 08             	mov    0x8(%eax),%edx
c010a911:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a914:	8b 40 0c             	mov    0xc(%eax),%eax
c010a917:	29 c2                	sub    %eax,%edx
c010a919:	89 d0                	mov    %edx,%eax
c010a91b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a91e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a921:	8b 00                	mov    (%eax),%eax
c010a923:	83 f8 02             	cmp    $0x2,%eax
c010a926:	75 13                	jne    c010a93b <file_read+0x122>
        file->pos += copied;
c010a928:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a92b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a92e:	8b 52 10             	mov    0x10(%edx),%edx
c010a931:	89 d1                	mov    %edx,%ecx
c010a933:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a936:	01 ca                	add    %ecx,%edx
c010a938:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a93b:	8b 45 14             	mov    0x14(%ebp),%eax
c010a93e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a941:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a943:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a946:	89 04 24             	mov    %eax,(%esp)
c010a949:	e8 37 fa ff ff       	call   c010a385 <fd_array_release>
    return ret;
c010a94e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a951:	c9                   	leave  
c010a952:	c3                   	ret    

c010a953 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010a953:	55                   	push   %ebp
c010a954:	89 e5                	mov    %esp,%ebp
c010a956:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a959:	8b 45 14             	mov    0x14(%ebp),%eax
c010a95c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a962:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a965:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a969:	8b 45 08             	mov    0x8(%ebp),%eax
c010a96c:	89 04 24             	mov    %eax,(%esp)
c010a96f:	e8 15 fc ff ff       	call   c010a589 <fd2file>
c010a974:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a97b:	74 08                	je     c010a985 <file_write+0x32>
        return ret;
c010a97d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a980:	e9 06 01 00 00       	jmp    c010aa8b <file_write+0x138>
    }
    if (!file->writable) {
c010a985:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a988:	8b 40 08             	mov    0x8(%eax),%eax
c010a98b:	85 c0                	test   %eax,%eax
c010a98d:	75 0a                	jne    c010a999 <file_write+0x46>
        return -E_INVAL;
c010a98f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a994:	e9 f2 00 00 00       	jmp    c010aa8b <file_write+0x138>
    }
    fd_array_acquire(file);
c010a999:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a99c:	89 04 24             	mov    %eax,(%esp)
c010a99f:	e8 a0 f9 ff ff       	call   c010a344 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a9a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9a7:	8b 40 10             	mov    0x10(%eax),%eax
c010a9aa:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a9ae:	8b 45 10             	mov    0x10(%ebp),%eax
c010a9b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a9b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9bc:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a9bf:	89 04 24             	mov    %eax,(%esp)
c010a9c2:	e8 47 08 00 00       	call   c010b20e <iobuf_init>
c010a9c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010a9ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9cd:	8b 40 14             	mov    0x14(%eax),%eax
c010a9d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a9d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a9d7:	74 17                	je     c010a9f0 <file_write+0x9d>
c010a9d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9dc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9df:	85 c0                	test   %eax,%eax
c010a9e1:	74 0d                	je     c010a9f0 <file_write+0x9d>
c010a9e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9e6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9e9:	8b 40 10             	mov    0x10(%eax),%eax
c010a9ec:	85 c0                	test   %eax,%eax
c010a9ee:	75 24                	jne    c010aa14 <file_write+0xc1>
c010a9f0:	c7 44 24 0c 60 7b 11 	movl   $0xc0117b60,0xc(%esp)
c010a9f7:	c0 
c010a9f8:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010a9ff:	c0 
c010aa00:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010aa07:	00 
c010aa08:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010aa0f:	e8 b4 64 ff ff       	call   c0100ec8 <__panic>
c010aa14:	c7 44 24 04 ae 7b 11 	movl   $0xc0117bae,0x4(%esp)
c010aa1b:	c0 
c010aa1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa1f:	89 04 24             	mov    %eax,(%esp)
c010aa22:	e8 a3 47 00 00       	call   c010f1ca <inode_check>
c010aa27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa2a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa2d:	8b 40 10             	mov    0x10(%eax),%eax
c010aa30:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa33:	8b 52 14             	mov    0x14(%edx),%edx
c010aa36:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aa39:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aa3d:	89 14 24             	mov    %edx,(%esp)
c010aa40:	ff d0                	call   *%eax
c010aa42:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aa45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa48:	8b 50 08             	mov    0x8(%eax),%edx
c010aa4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa4e:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa51:	29 c2                	sub    %eax,%edx
c010aa53:	89 d0                	mov    %edx,%eax
c010aa55:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aa58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa5b:	8b 00                	mov    (%eax),%eax
c010aa5d:	83 f8 02             	cmp    $0x2,%eax
c010aa60:	75 13                	jne    c010aa75 <file_write+0x122>
        file->pos += copied;
c010aa62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa65:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa68:	8b 52 10             	mov    0x10(%edx),%edx
c010aa6b:	89 d1                	mov    %edx,%ecx
c010aa6d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa70:	01 ca                	add    %ecx,%edx
c010aa72:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010aa75:	8b 45 14             	mov    0x14(%ebp),%eax
c010aa78:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa7b:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010aa7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa80:	89 04 24             	mov    %eax,(%esp)
c010aa83:	e8 fd f8 ff ff       	call   c010a385 <fd_array_release>
    return ret;
c010aa88:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aa8b:	c9                   	leave  
c010aa8c:	c3                   	ret    

c010aa8d <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010aa8d:	55                   	push   %ebp
c010aa8e:	89 e5                	mov    %esp,%ebp
c010aa90:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010aa93:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010aa96:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aa9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aaa0:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaa3:	89 04 24             	mov    %eax,(%esp)
c010aaa6:	e8 de fa ff ff       	call   c010a589 <fd2file>
c010aaab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aaae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aab2:	74 08                	je     c010aabc <file_seek+0x2f>
        return ret;
c010aab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aab7:	e9 72 01 00 00       	jmp    c010ac2e <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010aabc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aabf:	89 04 24             	mov    %eax,(%esp)
c010aac2:	e8 7d f8 ff ff       	call   c010a344 <fd_array_acquire>

    switch (whence) {
c010aac7:	8b 45 10             	mov    0x10(%ebp),%eax
c010aaca:	83 f8 01             	cmp    $0x1,%eax
c010aacd:	74 12                	je     c010aae1 <file_seek+0x54>
c010aacf:	83 f8 02             	cmp    $0x2,%eax
c010aad2:	74 1b                	je     c010aaef <file_seek+0x62>
c010aad4:	85 c0                	test   %eax,%eax
c010aad6:	0f 84 af 00 00 00    	je     c010ab8b <file_seek+0xfe>
c010aadc:	e9 a1 00 00 00       	jmp    c010ab82 <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010aae1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aae4:	8b 40 10             	mov    0x10(%eax),%eax
c010aae7:	01 45 0c             	add    %eax,0xc(%ebp)
c010aaea:	e9 9d 00 00 00       	jmp    c010ab8c <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010aaef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aaf2:	8b 40 14             	mov    0x14(%eax),%eax
c010aaf5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aaf8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aafc:	74 17                	je     c010ab15 <file_seek+0x88>
c010aafe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab01:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab04:	85 c0                	test   %eax,%eax
c010ab06:	74 0d                	je     c010ab15 <file_seek+0x88>
c010ab08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab0b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab0e:	8b 40 14             	mov    0x14(%eax),%eax
c010ab11:	85 c0                	test   %eax,%eax
c010ab13:	75 24                	jne    c010ab39 <file_seek+0xac>
c010ab15:	c7 44 24 0c b8 7a 11 	movl   $0xc0117ab8,0xc(%esp)
c010ab1c:	c0 
c010ab1d:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010ab24:	c0 
c010ab25:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010ab2c:	00 
c010ab2d:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010ab34:	e8 8f 63 ff ff       	call   c0100ec8 <__panic>
c010ab39:	c7 44 24 04 06 7b 11 	movl   $0xc0117b06,0x4(%esp)
c010ab40:	c0 
c010ab41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab44:	89 04 24             	mov    %eax,(%esp)
c010ab47:	e8 7e 46 00 00       	call   c010f1ca <inode_check>
c010ab4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab4f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab52:	8b 40 14             	mov    0x14(%eax),%eax
c010ab55:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ab58:	8b 52 14             	mov    0x14(%edx),%edx
c010ab5b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ab5e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ab62:	89 14 24             	mov    %edx,(%esp)
c010ab65:	ff d0                	call   *%eax
c010ab67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab6e:	75 10                	jne    c010ab80 <file_seek+0xf3>
            pos += stat->st_size;
c010ab70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab73:	8b 50 0c             	mov    0xc(%eax),%edx
c010ab76:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab79:	01 d0                	add    %edx,%eax
c010ab7b:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010ab7e:	eb 0c                	jmp    c010ab8c <file_seek+0xff>
c010ab80:	eb 0a                	jmp    c010ab8c <file_seek+0xff>
    default: ret = -E_INVAL;
c010ab82:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010ab89:	eb 01                	jmp    c010ab8c <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010ab8b:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010ab8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab90:	0f 85 8a 00 00 00    	jne    c010ac20 <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010ab96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab99:	8b 40 14             	mov    0x14(%eax),%eax
c010ab9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ab9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010aba3:	74 17                	je     c010abbc <file_seek+0x12f>
c010aba5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aba8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abab:	85 c0                	test   %eax,%eax
c010abad:	74 0d                	je     c010abbc <file_seek+0x12f>
c010abaf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abb2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abb5:	8b 40 2c             	mov    0x2c(%eax),%eax
c010abb8:	85 c0                	test   %eax,%eax
c010abba:	75 24                	jne    c010abe0 <file_seek+0x153>
c010abbc:	c7 44 24 0c b4 7b 11 	movl   $0xc0117bb4,0xc(%esp)
c010abc3:	c0 
c010abc4:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010abcb:	c0 
c010abcc:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010abd3:	00 
c010abd4:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010abdb:	e8 e8 62 ff ff       	call   c0100ec8 <__panic>
c010abe0:	c7 44 24 04 04 7c 11 	movl   $0xc0117c04,0x4(%esp)
c010abe7:	c0 
c010abe8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abeb:	89 04 24             	mov    %eax,(%esp)
c010abee:	e8 d7 45 00 00       	call   c010f1ca <inode_check>
c010abf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abf6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abf9:	8b 40 2c             	mov    0x2c(%eax),%eax
c010abfc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010abff:	8b 52 14             	mov    0x14(%edx),%edx
c010ac02:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ac05:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ac09:	89 14 24             	mov    %edx,(%esp)
c010ac0c:	ff d0                	call   *%eax
c010ac0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac15:	75 09                	jne    c010ac20 <file_seek+0x193>
            file->pos = pos;
c010ac17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac1a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ac1d:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ac20:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac23:	89 04 24             	mov    %eax,(%esp)
c010ac26:	e8 5a f7 ff ff       	call   c010a385 <fd_array_release>
    return ret;
c010ac2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ac2e:	c9                   	leave  
c010ac2f:	c3                   	ret    

c010ac30 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ac30:	55                   	push   %ebp
c010ac31:	89 e5                	mov    %esp,%ebp
c010ac33:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ac36:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ac39:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac40:	89 04 24             	mov    %eax,(%esp)
c010ac43:	e8 41 f9 ff ff       	call   c010a589 <fd2file>
c010ac48:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac4f:	74 08                	je     c010ac59 <file_fstat+0x29>
        return ret;
c010ac51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac54:	e9 94 00 00 00       	jmp    c010aced <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010ac59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac5c:	89 04 24             	mov    %eax,(%esp)
c010ac5f:	e8 e0 f6 ff ff       	call   c010a344 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010ac64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac67:	8b 40 14             	mov    0x14(%eax),%eax
c010ac6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ac6d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ac71:	74 17                	je     c010ac8a <file_fstat+0x5a>
c010ac73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac76:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac79:	85 c0                	test   %eax,%eax
c010ac7b:	74 0d                	je     c010ac8a <file_fstat+0x5a>
c010ac7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac80:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac83:	8b 40 14             	mov    0x14(%eax),%eax
c010ac86:	85 c0                	test   %eax,%eax
c010ac88:	75 24                	jne    c010acae <file_fstat+0x7e>
c010ac8a:	c7 44 24 0c b8 7a 11 	movl   $0xc0117ab8,0xc(%esp)
c010ac91:	c0 
c010ac92:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010ac99:	c0 
c010ac9a:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010aca1:	00 
c010aca2:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010aca9:	e8 1a 62 ff ff       	call   c0100ec8 <__panic>
c010acae:	c7 44 24 04 06 7b 11 	movl   $0xc0117b06,0x4(%esp)
c010acb5:	c0 
c010acb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acb9:	89 04 24             	mov    %eax,(%esp)
c010acbc:	e8 09 45 00 00       	call   c010f1ca <inode_check>
c010acc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acc4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acc7:	8b 40 14             	mov    0x14(%eax),%eax
c010acca:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010accd:	8b 52 14             	mov    0x14(%edx),%edx
c010acd0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010acd3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010acd7:	89 14 24             	mov    %edx,(%esp)
c010acda:	ff d0                	call   *%eax
c010acdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010acdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ace2:	89 04 24             	mov    %eax,(%esp)
c010ace5:	e8 9b f6 ff ff       	call   c010a385 <fd_array_release>
    return ret;
c010acea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aced:	c9                   	leave  
c010acee:	c3                   	ret    

c010acef <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010acef:	55                   	push   %ebp
c010acf0:	89 e5                	mov    %esp,%ebp
c010acf2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010acf5:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010acf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acfc:	8b 45 08             	mov    0x8(%ebp),%eax
c010acff:	89 04 24             	mov    %eax,(%esp)
c010ad02:	e8 82 f8 ff ff       	call   c010a589 <fd2file>
c010ad07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad0e:	74 08                	je     c010ad18 <file_fsync+0x29>
        return ret;
c010ad10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad13:	e9 8d 00 00 00       	jmp    c010ada5 <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010ad18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad1b:	89 04 24             	mov    %eax,(%esp)
c010ad1e:	e8 21 f6 ff ff       	call   c010a344 <fd_array_acquire>
    ret = vop_fsync(file->node);
c010ad23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad26:	8b 40 14             	mov    0x14(%eax),%eax
c010ad29:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad30:	74 17                	je     c010ad49 <file_fsync+0x5a>
c010ad32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad35:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad38:	85 c0                	test   %eax,%eax
c010ad3a:	74 0d                	je     c010ad49 <file_fsync+0x5a>
c010ad3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad3f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad42:	8b 40 18             	mov    0x18(%eax),%eax
c010ad45:	85 c0                	test   %eax,%eax
c010ad47:	75 24                	jne    c010ad6d <file_fsync+0x7e>
c010ad49:	c7 44 24 0c 0c 7c 11 	movl   $0xc0117c0c,0xc(%esp)
c010ad50:	c0 
c010ad51:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010ad58:	c0 
c010ad59:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010ad60:	00 
c010ad61:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010ad68:	e8 5b 61 ff ff       	call   c0100ec8 <__panic>
c010ad6d:	c7 44 24 04 5a 7c 11 	movl   $0xc0117c5a,0x4(%esp)
c010ad74:	c0 
c010ad75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad78:	89 04 24             	mov    %eax,(%esp)
c010ad7b:	e8 4a 44 00 00       	call   c010f1ca <inode_check>
c010ad80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad83:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad86:	8b 40 18             	mov    0x18(%eax),%eax
c010ad89:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ad8c:	8b 52 14             	mov    0x14(%edx),%edx
c010ad8f:	89 14 24             	mov    %edx,(%esp)
c010ad92:	ff d0                	call   *%eax
c010ad94:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ad97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad9a:	89 04 24             	mov    %eax,(%esp)
c010ad9d:	e8 e3 f5 ff ff       	call   c010a385 <fd_array_release>
    return ret;
c010ada2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ada5:	c9                   	leave  
c010ada6:	c3                   	ret    

c010ada7 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010ada7:	55                   	push   %ebp
c010ada8:	89 e5                	mov    %esp,%ebp
c010adaa:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010adad:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010adb0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adb4:	8b 45 08             	mov    0x8(%ebp),%eax
c010adb7:	89 04 24             	mov    %eax,(%esp)
c010adba:	e8 ca f7 ff ff       	call   c010a589 <fd2file>
c010adbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adc6:	74 08                	je     c010add0 <file_getdirentry+0x29>
        return ret;
c010adc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adcb:	e9 e3 00 00 00       	jmp    c010aeb3 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010add0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010add3:	89 04 24             	mov    %eax,(%esp)
c010add6:	e8 69 f5 ff ff       	call   c010a344 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010addb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010adde:	8b 00                	mov    (%eax),%eax
c010ade0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ade3:	83 c2 04             	add    $0x4,%edx
c010ade6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010adea:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010adf1:	00 
c010adf2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010adf6:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010adf9:	89 04 24             	mov    %eax,(%esp)
c010adfc:	e8 0d 04 00 00       	call   c010b20e <iobuf_init>
c010ae01:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010ae04:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae07:	8b 40 14             	mov    0x14(%eax),%eax
c010ae0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ae0d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ae11:	74 17                	je     c010ae2a <file_getdirentry+0x83>
c010ae13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae16:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae19:	85 c0                	test   %eax,%eax
c010ae1b:	74 0d                	je     c010ae2a <file_getdirentry+0x83>
c010ae1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae20:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae23:	8b 40 20             	mov    0x20(%eax),%eax
c010ae26:	85 c0                	test   %eax,%eax
c010ae28:	75 24                	jne    c010ae4e <file_getdirentry+0xa7>
c010ae2a:	c7 44 24 0c 60 7c 11 	movl   $0xc0117c60,0xc(%esp)
c010ae31:	c0 
c010ae32:	c7 44 24 08 76 79 11 	movl   $0xc0117976,0x8(%esp)
c010ae39:	c0 
c010ae3a:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010ae41:	00 
c010ae42:	c7 04 24 8b 79 11 c0 	movl   $0xc011798b,(%esp)
c010ae49:	e8 7a 60 ff ff       	call   c0100ec8 <__panic>
c010ae4e:	c7 44 24 04 b4 7c 11 	movl   $0xc0117cb4,0x4(%esp)
c010ae55:	c0 
c010ae56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae59:	89 04 24             	mov    %eax,(%esp)
c010ae5c:	e8 69 43 00 00       	call   c010f1ca <inode_check>
c010ae61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae64:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae67:	8b 40 20             	mov    0x20(%eax),%eax
c010ae6a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ae6d:	8b 52 14             	mov    0x14(%edx),%edx
c010ae70:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ae73:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ae77:	89 14 24             	mov    %edx,(%esp)
c010ae7a:	ff d0                	call   *%eax
c010ae7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae83:	75 20                	jne    c010aea5 <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010ae85:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae88:	8b 00                	mov    (%eax),%eax
c010ae8a:	89 c2                	mov    %eax,%edx
c010ae8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae8f:	8b 48 08             	mov    0x8(%eax),%ecx
c010ae92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae95:	8b 40 0c             	mov    0xc(%eax),%eax
c010ae98:	29 c1                	sub    %eax,%ecx
c010ae9a:	89 c8                	mov    %ecx,%eax
c010ae9c:	01 d0                	add    %edx,%eax
c010ae9e:	89 c2                	mov    %eax,%edx
c010aea0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aea3:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010aea5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aea8:	89 04 24             	mov    %eax,(%esp)
c010aeab:	e8 d5 f4 ff ff       	call   c010a385 <fd_array_release>
    return ret;
c010aeb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aeb3:	c9                   	leave  
c010aeb4:	c3                   	ret    

c010aeb5 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010aeb5:	55                   	push   %ebp
c010aeb6:	89 e5                	mov    %esp,%ebp
c010aeb8:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010aebb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010aebe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aec2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aec5:	89 04 24             	mov    %eax,(%esp)
c010aec8:	e8 bc f6 ff ff       	call   c010a589 <fd2file>
c010aecd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aed0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aed4:	74 05                	je     c010aedb <file_dup+0x26>
        return ret;
c010aed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aed9:	eb 38                	jmp    c010af13 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010aedb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010aede:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aee2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aee5:	89 04 24             	mov    %eax,(%esp)
c010aee8:	e8 ea f2 ff ff       	call   c010a1d7 <fd_array_alloc>
c010aeed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aef0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aef4:	74 05                	je     c010aefb <file_dup+0x46>
        return ret;
c010aef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aef9:	eb 18                	jmp    c010af13 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010aefb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aefe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af01:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af05:	89 04 24             	mov    %eax,(%esp)
c010af08:	e8 e5 f5 ff ff       	call   c010a4f2 <fd_array_dup>
    return file2->fd;
c010af0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af10:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010af13:	c9                   	leave  
c010af14:	c3                   	ret    

c010af15 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010af15:	55                   	push   %ebp
c010af16:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010af18:	8b 45 08             	mov    0x8(%ebp),%eax
c010af1b:	8b 40 08             	mov    0x8(%eax),%eax
}
c010af1e:	5d                   	pop    %ebp
c010af1f:	c3                   	ret    

c010af20 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010af20:	55                   	push   %ebp
c010af21:	89 e5                	mov    %esp,%ebp
c010af23:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010af26:	e8 bb 43 00 00       	call   c010f2e6 <vfs_init>
    dev_init();
c010af2b:	e8 f8 5a 00 00       	call   c0110a28 <dev_init>
    sfs_init();
c010af30:	e8 b5 68 00 00       	call   c01117ea <sfs_init>
}
c010af35:	c9                   	leave  
c010af36:	c3                   	ret    

c010af37 <fs_cleanup>:

void
fs_cleanup(void) {
c010af37:	55                   	push   %ebp
c010af38:	89 e5                	mov    %esp,%ebp
c010af3a:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010af3d:	e8 5d 45 00 00       	call   c010f49f <vfs_cleanup>
}
c010af42:	c9                   	leave  
c010af43:	c3                   	ret    

c010af44 <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010af44:	55                   	push   %ebp
c010af45:	89 e5                	mov    %esp,%ebp
c010af47:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010af4a:	8b 45 08             	mov    0x8(%ebp),%eax
c010af4d:	83 c0 0c             	add    $0xc,%eax
c010af50:	89 04 24             	mov    %eax,(%esp)
c010af53:	e8 6f ec ff ff       	call   c0109bc7 <down>
}
c010af58:	c9                   	leave  
c010af59:	c3                   	ret    

c010af5a <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010af5a:	55                   	push   %ebp
c010af5b:	89 e5                	mov    %esp,%ebp
c010af5d:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010af60:	8b 45 08             	mov    0x8(%ebp),%eax
c010af63:	83 c0 0c             	add    $0xc,%eax
c010af66:	89 04 24             	mov    %eax,(%esp)
c010af69:	e8 3e ec ff ff       	call   c0109bac <up>
}
c010af6e:	c9                   	leave  
c010af6f:	c3                   	ret    

c010af70 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010af70:	55                   	push   %ebp
c010af71:	89 e5                	mov    %esp,%ebp
c010af73:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010af76:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010af7d:	e8 d8 9c ff ff       	call   c0104c5a <kmalloc>
c010af82:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af89:	74 43                	je     c010afce <files_create+0x5e>
        filesp->pwd = NULL;
c010af8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010af94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af97:	8d 50 18             	lea    0x18(%eax),%edx
c010af9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af9d:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010afa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afa3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010afaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afad:	83 c0 0c             	add    $0xc,%eax
c010afb0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010afb7:	00 
c010afb8:	89 04 24             	mov    %eax,(%esp)
c010afbb:	e8 79 ea ff ff       	call   c0109a39 <sem_init>
        fd_array_init(filesp->fd_array);
c010afc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afc3:	8b 40 04             	mov    0x4(%eax),%eax
c010afc6:	89 04 24             	mov    %eax,(%esp)
c010afc9:	e8 c4 f1 ff ff       	call   c010a192 <fd_array_init>
    }
    return filesp;
c010afce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010afd1:	c9                   	leave  
c010afd2:	c3                   	ret    

c010afd3 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010afd3:	55                   	push   %ebp
c010afd4:	89 e5                	mov    %esp,%ebp
c010afd6:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010afd9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010afdd:	74 0f                	je     c010afee <files_destroy+0x1b>
c010afdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010afe2:	89 04 24             	mov    %eax,(%esp)
c010afe5:	e8 2b ff ff ff       	call   c010af15 <files_count>
c010afea:	85 c0                	test   %eax,%eax
c010afec:	74 24                	je     c010b012 <files_destroy+0x3f>
c010afee:	c7 44 24 0c c0 7c 11 	movl   $0xc0117cc0,0xc(%esp)
c010aff5:	c0 
c010aff6:	c7 44 24 08 eb 7c 11 	movl   $0xc0117ceb,0x8(%esp)
c010affd:	c0 
c010affe:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b005:	00 
c010b006:	c7 04 24 00 7d 11 c0 	movl   $0xc0117d00,(%esp)
c010b00d:	e8 b6 5e ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
c010b012:	8b 45 08             	mov    0x8(%ebp),%eax
c010b015:	8b 00                	mov    (%eax),%eax
c010b017:	85 c0                	test   %eax,%eax
c010b019:	74 0d                	je     c010b028 <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010b01b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b01e:	8b 00                	mov    (%eax),%eax
c010b020:	89 04 24             	mov    %eax,(%esp)
c010b023:	e8 b4 3f 00 00       	call   c010efdc <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b028:	8b 45 08             	mov    0x8(%ebp),%eax
c010b02b:	8b 40 04             	mov    0x4(%eax),%eax
c010b02e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b031:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b038:	eb 4a                	jmp    c010b084 <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010b03a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b03d:	8b 00                	mov    (%eax),%eax
c010b03f:	83 f8 02             	cmp    $0x2,%eax
c010b042:	75 0b                	jne    c010b04f <files_destroy+0x7c>
            fd_array_close(file);
c010b044:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b047:	89 04 24             	mov    %eax,(%esp)
c010b04a:	e8 17 f4 ff ff       	call   c010a466 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b04f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b052:	8b 00                	mov    (%eax),%eax
c010b054:	85 c0                	test   %eax,%eax
c010b056:	74 24                	je     c010b07c <files_destroy+0xa9>
c010b058:	c7 44 24 0c 0d 7d 11 	movl   $0xc0117d0d,0xc(%esp)
c010b05f:	c0 
c010b060:	c7 44 24 08 eb 7c 11 	movl   $0xc0117ceb,0x8(%esp)
c010b067:	c0 
c010b068:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b06f:	00 
c010b070:	c7 04 24 00 7d 11 c0 	movl   $0xc0117d00,(%esp)
c010b077:	e8 4c 5e ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b07c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b080:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b084:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b087:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b08c:	76 ac                	jbe    c010b03a <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b08e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b091:	89 04 24             	mov    %eax,(%esp)
c010b094:	e8 dc 9b ff ff       	call   c0104c75 <kfree>
}
c010b099:	c9                   	leave  
c010b09a:	c3                   	ret    

c010b09b <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b09b:	55                   	push   %ebp
c010b09c:	89 e5                	mov    %esp,%ebp
c010b09e:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b0a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b0a5:	74 0f                	je     c010b0b6 <files_closeall+0x1b>
c010b0a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0aa:	89 04 24             	mov    %eax,(%esp)
c010b0ad:	e8 63 fe ff ff       	call   c010af15 <files_count>
c010b0b2:	85 c0                	test   %eax,%eax
c010b0b4:	7f 24                	jg     c010b0da <files_closeall+0x3f>
c010b0b6:	c7 44 24 0c 28 7d 11 	movl   $0xc0117d28,0xc(%esp)
c010b0bd:	c0 
c010b0be:	c7 44 24 08 eb 7c 11 	movl   $0xc0117ceb,0x8(%esp)
c010b0c5:	c0 
c010b0c6:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b0cd:	00 
c010b0ce:	c7 04 24 00 7d 11 c0 	movl   $0xc0117d00,(%esp)
c010b0d5:	e8 ee 5d ff ff       	call   c0100ec8 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b0da:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0dd:	8b 40 04             	mov    0x4(%eax),%eax
c010b0e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b0e3:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b0ea:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b0ee:	eb 1d                	jmp    c010b10d <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010b0f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0f3:	8b 00                	mov    (%eax),%eax
c010b0f5:	83 f8 02             	cmp    $0x2,%eax
c010b0f8:	75 0b                	jne    c010b105 <files_closeall+0x6a>
            fd_array_close(file);
c010b0fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0fd:	89 04 24             	mov    %eax,(%esp)
c010b100:	e8 61 f3 ff ff       	call   c010a466 <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b105:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b109:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b10d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b110:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b115:	76 d9                	jbe    c010b0f0 <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b117:	c9                   	leave  
c010b118:	c3                   	ret    

c010b119 <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010b119:	55                   	push   %ebp
c010b11a:	89 e5                	mov    %esp,%ebp
c010b11c:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010b11f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b123:	74 06                	je     c010b12b <dup_files+0x12>
c010b125:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b129:	75 24                	jne    c010b14f <dup_files+0x36>
c010b12b:	c7 44 24 0c 52 7d 11 	movl   $0xc0117d52,0xc(%esp)
c010b132:	c0 
c010b133:	c7 44 24 08 eb 7c 11 	movl   $0xc0117ceb,0x8(%esp)
c010b13a:	c0 
c010b13b:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b142:	00 
c010b143:	c7 04 24 00 7d 11 c0 	movl   $0xc0117d00,(%esp)
c010b14a:	e8 79 5d ff ff       	call   c0100ec8 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b14f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b152:	89 04 24             	mov    %eax,(%esp)
c010b155:	e8 bb fd ff ff       	call   c010af15 <files_count>
c010b15a:	85 c0                	test   %eax,%eax
c010b15c:	75 0f                	jne    c010b16d <dup_files+0x54>
c010b15e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b161:	89 04 24             	mov    %eax,(%esp)
c010b164:	e8 ac fd ff ff       	call   c010af15 <files_count>
c010b169:	85 c0                	test   %eax,%eax
c010b16b:	7f 24                	jg     c010b191 <dup_files+0x78>
c010b16d:	c7 44 24 0c 70 7d 11 	movl   $0xc0117d70,0xc(%esp)
c010b174:	c0 
c010b175:	c7 44 24 08 eb 7c 11 	movl   $0xc0117ceb,0x8(%esp)
c010b17c:	c0 
c010b17d:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b184:	00 
c010b185:	c7 04 24 00 7d 11 c0 	movl   $0xc0117d00,(%esp)
c010b18c:	e8 37 5d ff ff       	call   c0100ec8 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b191:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b194:	8b 10                	mov    (%eax),%edx
c010b196:	8b 45 08             	mov    0x8(%ebp),%eax
c010b199:	89 10                	mov    %edx,(%eax)
c010b19b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19e:	8b 00                	mov    (%eax),%eax
c010b1a0:	85 c0                	test   %eax,%eax
c010b1a2:	74 0d                	je     c010b1b1 <dup_files+0x98>
        vop_ref_inc(to->pwd);
c010b1a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a7:	8b 00                	mov    (%eax),%eax
c010b1a9:	89 04 24             	mov    %eax,(%esp)
c010b1ac:	e8 11 3e 00 00       	call   c010efc2 <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b1b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b4:	8b 40 04             	mov    0x4(%eax),%eax
c010b1b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1bd:	8b 40 04             	mov    0x4(%eax),%eax
c010b1c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b1c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b1ca:	eb 31                	jmp    c010b1fd <dup_files+0xe4>
        if (from_file->status == FD_OPENED) {
c010b1cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1cf:	8b 00                	mov    (%eax),%eax
c010b1d1:	83 f8 02             	cmp    $0x2,%eax
c010b1d4:	75 1b                	jne    c010b1f1 <dup_files+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b1d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1d9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b1df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b1e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1e9:	89 04 24             	mov    %eax,(%esp)
c010b1ec:	e8 01 f3 ff ff       	call   c010a4f2 <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b1f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b1f5:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b1f9:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b1fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b200:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b205:	76 c5                	jbe    c010b1cc <dup_files+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b207:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b20c:	c9                   	leave  
c010b20d:	c3                   	ret    

c010b20e <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b20e:	55                   	push   %ebp
c010b20f:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b211:	8b 45 08             	mov    0x8(%ebp),%eax
c010b214:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b217:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b219:	8b 45 08             	mov    0x8(%ebp),%eax
c010b21c:	8b 55 14             	mov    0x14(%ebp),%edx
c010b21f:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b222:	8b 45 08             	mov    0x8(%ebp),%eax
c010b225:	8b 55 10             	mov    0x10(%ebp),%edx
c010b228:	89 50 0c             	mov    %edx,0xc(%eax)
c010b22b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b22e:	8b 50 0c             	mov    0xc(%eax),%edx
c010b231:	8b 45 08             	mov    0x8(%ebp),%eax
c010b234:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b237:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b23a:	5d                   	pop    %ebp
c010b23b:	c3                   	ret    

c010b23c <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b23c:	55                   	push   %ebp
c010b23d:	89 e5                	mov    %esp,%ebp
c010b23f:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b242:	8b 45 08             	mov    0x8(%ebp),%eax
c010b245:	8b 40 0c             	mov    0xc(%eax),%eax
c010b248:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b24b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b24e:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b251:	76 06                	jbe    c010b259 <iobuf_move+0x1d>
        alen = len;
c010b253:	8b 45 10             	mov    0x10(%ebp),%eax
c010b256:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b259:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b25d:	74 57                	je     c010b2b6 <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b25f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b262:	8b 00                	mov    (%eax),%eax
c010b264:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b267:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b26a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b26d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b271:	74 12                	je     c010b285 <iobuf_move+0x49>
            void *tmp = src;
c010b273:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b276:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b279:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b27c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b27f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b282:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b285:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b288:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b28c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b28f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b293:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b296:	89 04 24             	mov    %eax,(%esp)
c010b299:	e8 d3 a1 00 00       	call   c0115471 <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b29e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2a8:	89 04 24             	mov    %eax,(%esp)
c010b2ab:	e8 a1 00 00 00       	call   c010b351 <iobuf_skip>
c010b2b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2b3:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b2b6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b2ba:	74 08                	je     c010b2c4 <iobuf_move+0x88>
        *copiedp = alen;
c010b2bc:	8b 45 18             	mov    0x18(%ebp),%eax
c010b2bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b2c2:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b2c4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b2c8:	75 07                	jne    c010b2d1 <iobuf_move+0x95>
c010b2ca:	b8 00 00 00 00       	mov    $0x0,%eax
c010b2cf:	eb 05                	jmp    c010b2d6 <iobuf_move+0x9a>
c010b2d1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b2d6:	c9                   	leave  
c010b2d7:	c3                   	ret    

c010b2d8 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b2d8:	55                   	push   %ebp
c010b2d9:	89 e5                	mov    %esp,%ebp
c010b2db:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b2de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2e1:	8b 40 0c             	mov    0xc(%eax),%eax
c010b2e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2ea:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b2ed:	76 06                	jbe    c010b2f5 <iobuf_move_zeros+0x1d>
        alen = len;
c010b2ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b2f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b2f9:	74 34                	je     c010b32f <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b2fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2fe:	8b 00                	mov    (%eax),%eax
c010b300:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b303:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b30e:	00 
c010b30f:	89 04 24             	mov    %eax,(%esp)
c010b312:	e8 1b a1 00 00       	call   c0115432 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b317:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b31a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b31e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b321:	89 04 24             	mov    %eax,(%esp)
c010b324:	e8 28 00 00 00       	call   c010b351 <iobuf_skip>
c010b329:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b32c:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b32f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b333:	74 08                	je     c010b33d <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b335:	8b 45 10             	mov    0x10(%ebp),%eax
c010b338:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b33b:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b33d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b341:	75 07                	jne    c010b34a <iobuf_move_zeros+0x72>
c010b343:	b8 00 00 00 00       	mov    $0x0,%eax
c010b348:	eb 05                	jmp    c010b34f <iobuf_move_zeros+0x77>
c010b34a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b34f:	c9                   	leave  
c010b350:	c3                   	ret    

c010b351 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b351:	55                   	push   %ebp
c010b352:	89 e5                	mov    %esp,%ebp
c010b354:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b357:	8b 45 08             	mov    0x8(%ebp),%eax
c010b35a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b35d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b360:	73 24                	jae    c010b386 <iobuf_skip+0x35>
c010b362:	c7 44 24 0c 9e 7d 11 	movl   $0xc0117d9e,0xc(%esp)
c010b369:	c0 
c010b36a:	c7 44 24 08 b1 7d 11 	movl   $0xc0117db1,0x8(%esp)
c010b371:	c0 
c010b372:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b379:	00 
c010b37a:	c7 04 24 c6 7d 11 c0 	movl   $0xc0117dc6,(%esp)
c010b381:	e8 42 5b ff ff       	call   c0100ec8 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b386:	8b 45 08             	mov    0x8(%ebp),%eax
c010b389:	8b 10                	mov    (%eax),%edx
c010b38b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b38e:	01 c2                	add    %eax,%edx
c010b390:	8b 45 08             	mov    0x8(%ebp),%eax
c010b393:	89 10                	mov    %edx,(%eax)
c010b395:	8b 45 08             	mov    0x8(%ebp),%eax
c010b398:	8b 40 04             	mov    0x4(%eax),%eax
c010b39b:	89 c2                	mov    %eax,%edx
c010b39d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3a0:	01 d0                	add    %edx,%eax
c010b3a2:	89 c2                	mov    %eax,%edx
c010b3a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3a7:	89 50 04             	mov    %edx,0x4(%eax)
c010b3aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3ad:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3b0:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b3b3:	89 c2                	mov    %eax,%edx
c010b3b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3b8:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b3bb:	c9                   	leave  
c010b3bc:	c3                   	ret    

c010b3bd <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b3bd:	55                   	push   %ebp
c010b3be:	89 e5                	mov    %esp,%ebp
c010b3c0:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b3c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b3c7:	74 25                	je     c010b3ee <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b3c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3cc:	83 c0 1c             	add    $0x1c,%eax
c010b3cf:	89 04 24             	mov    %eax,(%esp)
c010b3d2:	e8 f0 e7 ff ff       	call   c0109bc7 <down>
        if (current != NULL) {
c010b3d7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b3dc:	85 c0                	test   %eax,%eax
c010b3de:	74 0e                	je     c010b3ee <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b3e0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b3e5:	8b 50 04             	mov    0x4(%eax),%edx
c010b3e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3eb:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b3ee:	c9                   	leave  
c010b3ef:	c3                   	ret    

c010b3f0 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b3f0:	55                   	push   %ebp
c010b3f1:	89 e5                	mov    %esp,%ebp
c010b3f3:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b3f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b3fa:	74 18                	je     c010b414 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b3fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3ff:	83 c0 1c             	add    $0x1c,%eax
c010b402:	89 04 24             	mov    %eax,(%esp)
c010b405:	e8 a2 e7 ff ff       	call   c0109bac <up>
        mm->locked_by = 0;
c010b40a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b40d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b414:	c9                   	leave  
c010b415:	c3                   	ret    

c010b416 <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b416:	55                   	push   %ebp
c010b417:	89 e5                	mov    %esp,%ebp
c010b419:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b41c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b421:	8b 40 18             	mov    0x18(%eax),%eax
c010b424:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b427:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b42e:	e8 27 98 ff ff       	call   c0104c5a <kmalloc>
c010b433:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b436:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b43a:	75 07                	jne    c010b443 <copy_path+0x2d>
        return -E_NO_MEM;
c010b43c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b441:	eb 66                	jmp    c010b4a9 <copy_path+0x93>
    }
    lock_mm(mm);
c010b443:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b446:	89 04 24             	mov    %eax,(%esp)
c010b449:	e8 6f ff ff ff       	call   c010b3bd <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b44e:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b455:	00 
c010b456:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b459:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b45d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b460:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b464:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b467:	89 04 24             	mov    %eax,(%esp)
c010b46a:	e8 e0 db ff ff       	call   c010904f <copy_string>
c010b46f:	85 c0                	test   %eax,%eax
c010b471:	75 1e                	jne    c010b491 <copy_path+0x7b>
        unlock_mm(mm);
c010b473:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b476:	89 04 24             	mov    %eax,(%esp)
c010b479:	e8 72 ff ff ff       	call   c010b3f0 <unlock_mm>
        goto failed_cleanup;
c010b47e:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b47f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b482:	89 04 24             	mov    %eax,(%esp)
c010b485:	e8 eb 97 ff ff       	call   c0104c75 <kfree>
    return -E_INVAL;
c010b48a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b48f:	eb 18                	jmp    c010b4a9 <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b491:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b494:	89 04 24             	mov    %eax,(%esp)
c010b497:	e8 54 ff ff ff       	call   c010b3f0 <unlock_mm>
    *to = buffer;
c010b49c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b49f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b4a2:	89 10                	mov    %edx,(%eax)
    return 0;
c010b4a4:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b4a9:	c9                   	leave  
c010b4aa:	c3                   	ret    

c010b4ab <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b4ab:	55                   	push   %ebp
c010b4ac:	89 e5                	mov    %esp,%ebp
c010b4ae:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b4b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4b8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b4bb:	89 04 24             	mov    %eax,(%esp)
c010b4be:	e8 53 ff ff ff       	call   c010b416 <copy_path>
c010b4c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b4c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4ca:	74 05                	je     c010b4d1 <sysfile_open+0x26>
        return ret;
c010b4cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4cf:	eb 23                	jmp    c010b4f4 <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010b4d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b4d7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b4db:	89 04 24             	mov    %eax,(%esp)
c010b4de:	e8 61 f1 ff ff       	call   c010a644 <file_open>
c010b4e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b4e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4e9:	89 04 24             	mov    %eax,(%esp)
c010b4ec:	e8 84 97 ff ff       	call   c0104c75 <kfree>
    return ret;
c010b4f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b4f4:	c9                   	leave  
c010b4f5:	c3                   	ret    

c010b4f6 <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b4f6:	55                   	push   %ebp
c010b4f7:	89 e5                	mov    %esp,%ebp
c010b4f9:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b4fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4ff:	89 04 24             	mov    %eax,(%esp)
c010b502:	e8 da f2 ff ff       	call   c010a7e1 <file_close>
}
c010b507:	c9                   	leave  
c010b508:	c3                   	ret    

c010b509 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b509:	55                   	push   %ebp
c010b50a:	89 e5                	mov    %esp,%ebp
c010b50c:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b50f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b514:	8b 40 18             	mov    0x18(%eax),%eax
c010b517:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b51a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b51e:	75 0a                	jne    c010b52a <sysfile_read+0x21>
        return 0;
c010b520:	b8 00 00 00 00       	mov    $0x0,%eax
c010b525:	e9 55 01 00 00       	jmp    c010b67f <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b52a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b531:	00 
c010b532:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b539:	00 
c010b53a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b53d:	89 04 24             	mov    %eax,(%esp)
c010b540:	e8 a2 f0 ff ff       	call   c010a5e7 <file_testfd>
c010b545:	85 c0                	test   %eax,%eax
c010b547:	75 0a                	jne    c010b553 <sysfile_read+0x4a>
        return -E_INVAL;
c010b549:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b54e:	e9 2c 01 00 00       	jmp    c010b67f <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b553:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b55a:	e8 fb 96 ff ff       	call   c0104c5a <kmalloc>
c010b55f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b562:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b566:	75 0a                	jne    c010b572 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b568:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b56d:	e9 0d 01 00 00       	jmp    c010b67f <sysfile_read+0x176>
    }

    int ret = 0;
c010b572:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b579:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b580:	e9 d7 00 00 00       	jmp    c010b65c <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b585:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b58c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b58f:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b592:	76 06                	jbe    c010b59a <sysfile_read+0x91>
            alen = len;
c010b594:	8b 45 10             	mov    0x10(%ebp),%eax
c010b597:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b59a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b59d:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b5a0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b5a4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b5a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b5af:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5b2:	89 04 24             	mov    %eax,(%esp)
c010b5b5:	e8 5f f2 ff ff       	call   c010a819 <file_read>
c010b5ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b5bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5c0:	85 c0                	test   %eax,%eax
c010b5c2:	0f 84 87 00 00 00    	je     c010b64f <sysfile_read+0x146>
            lock_mm(mm);
c010b5c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5cb:	89 04 24             	mov    %eax,(%esp)
c010b5ce:	e8 ea fd ff ff       	call   c010b3bd <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b5d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b5da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b5e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b5e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5eb:	89 04 24             	mov    %eax,(%esp)
c010b5ee:	e8 bd cf ff ff       	call   c01085b0 <copy_to_user>
c010b5f3:	85 c0                	test   %eax,%eax
c010b5f5:	74 40                	je     c010b637 <sysfile_read+0x12e>
                    assert(len >= alen);
c010b5f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5fa:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b5fd:	73 24                	jae    c010b623 <sysfile_read+0x11a>
c010b5ff:	c7 44 24 0c d6 7d 11 	movl   $0xc0117dd6,0xc(%esp)
c010b606:	c0 
c010b607:	c7 44 24 08 e2 7d 11 	movl   $0xc0117de2,0x8(%esp)
c010b60e:	c0 
c010b60f:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010b616:	00 
c010b617:	c7 04 24 f7 7d 11 c0 	movl   $0xc0117df7,(%esp)
c010b61e:	e8 a5 58 ff ff       	call   c0100ec8 <__panic>
                    base += alen, len -= alen, copied += alen;
c010b623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b626:	01 45 0c             	add    %eax,0xc(%ebp)
c010b629:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b62c:	29 45 10             	sub    %eax,0x10(%ebp)
c010b62f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b632:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b635:	eb 0d                	jmp    c010b644 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b637:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b63b:	75 07                	jne    c010b644 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b63d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b644:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b647:	89 04 24             	mov    %eax,(%esp)
c010b64a:	e8 a1 fd ff ff       	call   c010b3f0 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b64f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b653:	75 11                	jne    c010b666 <sysfile_read+0x15d>
c010b655:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b658:	85 c0                	test   %eax,%eax
c010b65a:	74 0a                	je     c010b666 <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b65c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b660:	0f 85 1f ff ff ff    	jne    c010b585 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b666:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b669:	89 04 24             	mov    %eax,(%esp)
c010b66c:	e8 04 96 ff ff       	call   c0104c75 <kfree>
    if (copied != 0) {
c010b671:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b675:	74 05                	je     c010b67c <sysfile_read+0x173>
        return copied;
c010b677:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b67a:	eb 03                	jmp    c010b67f <sysfile_read+0x176>
    }
    return ret;
c010b67c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b67f:	c9                   	leave  
c010b680:	c3                   	ret    

c010b681 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b681:	55                   	push   %ebp
c010b682:	89 e5                	mov    %esp,%ebp
c010b684:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b687:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b68c:	8b 40 18             	mov    0x18(%eax),%eax
c010b68f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b692:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b696:	75 0a                	jne    c010b6a2 <sysfile_write+0x21>
        return 0;
c010b698:	b8 00 00 00 00       	mov    $0x0,%eax
c010b69d:	e9 57 01 00 00       	jmp    c010b7f9 <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b6a2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b6a9:	00 
c010b6aa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b6b1:	00 
c010b6b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6b5:	89 04 24             	mov    %eax,(%esp)
c010b6b8:	e8 2a ef ff ff       	call   c010a5e7 <file_testfd>
c010b6bd:	85 c0                	test   %eax,%eax
c010b6bf:	75 0a                	jne    c010b6cb <sysfile_write+0x4a>
        return -E_INVAL;
c010b6c1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b6c6:	e9 2e 01 00 00       	jmp    c010b7f9 <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b6cb:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b6d2:	e8 83 95 ff ff       	call   c0104c5a <kmalloc>
c010b6d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b6da:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b6de:	75 0a                	jne    c010b6ea <sysfile_write+0x69>
        return -E_NO_MEM;
c010b6e0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b6e5:	e9 0f 01 00 00       	jmp    c010b7f9 <sysfile_write+0x178>
    }

    int ret = 0;
c010b6ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b6f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b6f8:	e9 d9 00 00 00       	jmp    c010b7d6 <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b6fd:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b704:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b707:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b70a:	76 06                	jbe    c010b712 <sysfile_write+0x91>
            alen = len;
c010b70c:	8b 45 10             	mov    0x10(%ebp),%eax
c010b70f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b712:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b715:	89 04 24             	mov    %eax,(%esp)
c010b718:	e8 a0 fc ff ff       	call   c010b3bd <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b71d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b720:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b727:	00 
c010b728:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b72c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b72f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b733:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b736:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b73a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b73d:	89 04 24             	mov    %eax,(%esp)
c010b740:	e8 1a ce ff ff       	call   c010855f <copy_from_user>
c010b745:	85 c0                	test   %eax,%eax
c010b747:	75 07                	jne    c010b750 <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b749:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b750:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b753:	89 04 24             	mov    %eax,(%esp)
c010b756:	e8 95 fc ff ff       	call   c010b3f0 <unlock_mm>
        if (ret == 0) {
c010b75b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b75f:	75 68                	jne    c010b7c9 <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b761:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b764:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b767:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b76b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b76f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b772:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b776:	8b 45 08             	mov    0x8(%ebp),%eax
c010b779:	89 04 24             	mov    %eax,(%esp)
c010b77c:	e8 d2 f1 ff ff       	call   c010a953 <file_write>
c010b781:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b784:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b787:	85 c0                	test   %eax,%eax
c010b789:	74 3e                	je     c010b7c9 <sysfile_write+0x148>
                assert(len >= alen);
c010b78b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b78e:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b791:	73 24                	jae    c010b7b7 <sysfile_write+0x136>
c010b793:	c7 44 24 0c d6 7d 11 	movl   $0xc0117dd6,0xc(%esp)
c010b79a:	c0 
c010b79b:	c7 44 24 08 e2 7d 11 	movl   $0xc0117de2,0x8(%esp)
c010b7a2:	c0 
c010b7a3:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010b7aa:	00 
c010b7ab:	c7 04 24 f7 7d 11 c0 	movl   $0xc0117df7,(%esp)
c010b7b2:	e8 11 57 ff ff       	call   c0100ec8 <__panic>
                base += alen, len -= alen, copied += alen;
c010b7b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7ba:	01 45 0c             	add    %eax,0xc(%ebp)
c010b7bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7c0:	29 45 10             	sub    %eax,0x10(%ebp)
c010b7c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7c6:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b7c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7cd:	75 11                	jne    c010b7e0 <sysfile_write+0x15f>
c010b7cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7d2:	85 c0                	test   %eax,%eax
c010b7d4:	74 0a                	je     c010b7e0 <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b7d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b7da:	0f 85 1d ff ff ff    	jne    c010b6fd <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b7e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7e3:	89 04 24             	mov    %eax,(%esp)
c010b7e6:	e8 8a 94 ff ff       	call   c0104c75 <kfree>
    if (copied != 0) {
c010b7eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b7ef:	74 05                	je     c010b7f6 <sysfile_write+0x175>
        return copied;
c010b7f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7f4:	eb 03                	jmp    c010b7f9 <sysfile_write+0x178>
    }
    return ret;
c010b7f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b7f9:	c9                   	leave  
c010b7fa:	c3                   	ret    

c010b7fb <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010b7fb:	55                   	push   %ebp
c010b7fc:	89 e5                	mov    %esp,%ebp
c010b7fe:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010b801:	8b 45 10             	mov    0x10(%ebp),%eax
c010b804:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b808:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b80b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b80f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b812:	89 04 24             	mov    %eax,(%esp)
c010b815:	e8 73 f2 ff ff       	call   c010aa8d <file_seek>
}
c010b81a:	c9                   	leave  
c010b81b:	c3                   	ret    

c010b81c <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010b81c:	55                   	push   %ebp
c010b81d:	89 e5                	mov    %esp,%ebp
c010b81f:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b822:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b827:	8b 40 18             	mov    0x18(%eax),%eax
c010b82a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010b82d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b830:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010b833:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b836:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b83a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b83d:	89 04 24             	mov    %eax,(%esp)
c010b840:	e8 eb f3 ff ff       	call   c010ac30 <file_fstat>
c010b845:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b848:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b84c:	74 05                	je     c010b853 <sysfile_fstat+0x37>
        return ret;
c010b84e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b851:	eb 45                	jmp    c010b898 <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010b853:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b856:	89 04 24             	mov    %eax,(%esp)
c010b859:	e8 5f fb ff ff       	call   c010b3bd <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010b85e:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010b865:	00 
c010b866:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b869:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b86d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b870:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b874:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b877:	89 04 24             	mov    %eax,(%esp)
c010b87a:	e8 31 cd ff ff       	call   c01085b0 <copy_to_user>
c010b87f:	85 c0                	test   %eax,%eax
c010b881:	75 07                	jne    c010b88a <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010b883:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b88a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b88d:	89 04 24             	mov    %eax,(%esp)
c010b890:	e8 5b fb ff ff       	call   c010b3f0 <unlock_mm>
    return ret;
c010b895:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b898:	c9                   	leave  
c010b899:	c3                   	ret    

c010b89a <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010b89a:	55                   	push   %ebp
c010b89b:	89 e5                	mov    %esp,%ebp
c010b89d:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010b8a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8a3:	89 04 24             	mov    %eax,(%esp)
c010b8a6:	e8 44 f4 ff ff       	call   c010acef <file_fsync>
}
c010b8ab:	c9                   	leave  
c010b8ac:	c3                   	ret    

c010b8ad <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010b8ad:	55                   	push   %ebp
c010b8ae:	89 e5                	mov    %esp,%ebp
c010b8b0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b8b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8ba:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b8bd:	89 04 24             	mov    %eax,(%esp)
c010b8c0:	e8 51 fb ff ff       	call   c010b416 <copy_path>
c010b8c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8cc:	74 05                	je     c010b8d3 <sysfile_chdir+0x26>
        return ret;
c010b8ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8d1:	eb 1c                	jmp    c010b8ef <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010b8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8d6:	89 04 24             	mov    %eax,(%esp)
c010b8d9:	e8 6b 4b 00 00       	call   c0110449 <vfs_chdir>
c010b8de:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b8e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8e4:	89 04 24             	mov    %eax,(%esp)
c010b8e7:	e8 89 93 ff ff       	call   c0104c75 <kfree>
    return ret;
c010b8ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b8ef:	c9                   	leave  
c010b8f0:	c3                   	ret    

c010b8f1 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010b8f1:	55                   	push   %ebp
c010b8f2:	89 e5                	mov    %esp,%ebp
c010b8f4:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010b8f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8fe:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b901:	89 04 24             	mov    %eax,(%esp)
c010b904:	e8 0d fb ff ff       	call   c010b416 <copy_path>
c010b909:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b90c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b910:	74 05                	je     c010b917 <sysfile_link+0x26>
        return ret;
c010b912:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b915:	eb 59                	jmp    c010b970 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010b917:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b91a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b91e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b921:	89 04 24             	mov    %eax,(%esp)
c010b924:	e8 ed fa ff ff       	call   c010b416 <copy_path>
c010b929:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b92c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b930:	74 10                	je     c010b942 <sysfile_link+0x51>
        kfree(old_path);
c010b932:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b935:	89 04 24             	mov    %eax,(%esp)
c010b938:	e8 38 93 ff ff       	call   c0104c75 <kfree>
        return ret;
c010b93d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b940:	eb 2e                	jmp    c010b970 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010b942:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b945:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b948:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b94c:	89 04 24             	mov    %eax,(%esp)
c010b94f:	e8 76 46 00 00       	call   c010ffca <vfs_link>
c010b954:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010b957:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b95a:	89 04 24             	mov    %eax,(%esp)
c010b95d:	e8 13 93 ff ff       	call   c0104c75 <kfree>
c010b962:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b965:	89 04 24             	mov    %eax,(%esp)
c010b968:	e8 08 93 ff ff       	call   c0104c75 <kfree>
    return ret;
c010b96d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b970:	c9                   	leave  
c010b971:	c3                   	ret    

c010b972 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010b972:	55                   	push   %ebp
c010b973:	89 e5                	mov    %esp,%ebp
c010b975:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010b978:	8b 45 08             	mov    0x8(%ebp),%eax
c010b97b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b97f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b982:	89 04 24             	mov    %eax,(%esp)
c010b985:	e8 8c fa ff ff       	call   c010b416 <copy_path>
c010b98a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b98d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b991:	74 05                	je     c010b998 <sysfile_rename+0x26>
        return ret;
c010b993:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b996:	eb 59                	jmp    c010b9f1 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010b998:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b99b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b99f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b9a2:	89 04 24             	mov    %eax,(%esp)
c010b9a5:	e8 6c fa ff ff       	call   c010b416 <copy_path>
c010b9aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9b1:	74 10                	je     c010b9c3 <sysfile_rename+0x51>
        kfree(old_path);
c010b9b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9b6:	89 04 24             	mov    %eax,(%esp)
c010b9b9:	e8 b7 92 ff ff       	call   c0104c75 <kfree>
        return ret;
c010b9be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9c1:	eb 2e                	jmp    c010b9f1 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010b9c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b9c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9c9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9cd:	89 04 24             	mov    %eax,(%esp)
c010b9d0:	e8 eb 45 00 00       	call   c010ffc0 <vfs_rename>
c010b9d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010b9d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9db:	89 04 24             	mov    %eax,(%esp)
c010b9de:	e8 92 92 ff ff       	call   c0104c75 <kfree>
c010b9e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9e6:	89 04 24             	mov    %eax,(%esp)
c010b9e9:	e8 87 92 ff ff       	call   c0104c75 <kfree>
    return ret;
c010b9ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b9f1:	c9                   	leave  
c010b9f2:	c3                   	ret    

c010b9f3 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010b9f3:	55                   	push   %ebp
c010b9f4:	89 e5                	mov    %esp,%ebp
c010b9f6:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b9f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba00:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ba03:	89 04 24             	mov    %eax,(%esp)
c010ba06:	e8 0b fa ff ff       	call   c010b416 <copy_path>
c010ba0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba12:	74 05                	je     c010ba19 <sysfile_unlink+0x26>
        return ret;
c010ba14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba17:	eb 1c                	jmp    c010ba35 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010ba19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba1c:	89 04 24             	mov    %eax,(%esp)
c010ba1f:	e8 92 45 00 00       	call   c010ffb6 <vfs_unlink>
c010ba24:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010ba27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba2a:	89 04 24             	mov    %eax,(%esp)
c010ba2d:	e8 43 92 ff ff       	call   c0104c75 <kfree>
    return ret;
c010ba32:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba35:	c9                   	leave  
c010ba36:	c3                   	ret    

c010ba37 <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010ba37:	55                   	push   %ebp
c010ba38:	89 e5                	mov    %esp,%ebp
c010ba3a:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010ba3d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ba42:	8b 40 18             	mov    0x18(%eax),%eax
c010ba45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010ba48:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ba4c:	75 07                	jne    c010ba55 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010ba4e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ba53:	eb 77                	jmp    c010bacc <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010ba55:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010ba5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba5f:	89 04 24             	mov    %eax,(%esp)
c010ba62:	e8 56 f9 ff ff       	call   c010b3bd <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010ba67:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba6a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010ba71:	00 
c010ba72:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ba75:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ba79:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba80:	89 04 24             	mov    %eax,(%esp)
c010ba83:	e8 a4 d4 ff ff       	call   c0108f2c <user_mem_check>
c010ba88:	85 c0                	test   %eax,%eax
c010ba8a:	74 32                	je     c010babe <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010ba8c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010ba93:	00 
c010ba94:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba97:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baa2:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010baa5:	89 04 24             	mov    %eax,(%esp)
c010baa8:	e8 61 f7 ff ff       	call   c010b20e <iobuf_init>
c010baad:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bab0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bab3:	89 04 24             	mov    %eax,(%esp)
c010bab6:	e8 cd 49 00 00       	call   c0110488 <vfs_getcwd>
c010babb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010babe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bac1:	89 04 24             	mov    %eax,(%esp)
c010bac4:	e8 27 f9 ff ff       	call   c010b3f0 <unlock_mm>
    return ret;
c010bac9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bacc:	c9                   	leave  
c010bacd:	c3                   	ret    

c010bace <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bace:	55                   	push   %ebp
c010bacf:	89 e5                	mov    %esp,%ebp
c010bad1:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bad4:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bad9:	8b 40 18             	mov    0x18(%eax),%eax
c010badc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010badf:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bae6:	e8 6f 91 ff ff       	call   c0104c5a <kmalloc>
c010baeb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010baee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010baf2:	75 0a                	jne    c010bafe <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010baf4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010baf9:	e9 c2 00 00 00       	jmp    c010bbc0 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bafe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bb05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb08:	89 04 24             	mov    %eax,(%esp)
c010bb0b:	e8 ad f8 ff ff       	call   c010b3bd <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bb10:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bb13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb16:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bb1d:	00 
c010bb1e:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bb25:	00 
c010bb26:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bb2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb31:	89 04 24             	mov    %eax,(%esp)
c010bb34:	e8 26 ca ff ff       	call   c010855f <copy_from_user>
c010bb39:	85 c0                	test   %eax,%eax
c010bb3b:	75 07                	jne    c010bb44 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bb3d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bb44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb47:	89 04 24             	mov    %eax,(%esp)
c010bb4a:	e8 a1 f8 ff ff       	call   c010b3f0 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bb4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb53:	75 5d                	jne    c010bbb2 <sysfile_getdirentry+0xe4>
c010bb55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb58:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb5f:	89 04 24             	mov    %eax,(%esp)
c010bb62:	e8 40 f2 ff ff       	call   c010ada7 <file_getdirentry>
c010bb67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb6e:	75 42                	jne    c010bbb2 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bb70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb73:	89 04 24             	mov    %eax,(%esp)
c010bb76:	e8 42 f8 ff ff       	call   c010b3bd <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010bb7b:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010bb82:	00 
c010bb83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb86:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bb8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb94:	89 04 24             	mov    %eax,(%esp)
c010bb97:	e8 14 ca ff ff       	call   c01085b0 <copy_to_user>
c010bb9c:	85 c0                	test   %eax,%eax
c010bb9e:	75 07                	jne    c010bba7 <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010bba0:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bba7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbaa:	89 04 24             	mov    %eax,(%esp)
c010bbad:	e8 3e f8 ff ff       	call   c010b3f0 <unlock_mm>

out:
    kfree(direntp);
c010bbb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbb5:	89 04 24             	mov    %eax,(%esp)
c010bbb8:	e8 b8 90 ff ff       	call   c0104c75 <kfree>
    return ret;
c010bbbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bbc0:	c9                   	leave  
c010bbc1:	c3                   	ret    

c010bbc2 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010bbc2:	55                   	push   %ebp
c010bbc3:	89 e5                	mov    %esp,%ebp
c010bbc5:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010bbc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbcb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbd2:	89 04 24             	mov    %eax,(%esp)
c010bbd5:	e8 db f2 ff ff       	call   c010aeb5 <file_dup>
}
c010bbda:	c9                   	leave  
c010bbdb:	c3                   	ret    

c010bbdc <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010bbdc:	55                   	push   %ebp
c010bbdd:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bbdf:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bbe4:	5d                   	pop    %ebp
c010bbe5:	c3                   	ret    

c010bbe6 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010bbe6:	55                   	push   %ebp
c010bbe7:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bbe9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bbee:	5d                   	pop    %ebp
c010bbef:	c3                   	ret    

c010bbf0 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010bbf0:	52                   	push   %edx
    call *%ebx              # call fn
c010bbf1:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010bbf3:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010bbf4:	e8 36 0e 00 00       	call   c010ca2f <do_exit>

c010bbf9 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010bbf9:	55                   	push   %ebp
c010bbfa:	89 e5                	mov    %esp,%ebp
c010bbfc:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010bbff:	8b 55 10             	mov    0x10(%ebp),%edx
c010bc02:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc05:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010bc07:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc0a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc0d:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010bc10:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc13:	83 c0 08             	add    $0x8,%eax
c010bc16:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bc19:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc1c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bc1f:	89 50 04             	mov    %edx,0x4(%eax)
c010bc22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc25:	8b 50 04             	mov    0x4(%eax),%edx
c010bc28:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc2b:	89 10                	mov    %edx,(%eax)
    return timer;
c010bc2d:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bc30:	c9                   	leave  
c010bc31:	c3                   	ret    

c010bc32 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010bc32:	55                   	push   %ebp
c010bc33:	89 e5                	mov    %esp,%ebp
c010bc35:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bc38:	9c                   	pushf  
c010bc39:	58                   	pop    %eax
c010bc3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010bc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010bc40:	25 00 02 00 00       	and    $0x200,%eax
c010bc45:	85 c0                	test   %eax,%eax
c010bc47:	74 0c                	je     c010bc55 <__intr_save+0x23>
        intr_disable();
c010bc49:	e8 dc 64 ff ff       	call   c010212a <intr_disable>
        return 1;
c010bc4e:	b8 01 00 00 00       	mov    $0x1,%eax
c010bc53:	eb 05                	jmp    c010bc5a <__intr_save+0x28>
    }
    return 0;
c010bc55:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc5a:	c9                   	leave  
c010bc5b:	c3                   	ret    

c010bc5c <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010bc5c:	55                   	push   %ebp
c010bc5d:	89 e5                	mov    %esp,%ebp
c010bc5f:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010bc62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bc66:	74 05                	je     c010bc6d <__intr_restore+0x11>
        intr_enable();
c010bc68:	e8 b7 64 ff ff       	call   c0102124 <intr_enable>
    }
}
c010bc6d:	c9                   	leave  
c010bc6e:	c3                   	ret    

c010bc6f <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010bc6f:	55                   	push   %ebp
c010bc70:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010bc72:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc75:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010bc7a:	29 c2                	sub    %eax,%edx
c010bc7c:	89 d0                	mov    %edx,%eax
c010bc7e:	c1 f8 05             	sar    $0x5,%eax
}
c010bc81:	5d                   	pop    %ebp
c010bc82:	c3                   	ret    

c010bc83 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010bc83:	55                   	push   %ebp
c010bc84:	89 e5                	mov    %esp,%ebp
c010bc86:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010bc89:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc8c:	89 04 24             	mov    %eax,(%esp)
c010bc8f:	e8 db ff ff ff       	call   c010bc6f <page2ppn>
c010bc94:	c1 e0 0c             	shl    $0xc,%eax
}
c010bc97:	c9                   	leave  
c010bc98:	c3                   	ret    

c010bc99 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010bc99:	55                   	push   %ebp
c010bc9a:	89 e5                	mov    %esp,%ebp
c010bc9c:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010bc9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bca2:	c1 e8 0c             	shr    $0xc,%eax
c010bca5:	89 c2                	mov    %eax,%edx
c010bca7:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bcac:	39 c2                	cmp    %eax,%edx
c010bcae:	72 1c                	jb     c010bccc <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010bcb0:	c7 44 24 08 0c 7e 11 	movl   $0xc0117e0c,0x8(%esp)
c010bcb7:	c0 
c010bcb8:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010bcbf:	00 
c010bcc0:	c7 04 24 2b 7e 11 c0 	movl   $0xc0117e2b,(%esp)
c010bcc7:	e8 fc 51 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010bccc:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010bcd1:	8b 55 08             	mov    0x8(%ebp),%edx
c010bcd4:	c1 ea 0c             	shr    $0xc,%edx
c010bcd7:	c1 e2 05             	shl    $0x5,%edx
c010bcda:	01 d0                	add    %edx,%eax
}
c010bcdc:	c9                   	leave  
c010bcdd:	c3                   	ret    

c010bcde <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010bcde:	55                   	push   %ebp
c010bcdf:	89 e5                	mov    %esp,%ebp
c010bce1:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bce4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bce7:	89 04 24             	mov    %eax,(%esp)
c010bcea:	e8 94 ff ff ff       	call   c010bc83 <page2pa>
c010bcef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bcf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcf5:	c1 e8 0c             	shr    $0xc,%eax
c010bcf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bcfb:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bd00:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bd03:	72 23                	jb     c010bd28 <page2kva+0x4a>
c010bd05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd08:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bd0c:	c7 44 24 08 3c 7e 11 	movl   $0xc0117e3c,0x8(%esp)
c010bd13:	c0 
c010bd14:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010bd1b:	00 
c010bd1c:	c7 04 24 2b 7e 11 c0 	movl   $0xc0117e2b,(%esp)
c010bd23:	e8 a0 51 ff ff       	call   c0100ec8 <__panic>
c010bd28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd2b:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bd30:	c9                   	leave  
c010bd31:	c3                   	ret    

c010bd32 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bd32:	55                   	push   %ebp
c010bd33:	89 e5                	mov    %esp,%ebp
c010bd35:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010bd38:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd3e:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bd45:	77 23                	ja     c010bd6a <kva2page+0x38>
c010bd47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd4a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bd4e:	c7 44 24 08 60 7e 11 	movl   $0xc0117e60,0x8(%esp)
c010bd55:	c0 
c010bd56:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010bd5d:	00 
c010bd5e:	c7 04 24 2b 7e 11 c0 	movl   $0xc0117e2b,(%esp)
c010bd65:	e8 5e 51 ff ff       	call   c0100ec8 <__panic>
c010bd6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd6d:	05 00 00 00 40       	add    $0x40000000,%eax
c010bd72:	89 04 24             	mov    %eax,(%esp)
c010bd75:	e8 1f ff ff ff       	call   c010bc99 <pa2page>
}
c010bd7a:	c9                   	leave  
c010bd7b:	c3                   	ret    

c010bd7c <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010bd7c:	55                   	push   %ebp
c010bd7d:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010bd7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd82:	8b 40 18             	mov    0x18(%eax),%eax
c010bd85:	8d 50 01             	lea    0x1(%eax),%edx
c010bd88:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd8b:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bd8e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd91:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bd94:	5d                   	pop    %ebp
c010bd95:	c3                   	ret    

c010bd96 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010bd96:	55                   	push   %ebp
c010bd97:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010bd99:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd9c:	8b 40 18             	mov    0x18(%eax),%eax
c010bd9f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bda2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bda5:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bda8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdab:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bdae:	5d                   	pop    %ebp
c010bdaf:	c3                   	ret    

c010bdb0 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010bdb0:	55                   	push   %ebp
c010bdb1:	89 e5                	mov    %esp,%ebp
c010bdb3:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bdb6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bdba:	74 25                	je     c010bde1 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010bdbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdbf:	83 c0 1c             	add    $0x1c,%eax
c010bdc2:	89 04 24             	mov    %eax,(%esp)
c010bdc5:	e8 fd dd ff ff       	call   c0109bc7 <down>
        if (current != NULL) {
c010bdca:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bdcf:	85 c0                	test   %eax,%eax
c010bdd1:	74 0e                	je     c010bde1 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010bdd3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bdd8:	8b 50 04             	mov    0x4(%eax),%edx
c010bddb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdde:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010bde1:	c9                   	leave  
c010bde2:	c3                   	ret    

c010bde3 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010bde3:	55                   	push   %ebp
c010bde4:	89 e5                	mov    %esp,%ebp
c010bde6:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bde9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bded:	74 18                	je     c010be07 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010bdef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdf2:	83 c0 1c             	add    $0x1c,%eax
c010bdf5:	89 04 24             	mov    %eax,(%esp)
c010bdf8:	e8 af dd ff ff       	call   c0109bac <up>
        mm->locked_by = 0;
c010bdfd:	8b 45 08             	mov    0x8(%ebp),%eax
c010be00:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010be07:	c9                   	leave  
c010be08:	c3                   	ret    

c010be09 <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010be09:	55                   	push   %ebp
c010be0a:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010be0c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be0f:	8b 40 08             	mov    0x8(%eax),%eax
c010be12:	8d 50 01             	lea    0x1(%eax),%edx
c010be15:	8b 45 08             	mov    0x8(%ebp),%eax
c010be18:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010be1b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be1e:	8b 40 08             	mov    0x8(%eax),%eax
}
c010be21:	5d                   	pop    %ebp
c010be22:	c3                   	ret    

c010be23 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010be23:	55                   	push   %ebp
c010be24:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010be26:	8b 45 08             	mov    0x8(%ebp),%eax
c010be29:	8b 40 08             	mov    0x8(%eax),%eax
c010be2c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010be2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010be32:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010be35:	8b 45 08             	mov    0x8(%ebp),%eax
c010be38:	8b 40 08             	mov    0x8(%eax),%eax
}
c010be3b:	5d                   	pop    %ebp
c010be3c:	c3                   	ret    

c010be3d <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010be3d:	55                   	push   %ebp
c010be3e:	89 e5                	mov    %esp,%ebp
c010be40:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010be43:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010be4a:	e8 0b 8e ff ff       	call   c0104c5a <kmalloc>
c010be4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010be52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010be56:	0f 84 6a 01 00 00    	je     c010bfc6 <alloc_proc+0x189>
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
		proc->state = PROC_UNINIT;
c010be5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    	proc->pid = -1;
c010be65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be68:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
    	proc->runs = 0;
c010be6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be72:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    	proc->kstack = 0;
c010be79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be7c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    	proc->need_resched = 0;
c010be83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be86:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    	proc->parent = NULL;
c010be8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be90:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    	proc->mm = NULL;
c010be97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be9a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    	memset(&(proc->context), 0, sizeof(struct context));
c010bea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bea4:	83 c0 1c             	add    $0x1c,%eax
c010bea7:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010beae:	00 
c010beaf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010beb6:	00 
c010beb7:	89 04 24             	mov    %eax,(%esp)
c010beba:	e8 73 95 00 00       	call   c0115432 <memset>
    	proc->tf = NULL;
c010bebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bec2:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    	proc->cr3 = boot_cr3;
c010bec9:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010becf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed2:	89 50 40             	mov    %edx,0x40(%eax)
    	proc->flags = 0;
c010bed5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    	memset(&(proc->name), 0, sizeof(char[16]));
c010bedf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bee2:	83 c0 48             	add    $0x48,%eax
c010bee5:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010beec:	00 
c010beed:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bef4:	00 
c010bef5:	89 04 24             	mov    %eax,(%esp)
c010bef8:	e8 35 95 00 00       	call   c0115432 <memset>
    	proc->wait_state = 0;
c010befd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf00:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010bf07:	00 00 00 
    	proc->yptr = proc->cptr = proc->optr = NULL;
c010bf0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf0d:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010bf14:	00 00 00 
c010bf17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf1a:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010bf20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf23:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
c010bf29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf2c:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010bf32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf35:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    	proc->rq = NULL;
c010bf3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf3e:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010bf45:	00 00 00 
    	list_init(&(proc->run_link));
c010bf48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf4b:	05 a4 00 00 00       	add    $0xa4,%eax
c010bf50:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf56:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bf59:	89 50 04             	mov    %edx,0x4(%eax)
c010bf5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf5f:	8b 50 04             	mov    0x4(%eax),%edx
c010bf62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf65:	89 10                	mov    %edx,(%eax)
    	proc->time_slice = 0;
c010bf67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf6a:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010bf71:	00 00 00 
    	skew_heap_init(&(proc->lab6_run_pool));
c010bf74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf77:	05 b0 00 00 00       	add    $0xb0,%eax
c010bf7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010bf7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bf82:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010bf88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bf8b:	8b 10                	mov    (%eax),%edx
c010bf8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bf90:	89 50 08             	mov    %edx,0x8(%eax)
c010bf93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bf96:	8b 50 08             	mov    0x8(%eax),%edx
c010bf99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bf9c:	89 50 04             	mov    %edx,0x4(%eax)
    	proc->lab6_priority = 0;
c010bf9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfa2:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010bfa9:	00 00 00 
    	proc->lab6_stride = 0;
c010bfac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfaf:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010bfb6:	00 00 00 
    	proc->filesp = NULL;
c010bfb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfbc:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010bfc3:	00 00 00 
    }
    return proc;
c010bfc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bfc9:	c9                   	leave  
c010bfca:	c3                   	ret    

c010bfcb <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010bfcb:	55                   	push   %ebp
c010bfcc:	89 e5                	mov    %esp,%ebp
c010bfce:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010bfd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd4:	83 c0 48             	add    $0x48,%eax
c010bfd7:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010bfde:	00 
c010bfdf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bfe6:	00 
c010bfe7:	89 04 24             	mov    %eax,(%esp)
c010bfea:	e8 43 94 00 00       	call   c0115432 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010bfef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bff2:	8d 50 48             	lea    0x48(%eax),%edx
c010bff5:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010bffc:	00 
c010bffd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c000:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c004:	89 14 24             	mov    %edx,(%esp)
c010c007:	e8 08 95 00 00       	call   c0115514 <memcpy>
}
c010c00c:	c9                   	leave  
c010c00d:	c3                   	ret    

c010c00e <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c00e:	55                   	push   %ebp
c010c00f:	89 e5                	mov    %esp,%ebp
c010c011:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c014:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c01b:	00 
c010c01c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c023:	00 
c010c024:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c02b:	e8 02 94 00 00       	call   c0115432 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c030:	8b 45 08             	mov    0x8(%ebp),%eax
c010c033:	83 c0 48             	add    $0x48,%eax
c010c036:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c03d:	00 
c010c03e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c042:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c049:	e8 c6 94 00 00       	call   c0115514 <memcpy>
}
c010c04e:	c9                   	leave  
c010c04f:	c3                   	ret    

c010c050 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c050:	55                   	push   %ebp
c010c051:	89 e5                	mov    %esp,%ebp
c010c053:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c056:	8b 45 08             	mov    0x8(%ebp),%eax
c010c059:	83 c0 7c             	add    $0x7c,%eax
c010c05c:	c7 45 fc fc 31 15 c0 	movl   $0xc01531fc,-0x4(%ebp)
c010c063:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c066:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c069:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c06c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c06f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c072:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c075:	8b 40 04             	mov    0x4(%eax),%eax
c010c078:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c07b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c07e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c081:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c084:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c087:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c08a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c08d:	89 10                	mov    %edx,(%eax)
c010c08f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c092:	8b 10                	mov    (%eax),%edx
c010c094:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c097:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c09a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c09d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c0a0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c0a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0a6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c0a9:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c0ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0ae:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c0b5:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0bb:	8b 40 14             	mov    0x14(%eax),%eax
c010c0be:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c0c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0c7:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c0cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0d0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c0d6:	85 c0                	test   %eax,%eax
c010c0d8:	74 12                	je     c010c0ec <set_links+0x9c>
        proc->optr->yptr = proc;
c010c0da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0dd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c0e3:	8b 55 08             	mov    0x8(%ebp),%edx
c010c0e6:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c0ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0ef:	8b 40 14             	mov    0x14(%eax),%eax
c010c0f2:	8b 55 08             	mov    0x8(%ebp),%edx
c010c0f5:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c0fb:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c100:	83 c0 01             	add    $0x1,%eax
c010c103:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c108:	c9                   	leave  
c010c109:	c3                   	ret    

c010c10a <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c10a:	55                   	push   %ebp
c010c10b:	89 e5                	mov    %esp,%ebp
c010c10d:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c110:	8b 45 08             	mov    0x8(%ebp),%eax
c010c113:	83 c0 7c             	add    $0x7c,%eax
c010c116:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c119:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c11c:	8b 40 04             	mov    0x4(%eax),%eax
c010c11f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c122:	8b 12                	mov    (%edx),%edx
c010c124:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c127:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c12a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c12d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c130:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c133:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c136:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c139:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c13b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c13e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c144:	85 c0                	test   %eax,%eax
c010c146:	74 18                	je     c010c160 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c148:	8b 45 08             	mov    0x8(%ebp),%eax
c010c14b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c151:	8b 55 08             	mov    0x8(%ebp),%edx
c010c154:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c15a:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c160:	8b 45 08             	mov    0x8(%ebp),%eax
c010c163:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c169:	85 c0                	test   %eax,%eax
c010c16b:	74 1a                	je     c010c187 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c16d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c170:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c176:	8b 55 08             	mov    0x8(%ebp),%edx
c010c179:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c17f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c185:	eb 15                	jmp    c010c19c <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c187:	8b 45 08             	mov    0x8(%ebp),%eax
c010c18a:	8b 40 14             	mov    0x14(%eax),%eax
c010c18d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c190:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c196:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c19c:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c1a1:	83 e8 01             	sub    $0x1,%eax
c010c1a4:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c1a9:	c9                   	leave  
c010c1aa:	c3                   	ret    

c010c1ab <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c1ab:	55                   	push   %ebp
c010c1ac:	89 e5                	mov    %esp,%ebp
c010c1ae:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c1b1:	c7 45 f8 fc 31 15 c0 	movl   $0xc01531fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c1b8:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c1bd:	83 c0 01             	add    $0x1,%eax
c010c1c0:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c1c5:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c1ca:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c1cf:	7e 0c                	jle    c010c1dd <get_pid+0x32>
        last_pid = 1;
c010c1d1:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c1d8:	00 00 00 
        goto inside;
c010c1db:	eb 13                	jmp    c010c1f0 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c1dd:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c1e3:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c1e8:	39 c2                	cmp    %eax,%edx
c010c1ea:	0f 8c ac 00 00 00    	jl     c010c29c <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c1f0:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c1f7:	20 00 00 
    repeat:
        le = list;
c010c1fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c1fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c200:	eb 7f                	jmp    c010c281 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c202:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c205:	83 e8 7c             	sub    $0x7c,%eax
c010c208:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c20b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c20e:	8b 50 04             	mov    0x4(%eax),%edx
c010c211:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c216:	39 c2                	cmp    %eax,%edx
c010c218:	75 3e                	jne    c010c258 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c21a:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c21f:	83 c0 01             	add    $0x1,%eax
c010c222:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c227:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c22d:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c232:	39 c2                	cmp    %eax,%edx
c010c234:	7c 4b                	jl     c010c281 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c236:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c23b:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c240:	7e 0a                	jle    c010c24c <get_pid+0xa1>
                        last_pid = 1;
c010c242:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c249:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c24c:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c253:	20 00 00 
                    goto repeat;
c010c256:	eb a2                	jmp    c010c1fa <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c258:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c25b:	8b 50 04             	mov    0x4(%eax),%edx
c010c25e:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c263:	39 c2                	cmp    %eax,%edx
c010c265:	7e 1a                	jle    c010c281 <get_pid+0xd6>
c010c267:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c26a:	8b 50 04             	mov    0x4(%eax),%edx
c010c26d:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c272:	39 c2                	cmp    %eax,%edx
c010c274:	7d 0b                	jge    c010c281 <get_pid+0xd6>
                next_safe = proc->pid;
c010c276:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c279:	8b 40 04             	mov    0x4(%eax),%eax
c010c27c:	a3 88 ea 14 c0       	mov    %eax,0xc014ea88
c010c281:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c284:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c287:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c28a:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c28d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c290:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c293:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c296:	0f 85 66 ff ff ff    	jne    c010c202 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c29c:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
}
c010c2a1:	c9                   	leave  
c010c2a2:	c3                   	ret    

c010c2a3 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c2a3:	55                   	push   %ebp
c010c2a4:	89 e5                	mov    %esp,%ebp
c010c2a6:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c2a9:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c2ae:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c2b1:	74 63                	je     c010c316 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c2b3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c2b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2be:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c2c1:	e8 6c f9 ff ff       	call   c010bc32 <__intr_save>
c010c2c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c2c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2cc:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28
            load_esp0(next->kstack + KSTACKSIZE);
c010c2d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2d4:	8b 40 0c             	mov    0xc(%eax),%eax
c010c2d7:	05 00 20 00 00       	add    $0x2000,%eax
c010c2dc:	89 04 24             	mov    %eax,(%esp)
c010c2df:	e8 9d 8c ff ff       	call   c0104f81 <load_esp0>
            lcr3(next->cr3);
c010c2e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2e7:	8b 40 40             	mov    0x40(%eax),%eax
c010c2ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c2ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2f0:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c2f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2f6:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c2f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2fc:	83 c0 1c             	add    $0x1c,%eax
c010c2ff:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c303:	89 04 24             	mov    %eax,(%esp)
c010c306:	e8 c2 1c 00 00       	call   c010dfcd <switch_to>
        }
        local_intr_restore(intr_flag);
c010c30b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c30e:	89 04 24             	mov    %eax,(%esp)
c010c311:	e8 46 f9 ff ff       	call   c010bc5c <__intr_restore>
    }
}
c010c316:	c9                   	leave  
c010c317:	c3                   	ret    

c010c318 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c318:	55                   	push   %ebp
c010c319:	89 e5                	mov    %esp,%ebp
c010c31b:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c31e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c323:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c326:	89 04 24             	mov    %eax,(%esp)
c010c329:	e8 f4 67 ff ff       	call   c0102b22 <forkrets>
}
c010c32e:	c9                   	leave  
c010c32f:	c3                   	ret    

c010c330 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c330:	55                   	push   %ebp
c010c331:	89 e5                	mov    %esp,%ebp
c010c333:	53                   	push   %ebx
c010c334:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c337:	8b 45 08             	mov    0x8(%ebp),%eax
c010c33a:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c340:	8b 45 08             	mov    0x8(%ebp),%eax
c010c343:	8b 40 04             	mov    0x4(%eax),%eax
c010c346:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c34d:	00 
c010c34e:	89 04 24             	mov    %eax,(%esp)
c010c351:	e8 82 85 00 00       	call   c01148d8 <hash32>
c010c356:	c1 e0 03             	shl    $0x3,%eax
c010c359:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c35e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c361:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c364:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c367:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c36a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c36d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c370:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c373:	8b 40 04             	mov    0x4(%eax),%eax
c010c376:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c379:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c37c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c37f:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c382:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c385:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c388:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c38b:	89 10                	mov    %edx,(%eax)
c010c38d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c390:	8b 10                	mov    (%eax),%edx
c010c392:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c395:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c39b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c39e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c3a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c3a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c3a7:	89 10                	mov    %edx,(%eax)
}
c010c3a9:	83 c4 34             	add    $0x34,%esp
c010c3ac:	5b                   	pop    %ebx
c010c3ad:	5d                   	pop    %ebp
c010c3ae:	c3                   	ret    

c010c3af <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c3af:	55                   	push   %ebp
c010c3b0:	89 e5                	mov    %esp,%ebp
c010c3b2:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c3b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3b8:	05 84 00 00 00       	add    $0x84,%eax
c010c3bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c3c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3c3:	8b 40 04             	mov    0x4(%eax),%eax
c010c3c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c3c9:	8b 12                	mov    (%edx),%edx
c010c3cb:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c3ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c3d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c3d7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c3da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3dd:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c3e0:	89 10                	mov    %edx,(%eax)
}
c010c3e2:	c9                   	leave  
c010c3e3:	c3                   	ret    

c010c3e4 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c3e4:	55                   	push   %ebp
c010c3e5:	89 e5                	mov    %esp,%ebp
c010c3e7:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c3ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c3ee:	7e 61                	jle    c010c451 <find_proc+0x6d>
c010c3f0:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c3f7:	7f 58                	jg     c010c451 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c3f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3fc:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c403:	00 
c010c404:	89 04 24             	mov    %eax,(%esp)
c010c407:	e8 cc 84 00 00       	call   c01148d8 <hash32>
c010c40c:	c1 e0 03             	shl    $0x3,%eax
c010c40f:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c414:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c417:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c41a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c41d:	eb 1b                	jmp    c010c43a <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c41f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c422:	2d 84 00 00 00       	sub    $0x84,%eax
c010c427:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c42a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c42d:	8b 40 04             	mov    0x4(%eax),%eax
c010c430:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c433:	75 05                	jne    c010c43a <find_proc+0x56>
                return proc;
c010c435:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c438:	eb 1c                	jmp    c010c456 <find_proc+0x72>
c010c43a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c43d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c440:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c443:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c446:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c449:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c44c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c44f:	75 ce                	jne    c010c41f <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c451:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c456:	c9                   	leave  
c010c457:	c3                   	ret    

c010c458 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c458:	55                   	push   %ebp
c010c459:	89 e5                	mov    %esp,%ebp
c010c45b:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c45e:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c465:	00 
c010c466:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c46d:	00 
c010c46e:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c471:	89 04 24             	mov    %eax,(%esp)
c010c474:	e8 b9 8f 00 00       	call   c0115432 <memset>
    tf.tf_cs = KERNEL_CS;
c010c479:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c47f:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c485:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c489:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c48d:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c491:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c495:	8b 45 08             	mov    0x8(%ebp),%eax
c010c498:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c49b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c49e:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c4a1:	b8 f0 bb 10 c0       	mov    $0xc010bbf0,%eax
c010c4a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c4a9:	8b 45 10             	mov    0x10(%ebp),%eax
c010c4ac:	80 cc 01             	or     $0x1,%ah
c010c4af:	89 c2                	mov    %eax,%edx
c010c4b1:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c4b4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c4b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c4bf:	00 
c010c4c0:	89 14 24             	mov    %edx,(%esp)
c010c4c3:	e8 0e 04 00 00       	call   c010c8d6 <do_fork>
}
c010c4c8:	c9                   	leave  
c010c4c9:	c3                   	ret    

c010c4ca <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c4ca:	55                   	push   %ebp
c010c4cb:	89 e5                	mov    %esp,%ebp
c010c4cd:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c4d0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c4d7:	e8 f3 8b ff ff       	call   c01050cf <alloc_pages>
c010c4dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c4df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4e3:	74 1a                	je     c010c4ff <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c4e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4e8:	89 04 24             	mov    %eax,(%esp)
c010c4eb:	e8 ee f7 ff ff       	call   c010bcde <page2kva>
c010c4f0:	89 c2                	mov    %eax,%edx
c010c4f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4f5:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c4f8:	b8 00 00 00 00       	mov    $0x0,%eax
c010c4fd:	eb 05                	jmp    c010c504 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c4ff:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c504:	c9                   	leave  
c010c505:	c3                   	ret    

c010c506 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c506:	55                   	push   %ebp
c010c507:	89 e5                	mov    %esp,%ebp
c010c509:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c50c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c50f:	8b 40 0c             	mov    0xc(%eax),%eax
c010c512:	89 04 24             	mov    %eax,(%esp)
c010c515:	e8 18 f8 ff ff       	call   c010bd32 <kva2page>
c010c51a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c521:	00 
c010c522:	89 04 24             	mov    %eax,(%esp)
c010c525:	e8 10 8c ff ff       	call   c010513a <free_pages>
}
c010c52a:	c9                   	leave  
c010c52b:	c3                   	ret    

c010c52c <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c52c:	55                   	push   %ebp
c010c52d:	89 e5                	mov    %esp,%ebp
c010c52f:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c532:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c539:	e8 91 8b ff ff       	call   c01050cf <alloc_pages>
c010c53e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c541:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c545:	75 0a                	jne    c010c551 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c547:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c54c:	e9 80 00 00 00       	jmp    c010c5d1 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c551:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c554:	89 04 24             	mov    %eax,(%esp)
c010c557:	e8 82 f7 ff ff       	call   c010bcde <page2kva>
c010c55c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c55f:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010c564:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c56b:	00 
c010c56c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c570:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c573:	89 04 24             	mov    %eax,(%esp)
c010c576:	e8 99 8f 00 00       	call   c0115514 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c57b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c57e:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c584:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c587:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c58a:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c591:	77 23                	ja     c010c5b6 <setup_pgdir+0x8a>
c010c593:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c596:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c59a:	c7 44 24 08 60 7e 11 	movl   $0xc0117e60,0x8(%esp)
c010c5a1:	c0 
c010c5a2:	c7 44 24 04 43 01 00 	movl   $0x143,0x4(%esp)
c010c5a9:	00 
c010c5aa:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010c5b1:	e8 12 49 ff ff       	call   c0100ec8 <__panic>
c010c5b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5b9:	05 00 00 00 40       	add    $0x40000000,%eax
c010c5be:	83 c8 03             	or     $0x3,%eax
c010c5c1:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c5c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c5c9:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c5cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c5d1:	c9                   	leave  
c010c5d2:	c3                   	ret    

c010c5d3 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c5d3:	55                   	push   %ebp
c010c5d4:	89 e5                	mov    %esp,%ebp
c010c5d6:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c5d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5dc:	8b 40 0c             	mov    0xc(%eax),%eax
c010c5df:	89 04 24             	mov    %eax,(%esp)
c010c5e2:	e8 4b f7 ff ff       	call   c010bd32 <kva2page>
c010c5e7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c5ee:	00 
c010c5ef:	89 04 24             	mov    %eax,(%esp)
c010c5f2:	e8 43 8b ff ff       	call   c010513a <free_pages>
}
c010c5f7:	c9                   	leave  
c010c5f8:	c3                   	ret    

c010c5f9 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c5f9:	55                   	push   %ebp
c010c5fa:	89 e5                	mov    %esp,%ebp
c010c5fc:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c5ff:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c604:	8b 40 18             	mov    0x18(%eax),%eax
c010c607:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c60a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c60e:	75 0a                	jne    c010c61a <copy_mm+0x21>
        return 0;
c010c610:	b8 00 00 00 00       	mov    $0x0,%eax
c010c615:	e9 f9 00 00 00       	jmp    c010c713 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c61a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c61d:	25 00 01 00 00       	and    $0x100,%eax
c010c622:	85 c0                	test   %eax,%eax
c010c624:	74 08                	je     c010c62e <copy_mm+0x35>
        mm = oldmm;
c010c626:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c629:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c62c:	eb 78                	jmp    c010c6a6 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c62e:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c635:	e8 29 b8 ff ff       	call   c0107e63 <mm_create>
c010c63a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c63d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c641:	75 05                	jne    c010c648 <copy_mm+0x4f>
        goto bad_mm;
c010c643:	e9 c8 00 00 00       	jmp    c010c710 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c648:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c64b:	89 04 24             	mov    %eax,(%esp)
c010c64e:	e8 d9 fe ff ff       	call   c010c52c <setup_pgdir>
c010c653:	85 c0                	test   %eax,%eax
c010c655:	74 05                	je     c010c65c <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c657:	e9 a9 00 00 00       	jmp    c010c705 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c65c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c65f:	89 04 24             	mov    %eax,(%esp)
c010c662:	e8 49 f7 ff ff       	call   c010bdb0 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c667:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c66a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c66e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c671:	89 04 24             	mov    %eax,(%esp)
c010c674:	e8 0d bd ff ff       	call   c0108386 <dup_mmap>
c010c679:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c67c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c67f:	89 04 24             	mov    %eax,(%esp)
c010c682:	e8 5c f7 ff ff       	call   c010bde3 <unlock_mm>

    if (ret != 0) {
c010c687:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c68b:	74 19                	je     c010c6a6 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c68d:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c68e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c691:	89 04 24             	mov    %eax,(%esp)
c010c694:	e8 ee bd ff ff       	call   c0108487 <exit_mmap>
    put_pgdir(mm);
c010c699:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c69c:	89 04 24             	mov    %eax,(%esp)
c010c69f:	e8 2f ff ff ff       	call   c010c5d3 <put_pgdir>
c010c6a4:	eb 5f                	jmp    c010c705 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c6a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6a9:	89 04 24             	mov    %eax,(%esp)
c010c6ac:	e8 cb f6 ff ff       	call   c010bd7c <mm_count_inc>
    proc->mm = mm;
c010c6b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c6b7:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c6ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6bd:	8b 40 0c             	mov    0xc(%eax),%eax
c010c6c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c6c3:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c6ca:	77 23                	ja     c010c6ef <copy_mm+0xf6>
c010c6cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c6d3:	c7 44 24 08 60 7e 11 	movl   $0xc0117e60,0x8(%esp)
c010c6da:	c0 
c010c6db:	c7 44 24 04 72 01 00 	movl   $0x172,0x4(%esp)
c010c6e2:	00 
c010c6e3:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010c6ea:	e8 d9 47 ff ff       	call   c0100ec8 <__panic>
c010c6ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6f2:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c6f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6fb:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c6fe:	b8 00 00 00 00       	mov    $0x0,%eax
c010c703:	eb 0e                	jmp    c010c713 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c705:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c708:	89 04 24             	mov    %eax,(%esp)
c010c70b:	e8 b8 ba ff ff       	call   c01081c8 <mm_destroy>
bad_mm:
    return ret;
c010c710:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c713:	c9                   	leave  
c010c714:	c3                   	ret    

c010c715 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c715:	55                   	push   %ebp
c010c716:	89 e5                	mov    %esp,%ebp
c010c718:	57                   	push   %edi
c010c719:	56                   	push   %esi
c010c71a:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c71b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c71e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c721:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c726:	89 c2                	mov    %eax,%edx
c010c728:	8b 45 08             	mov    0x8(%ebp),%eax
c010c72b:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c72e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c731:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c734:	8b 55 10             	mov    0x10(%ebp),%edx
c010c737:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c73c:	89 c1                	mov    %eax,%ecx
c010c73e:	83 e1 01             	and    $0x1,%ecx
c010c741:	85 c9                	test   %ecx,%ecx
c010c743:	74 0e                	je     c010c753 <copy_thread+0x3e>
c010c745:	0f b6 0a             	movzbl (%edx),%ecx
c010c748:	88 08                	mov    %cl,(%eax)
c010c74a:	83 c0 01             	add    $0x1,%eax
c010c74d:	83 c2 01             	add    $0x1,%edx
c010c750:	83 eb 01             	sub    $0x1,%ebx
c010c753:	89 c1                	mov    %eax,%ecx
c010c755:	83 e1 02             	and    $0x2,%ecx
c010c758:	85 c9                	test   %ecx,%ecx
c010c75a:	74 0f                	je     c010c76b <copy_thread+0x56>
c010c75c:	0f b7 0a             	movzwl (%edx),%ecx
c010c75f:	66 89 08             	mov    %cx,(%eax)
c010c762:	83 c0 02             	add    $0x2,%eax
c010c765:	83 c2 02             	add    $0x2,%edx
c010c768:	83 eb 02             	sub    $0x2,%ebx
c010c76b:	89 d9                	mov    %ebx,%ecx
c010c76d:	c1 e9 02             	shr    $0x2,%ecx
c010c770:	89 c7                	mov    %eax,%edi
c010c772:	89 d6                	mov    %edx,%esi
c010c774:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c776:	89 f2                	mov    %esi,%edx
c010c778:	89 f8                	mov    %edi,%eax
c010c77a:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c77f:	89 de                	mov    %ebx,%esi
c010c781:	83 e6 02             	and    $0x2,%esi
c010c784:	85 f6                	test   %esi,%esi
c010c786:	74 0b                	je     c010c793 <copy_thread+0x7e>
c010c788:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c78c:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c790:	83 c1 02             	add    $0x2,%ecx
c010c793:	83 e3 01             	and    $0x1,%ebx
c010c796:	85 db                	test   %ebx,%ebx
c010c798:	74 07                	je     c010c7a1 <copy_thread+0x8c>
c010c79a:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c79e:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c7a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7a4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c7a7:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c7ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7b1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c7b4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c7b7:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c7ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7bd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c7c0:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7c3:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c7c6:	8b 52 40             	mov    0x40(%edx),%edx
c010c7c9:	80 ce 02             	or     $0x2,%dh
c010c7cc:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c7cf:	ba 18 c3 10 c0       	mov    $0xc010c318,%edx
c010c7d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7d7:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c7da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7dd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c7e0:	89 c2                	mov    %eax,%edx
c010c7e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7e5:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c7e8:	5b                   	pop    %ebx
c010c7e9:	5e                   	pop    %esi
c010c7ea:	5f                   	pop    %edi
c010c7eb:	5d                   	pop    %ebp
c010c7ec:	c3                   	ret    

c010c7ed <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010c7ed:	55                   	push   %ebp
c010c7ee:	89 e5                	mov    %esp,%ebp
c010c7f0:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c7f3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c7f8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c7fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c801:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c805:	75 24                	jne    c010c82b <copy_files+0x3e>
c010c807:	c7 44 24 0c 98 7e 11 	movl   $0xc0117e98,0xc(%esp)
c010c80e:	c0 
c010c80f:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010c816:	c0 
c010c817:	c7 44 24 04 90 01 00 	movl   $0x190,0x4(%esp)
c010c81e:	00 
c010c81f:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010c826:	e8 9d 46 ff ff       	call   c0100ec8 <__panic>

    if (clone_flags & CLONE_FS) {
c010c82b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c82e:	25 00 08 00 00       	and    $0x800,%eax
c010c833:	85 c0                	test   %eax,%eax
c010c835:	74 08                	je     c010c83f <copy_files+0x52>
        filesp = old_filesp;
c010c837:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c83a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c83d:	eb 40                	jmp    c010c87f <copy_files+0x92>
    }

    int ret = -E_NO_MEM;
c010c83f:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010c846:	e8 25 e7 ff ff       	call   c010af70 <files_create>
c010c84b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c84e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c852:	75 02                	jne    c010c856 <copy_files+0x69>
        goto bad_files_struct;
c010c854:	eb 47                	jmp    c010c89d <copy_files+0xb0>
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010c856:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c859:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c85d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c860:	89 04 24             	mov    %eax,(%esp)
c010c863:	e8 b1 e8 ff ff       	call   c010b119 <dup_files>
c010c868:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c86b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c86f:	74 0e                	je     c010c87f <copy_files+0x92>
        goto bad_dup_cleanup_fs;
c010c871:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010c872:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c875:	89 04 24             	mov    %eax,(%esp)
c010c878:	e8 56 e7 ff ff       	call   c010afd3 <files_destroy>
c010c87d:	eb 1e                	jmp    c010c89d <copy_files+0xb0>
    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010c87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c882:	89 04 24             	mov    %eax,(%esp)
c010c885:	e8 7f f5 ff ff       	call   c010be09 <files_count_inc>
    proc->filesp = filesp;
c010c88a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c88d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c890:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010c896:	b8 00 00 00 00       	mov    $0x0,%eax
c010c89b:	eb 03                	jmp    c010c8a0 <copy_files+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010c89d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c8a0:	c9                   	leave  
c010c8a1:	c3                   	ret    

c010c8a2 <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010c8a2:	55                   	push   %ebp
c010c8a3:	89 e5                	mov    %esp,%ebp
c010c8a5:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010c8a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8ab:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c8b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010c8b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c8b8:	74 1a                	je     c010c8d4 <put_files+0x32>
        if (files_count_dec(filesp) == 0) {
c010c8ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8bd:	89 04 24             	mov    %eax,(%esp)
c010c8c0:	e8 5e f5 ff ff       	call   c010be23 <files_count_dec>
c010c8c5:	85 c0                	test   %eax,%eax
c010c8c7:	75 0b                	jne    c010c8d4 <put_files+0x32>
            files_destroy(filesp);
c010c8c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8cc:	89 04 24             	mov    %eax,(%esp)
c010c8cf:	e8 ff e6 ff ff       	call   c010afd3 <files_destroy>
        }
    }
}
c010c8d4:	c9                   	leave  
c010c8d5:	c3                   	ret    

c010c8d6 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c8d6:	55                   	push   %ebp
c010c8d7:	89 e5                	mov    %esp,%ebp
c010c8d9:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010c8dc:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010c8e3:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c8e8:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010c8ed:	7e 05                	jle    c010c8f4 <do_fork+0x1e>
        goto fork_out;
c010c8ef:	e9 1c 01 00 00       	jmp    c010ca10 <do_fork+0x13a>
    }
    ret = -E_NO_MEM;
c010c8f4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
 	proc = alloc_proc();
c010c8fb:	e8 3d f5 ff ff       	call   c010be3d <alloc_proc>
c010c900:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(proc == NULL){
c010c903:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c907:	75 05                	jne    c010c90e <do_fork+0x38>
    	goto fork_out;
c010c909:	e9 02 01 00 00       	jmp    c010ca10 <do_fork+0x13a>
    }
    proc->parent = current;
c010c90e:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010c914:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c917:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010c91a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c91f:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c925:	85 c0                	test   %eax,%eax
c010c927:	74 24                	je     c010c94d <do_fork+0x77>
c010c929:	c7 44 24 0c c0 7e 11 	movl   $0xc0117ec0,0xc(%esp)
c010c930:	c0 
c010c931:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010c938:	c0 
c010c939:	c7 44 24 04 ea 01 00 	movl   $0x1ea,0x4(%esp)
c010c940:	00 
c010c941:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010c948:	e8 7b 45 ff ff       	call   c0100ec8 <__panic>
    ret = setup_kstack(proc);
c010c94d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c950:	89 04 24             	mov    %eax,(%esp)
c010c953:	e8 72 fb ff ff       	call   c010c4ca <setup_kstack>
c010c958:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(ret != 0){
c010c95b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c95f:	74 05                	je     c010c966 <do_fork+0x90>
    	goto bad_fork_cleanup_proc;
c010c961:	e9 ba 00 00 00       	jmp    c010ca20 <do_fork+0x14a>
    }
    if((ret = copy_mm(clone_flags, proc)) != 0){
c010c966:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c969:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c96d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c970:	89 04 24             	mov    %eax,(%esp)
c010c973:	e8 81 fc ff ff       	call   c010c5f9 <copy_mm>
c010c978:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c97b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c97f:	74 05                	je     c010c986 <do_fork+0xb0>
    	goto bad_fork_cleanup_kstack;
c010c981:	e9 8f 00 00 00       	jmp    c010ca15 <do_fork+0x13f>
    }
    copy_thread(proc, stack, tf);
c010c986:	8b 45 10             	mov    0x10(%ebp),%eax
c010c989:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c98d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c990:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c997:	89 04 24             	mov    %eax,(%esp)
c010c99a:	e8 76 fd ff ff       	call   c010c715 <copy_thread>
    if((ret = copy_files(clone_flags, proc)) != 0){
c010c99f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9a9:	89 04 24             	mov    %eax,(%esp)
c010c9ac:	e8 3c fe ff ff       	call   c010c7ed <copy_files>
c010c9b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c9b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c9b8:	74 0e                	je     c010c9c8 <do_fork+0xf2>
    	goto bad_fork_cleanup_fs;
c010c9ba:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
c010c9bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9be:	89 04 24             	mov    %eax,(%esp)
c010c9c1:	e8 dc fe ff ff       	call   c010c8a2 <put_files>
c010c9c6:	eb 4d                	jmp    c010ca15 <do_fork+0x13f>
    copy_thread(proc, stack, tf);
    if((ret = copy_files(clone_flags, proc)) != 0){
    	goto bad_fork_cleanup_fs;
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010c9c8:	e8 65 f2 ff ff       	call   c010bc32 <__intr_save>
c010c9cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
    	proc->pid = get_pid();
c010c9d0:	e8 d6 f7 ff ff       	call   c010c1ab <get_pid>
c010c9d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c9d8:	89 42 04             	mov    %eax,0x4(%edx)
    	hash_proc(proc);
c010c9db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9de:	89 04 24             	mov    %eax,(%esp)
c010c9e1:	e8 4a f9 ff ff       	call   c010c330 <hash_proc>
    	set_links(proc);
c010c9e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9e9:	89 04 24             	mov    %eax,(%esp)
c010c9ec:	e8 5f f6 ff ff       	call   c010c050 <set_links>
    }
    local_intr_restore(intr_flag);
c010c9f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9f4:	89 04 24             	mov    %eax,(%esp)
c010c9f7:	e8 60 f2 ff ff       	call   c010bc5c <__intr_restore>
    wakeup_proc(proc);
c010c9fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9ff:	89 04 24             	mov    %eax,(%esp)
c010ca02:	e8 ba 1a 00 00       	call   c010e4c1 <wakeup_proc>
    ret = proc->pid;
c010ca07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca0a:	8b 40 04             	mov    0x4(%eax),%eax
c010ca0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
fork_out:
    return ret;
c010ca10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca13:	eb 18                	jmp    c010ca2d <do_fork+0x157>

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010ca15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca18:	89 04 24             	mov    %eax,(%esp)
c010ca1b:	e8 e6 fa ff ff       	call   c010c506 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010ca20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca23:	89 04 24             	mov    %eax,(%esp)
c010ca26:	e8 4a 82 ff ff       	call   c0104c75 <kfree>
    goto fork_out;
c010ca2b:	eb e3                	jmp    c010ca10 <do_fork+0x13a>
}
c010ca2d:	c9                   	leave  
c010ca2e:	c3                   	ret    

c010ca2f <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010ca2f:	55                   	push   %ebp
c010ca30:	89 e5                	mov    %esp,%ebp
c010ca32:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010ca35:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010ca3b:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ca40:	39 c2                	cmp    %eax,%edx
c010ca42:	75 1c                	jne    c010ca60 <do_exit+0x31>
        panic("idleproc exit.\n");
c010ca44:	c7 44 24 08 d9 7e 11 	movl   $0xc0117ed9,0x8(%esp)
c010ca4b:	c0 
c010ca4c:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
c010ca53:	00 
c010ca54:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010ca5b:	e8 68 44 ff ff       	call   c0100ec8 <__panic>
    }
    if (current == initproc) {
c010ca60:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010ca66:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010ca6b:	39 c2                	cmp    %eax,%edx
c010ca6d:	75 1c                	jne    c010ca8b <do_exit+0x5c>
        panic("initproc exit.\n");
c010ca6f:	c7 44 24 08 e9 7e 11 	movl   $0xc0117ee9,0x8(%esp)
c010ca76:	c0 
c010ca77:	c7 44 24 04 17 02 00 	movl   $0x217,0x4(%esp)
c010ca7e:	00 
c010ca7f:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010ca86:	e8 3d 44 ff ff       	call   c0100ec8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010ca8b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ca90:	8b 40 18             	mov    0x18(%eax),%eax
c010ca93:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010ca96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca9a:	74 4a                	je     c010cae6 <do_exit+0xb7>
        lcr3(boot_cr3);
c010ca9c:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010caa1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010caa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010caa7:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010caaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010caad:	89 04 24             	mov    %eax,(%esp)
c010cab0:	e8 e1 f2 ff ff       	call   c010bd96 <mm_count_dec>
c010cab5:	85 c0                	test   %eax,%eax
c010cab7:	75 21                	jne    c010cada <do_exit+0xab>
            exit_mmap(mm);
c010cab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cabc:	89 04 24             	mov    %eax,(%esp)
c010cabf:	e8 c3 b9 ff ff       	call   c0108487 <exit_mmap>
            put_pgdir(mm);
c010cac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cac7:	89 04 24             	mov    %eax,(%esp)
c010caca:	e8 04 fb ff ff       	call   c010c5d3 <put_pgdir>
            mm_destroy(mm);
c010cacf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cad2:	89 04 24             	mov    %eax,(%esp)
c010cad5:	e8 ee b6 ff ff       	call   c01081c8 <mm_destroy>
        }
        current->mm = NULL;
c010cada:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cadf:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010cae6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010caeb:	89 04 24             	mov    %eax,(%esp)
c010caee:	e8 af fd ff ff       	call   c010c8a2 <put_files>
    current->state = PROC_ZOMBIE;
c010caf3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010caf8:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cafe:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb03:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb06:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cb0c:	e8 21 f1 ff ff       	call   c010bc32 <__intr_save>
c010cb11:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010cb14:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb19:	8b 40 14             	mov    0x14(%eax),%eax
c010cb1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cb1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb22:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cb28:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cb2d:	75 10                	jne    c010cb3f <do_exit+0x110>
            wakeup_proc(proc);
c010cb2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb32:	89 04 24             	mov    %eax,(%esp)
c010cb35:	e8 87 19 00 00       	call   c010e4c1 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010cb3a:	e9 f0 00 00 00       	jmp    c010cc2f <do_exit+0x200>
c010cb3f:	e9 eb 00 00 00       	jmp    c010cc2f <do_exit+0x200>
            proc = current->cptr;
c010cb44:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb49:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cb4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010cb52:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb57:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cb5a:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010cb60:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            assert(proc->yptr == NULL);
c010cb66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb69:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010cb6f:	85 c0                	test   %eax,%eax
c010cb71:	74 24                	je     c010cb97 <do_exit+0x168>
c010cb73:	c7 44 24 0c f9 7e 11 	movl   $0xc0117ef9,0xc(%esp)
c010cb7a:	c0 
c010cb7b:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010cb82:	c0 
c010cb83:	c7 44 24 04 33 02 00 	movl   $0x233,0x4(%esp)
c010cb8a:	00 
c010cb8b:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010cb92:	e8 31 43 ff ff       	call   c0100ec8 <__panic>
            if(proc->optr != NULL)
c010cb97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb9a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cba0:	85 c0                	test   %eax,%eax
c010cba2:	74 13                	je     c010cbb7 <do_exit+0x188>
            	proc->optr->yptr = NULL;
c010cba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cba7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cbad:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cbb4:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cbb7:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cbbc:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010cbc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbc5:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010cbcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbce:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cbd4:	85 c0                	test   %eax,%eax
c010cbd6:	74 14                	je     c010cbec <do_exit+0x1bd>
                initproc->cptr->yptr = proc;
c010cbd8:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cbdd:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cbe3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cbe6:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010cbec:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010cbf2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbf5:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010cbf8:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cbfd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc00:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010cc06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc09:	8b 00                	mov    (%eax),%eax
c010cc0b:	83 f8 03             	cmp    $0x3,%eax
c010cc0e:	75 1f                	jne    c010cc2f <do_exit+0x200>
                if (initproc->wait_state == WT_CHILD) {
c010cc10:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc15:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cc1b:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cc20:	75 0d                	jne    c010cc2f <do_exit+0x200>
                    wakeup_proc(initproc);
c010cc22:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc27:	89 04 24             	mov    %eax,(%esp)
c010cc2a:	e8 92 18 00 00       	call   c010e4c1 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010cc2f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc34:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cc3a:	85 c0                	test   %eax,%eax
c010cc3c:	0f 85 02 ff ff ff    	jne    c010cb44 <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010cc42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc45:	89 04 24             	mov    %eax,(%esp)
c010cc48:	e8 0f f0 ff ff       	call   c010bc5c <__intr_restore>
    
    schedule();
c010cc4d:	e8 0b 19 00 00       	call   c010e55d <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010cc52:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc57:	8b 40 04             	mov    0x4(%eax),%eax
c010cc5a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc5e:	c7 44 24 08 0c 7f 11 	movl   $0xc0117f0c,0x8(%esp)
c010cc65:	c0 
c010cc66:	c7 44 24 04 45 02 00 	movl   $0x245,0x4(%esp)
c010cc6d:	00 
c010cc6e:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010cc75:	e8 4e 42 ff ff       	call   c0100ec8 <__panic>

c010cc7a <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cc7a:	55                   	push   %ebp
c010cc7b:	89 e5                	mov    %esp,%ebp
c010cc7d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010cc80:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cc87:	00 
c010cc88:	8b 45 14             	mov    0x14(%ebp),%eax
c010cc8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc92:	89 04 24             	mov    %eax,(%esp)
c010cc95:	e8 61 eb ff ff       	call   c010b7fb <sysfile_seek>
c010cc9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cc9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cca1:	74 05                	je     c010cca8 <load_icode_read+0x2e>
        return ret;
c010cca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cca6:	eb 38                	jmp    c010cce0 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010cca8:	8b 45 10             	mov    0x10(%ebp),%eax
c010ccab:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ccaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccb9:	89 04 24             	mov    %eax,(%esp)
c010ccbc:	e8 48 e8 ff ff       	call   c010b509 <sysfile_read>
c010ccc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ccc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccc7:	3b 45 10             	cmp    0x10(%ebp),%eax
c010ccca:	74 0f                	je     c010ccdb <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010cccc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010ccd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ccd5:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010ccd9:	eb 05                	jmp    c010cce0 <load_icode_read+0x66>
    }
    return 0;
c010ccdb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cce0:	c9                   	leave  
c010cce1:	c3                   	ret    

c010cce2 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010cce2:	55                   	push   %ebp
c010cce3:	89 e5                	mov    %esp,%ebp
c010cce5:	53                   	push   %ebx
c010cce6:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
	assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010ccec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ccf0:	78 06                	js     c010ccf8 <load_icode+0x16>
c010ccf2:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010ccf6:	7e 24                	jle    c010cd1c <load_icode+0x3a>
c010ccf8:	c7 44 24 0c 2c 7f 11 	movl   $0xc0117f2c,0xc(%esp)
c010ccff:	c0 
c010cd00:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010cd07:	c0 
c010cd08:	c7 44 24 04 71 02 00 	movl   $0x271,0x4(%esp)
c010cd0f:	00 
c010cd10:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010cd17:	e8 ac 41 ff ff       	call   c0100ec8 <__panic>

	if (current->mm != NULL) {
c010cd1c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cd21:	8b 40 18             	mov    0x18(%eax),%eax
c010cd24:	85 c0                	test   %eax,%eax
c010cd26:	74 1c                	je     c010cd44 <load_icode+0x62>
		panic("load_icode: current->mm must be empty.\n");
c010cd28:	c7 44 24 08 54 7f 11 	movl   $0xc0117f54,0x8(%esp)
c010cd2f:	c0 
c010cd30:	c7 44 24 04 74 02 00 	movl   $0x274,0x4(%esp)
c010cd37:	00 
c010cd38:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010cd3f:	e8 84 41 ff ff       	call   c0100ec8 <__panic>
	}

	int ret = -E_NO_MEM;
c010cd44:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
	struct mm_struct *mm;
	if ((mm = mm_create()) == NULL) {
c010cd4b:	e8 13 b1 ff ff       	call   c0107e63 <mm_create>
c010cd50:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010cd53:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010cd57:	75 06                	jne    c010cd5f <load_icode+0x7d>
		goto bad_mm;
c010cd59:	90                   	nop
bad_elf_cleanup_pgdir:
	put_pgdir(mm);
bad_pgdir_cleanup_mm:
	mm_destroy(mm);
bad_mm:
	goto out;
c010cd5a:	e9 85 07 00 00       	jmp    c010d4e4 <load_icode+0x802>
	int ret = -E_NO_MEM;
	struct mm_struct *mm;
	if ((mm = mm_create()) == NULL) {
		goto bad_mm;
	}
	if (setup_pgdir(mm) != 0) {
c010cd5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cd62:	89 04 24             	mov    %eax,(%esp)
c010cd65:	e8 c2 f7 ff ff       	call   c010c52c <setup_pgdir>
c010cd6a:	85 c0                	test   %eax,%eax
c010cd6c:	74 05                	je     c010cd73 <load_icode+0x91>
		goto bad_pgdir_cleanup_mm;
c010cd6e:	e9 8c 07 00 00       	jmp    c010d4ff <load_icode+0x81d>
	}

	struct Page *page;

	struct elfhdr __elf, *elf = &__elf;
c010cd73:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010cd79:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010cd7c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cd83:	00 
c010cd84:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010cd8b:	00 
c010cd8c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cd8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd93:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd96:	89 04 24             	mov    %eax,(%esp)
c010cd99:	e8 dc fe ff ff       	call   c010cc7a <load_icode_read>
c010cd9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cda1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cda5:	74 05                	je     c010cdac <load_icode+0xca>
		goto bad_elf_cleanup_pgdir;
c010cda7:	e9 48 07 00 00       	jmp    c010d4f4 <load_icode+0x812>
	}

	if (elf->e_magic != ELF_MAGIC) {
c010cdac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cdaf:	8b 00                	mov    (%eax),%eax
c010cdb1:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010cdb6:	74 0c                	je     c010cdc4 <load_icode+0xe2>
		ret = -E_INVAL_ELF;
c010cdb8:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
		goto bad_elf_cleanup_pgdir;
c010cdbf:	e9 30 07 00 00       	jmp    c010d4f4 <load_icode+0x812>
	}

	struct proghdr __ph, *ph = &__ph;
c010cdc4:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010cdca:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32_t vm_flags, perm, phnum;
	for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010cdcd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010cdd4:	e9 76 03 00 00       	jmp    c010d14f <load_icode+0x46d>
		off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010cdd9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cddc:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cddf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cde2:	c1 e2 05             	shl    $0x5,%edx
c010cde5:	01 d0                	add    %edx,%eax
c010cde7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010cdea:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cded:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cdf1:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010cdf8:	00 
c010cdf9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cdfc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce03:	89 04 24             	mov    %eax,(%esp)
c010ce06:	e8 6f fe ff ff       	call   c010cc7a <load_icode_read>
c010ce0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce12:	74 05                	je     c010ce19 <load_icode+0x137>
			goto bad_cleanup_mmap;
c010ce14:	e9 d0 06 00 00       	jmp    c010d4e9 <load_icode+0x807>
		}
		if (ph->p_type != ELF_PT_LOAD) {
c010ce19:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce1c:	8b 00                	mov    (%eax),%eax
c010ce1e:	83 f8 01             	cmp    $0x1,%eax
c010ce21:	74 05                	je     c010ce28 <load_icode+0x146>
			continue ;
c010ce23:	e9 23 03 00 00       	jmp    c010d14b <load_icode+0x469>
		}
		if (ph->p_filesz > ph->p_memsz) {
c010ce28:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce2b:	8b 50 10             	mov    0x10(%eax),%edx
c010ce2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce31:	8b 40 14             	mov    0x14(%eax),%eax
c010ce34:	39 c2                	cmp    %eax,%edx
c010ce36:	76 0c                	jbe    c010ce44 <load_icode+0x162>
			ret = -E_INVAL_ELF;
c010ce38:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
			goto bad_cleanup_mmap;
c010ce3f:	e9 a5 06 00 00       	jmp    c010d4e9 <load_icode+0x807>
		}
		if (ph->p_filesz == 0) {
c010ce44:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce47:	8b 40 10             	mov    0x10(%eax),%eax
c010ce4a:	85 c0                	test   %eax,%eax
c010ce4c:	75 05                	jne    c010ce53 <load_icode+0x171>
			continue ;
c010ce4e:	e9 f8 02 00 00       	jmp    c010d14b <load_icode+0x469>
		}
		vm_flags = 0, perm = PTE_U;
c010ce53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010ce5a:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
		if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010ce61:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce64:	8b 40 18             	mov    0x18(%eax),%eax
c010ce67:	83 e0 01             	and    $0x1,%eax
c010ce6a:	85 c0                	test   %eax,%eax
c010ce6c:	74 04                	je     c010ce72 <load_icode+0x190>
c010ce6e:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
		if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010ce72:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce75:	8b 40 18             	mov    0x18(%eax),%eax
c010ce78:	83 e0 02             	and    $0x2,%eax
c010ce7b:	85 c0                	test   %eax,%eax
c010ce7d:	74 04                	je     c010ce83 <load_icode+0x1a1>
c010ce7f:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
		if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010ce83:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce86:	8b 40 18             	mov    0x18(%eax),%eax
c010ce89:	83 e0 04             	and    $0x4,%eax
c010ce8c:	85 c0                	test   %eax,%eax
c010ce8e:	74 04                	je     c010ce94 <load_icode+0x1b2>
c010ce90:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
		if (vm_flags & VM_WRITE) perm |= PTE_W;
c010ce94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce97:	83 e0 02             	and    $0x2,%eax
c010ce9a:	85 c0                	test   %eax,%eax
c010ce9c:	74 04                	je     c010cea2 <load_icode+0x1c0>
c010ce9e:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
		if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010cea2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cea5:	8b 50 14             	mov    0x14(%eax),%edx
c010cea8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ceab:	8b 40 08             	mov    0x8(%eax),%eax
c010ceae:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010ceb5:	00 
c010ceb6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ceb9:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010cebd:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cec1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cec5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cec8:	89 04 24             	mov    %eax,(%esp)
c010cecb:	e8 9a b3 ff ff       	call   c010826a <mm_map>
c010ced0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ced3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ced7:	74 05                	je     c010cede <load_icode+0x1fc>
			goto bad_cleanup_mmap;
c010ced9:	e9 0b 06 00 00       	jmp    c010d4e9 <load_icode+0x807>
		}
		off_t offset = ph->p_offset;
c010cede:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cee1:	8b 40 04             	mov    0x4(%eax),%eax
c010cee4:	89 45 e0             	mov    %eax,-0x20(%ebp)
		size_t off, size;
		uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010cee7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ceea:	8b 40 08             	mov    0x8(%eax),%eax
c010ceed:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cef0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cef3:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010cef6:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cef9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cefe:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		ret = -E_NO_MEM;
c010cf01:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

		end = ph->p_va + ph->p_filesz;
c010cf08:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf0b:	8b 50 08             	mov    0x8(%eax),%edx
c010cf0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf11:	8b 40 10             	mov    0x10(%eax),%eax
c010cf14:	01 d0                	add    %edx,%eax
c010cf16:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		while (start < end) {
c010cf19:	e9 b1 00 00 00       	jmp    c010cfcf <load_icode+0x2ed>
			if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010cf1e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cf21:	8b 40 0c             	mov    0xc(%eax),%eax
c010cf24:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cf27:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cf2b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cf2e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cf32:	89 04 24             	mov    %eax,(%esp)
c010cf35:	e8 8c 90 ff ff       	call   c0105fc6 <pgdir_alloc_page>
c010cf3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cf41:	75 0c                	jne    c010cf4f <load_icode+0x26d>
				ret = -E_NO_MEM;
c010cf43:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
				goto bad_cleanup_mmap;
c010cf4a:	e9 9a 05 00 00       	jmp    c010d4e9 <load_icode+0x807>
			}
			off = start - la, size = PGSIZE - off, la += PGSIZE;
c010cf4f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cf52:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cf55:	29 c2                	sub    %eax,%edx
c010cf57:	89 d0                	mov    %edx,%eax
c010cf59:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010cf5c:	b8 00 10 00 00       	mov    $0x1000,%eax
c010cf61:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010cf64:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010cf67:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
			if (end < la) {
c010cf6e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010cf71:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cf74:	73 0d                	jae    c010cf83 <load_icode+0x2a1>
				size -= la - end;
c010cf76:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cf79:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010cf7c:	29 c2                	sub    %eax,%edx
c010cf7e:	89 d0                	mov    %edx,%eax
c010cf80:	01 45 dc             	add    %eax,-0x24(%ebp)
			}
			if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010cf83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf86:	89 04 24             	mov    %eax,(%esp)
c010cf89:	e8 50 ed ff ff       	call   c010bcde <page2kva>
c010cf8e:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010cf91:	01 c2                	add    %eax,%edx
c010cf93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf96:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cf9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cf9d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cfa1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cfa5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfa8:	89 04 24             	mov    %eax,(%esp)
c010cfab:	e8 ca fc ff ff       	call   c010cc7a <load_icode_read>
c010cfb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cfb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cfb7:	74 05                	je     c010cfbe <load_icode+0x2dc>
				goto bad_cleanup_mmap;
c010cfb9:	e9 2b 05 00 00       	jmp    c010d4e9 <load_icode+0x807>
			}
			start += size, offset += size;
c010cfbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cfc1:	01 45 d8             	add    %eax,-0x28(%ebp)
c010cfc4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010cfc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cfca:	01 d0                	add    %edx,%eax
c010cfcc:	89 45 e0             	mov    %eax,-0x20(%ebp)
		uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

		ret = -E_NO_MEM;

		end = ph->p_va + ph->p_filesz;
		while (start < end) {
c010cfcf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfd2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010cfd5:	0f 82 43 ff ff ff    	jb     c010cf1e <load_icode+0x23c>
			if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
				goto bad_cleanup_mmap;
			}
			start += size, offset += size;
		}
		end = ph->p_va + ph->p_memsz;
c010cfdb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfde:	8b 50 08             	mov    0x8(%eax),%edx
c010cfe1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfe4:	8b 40 14             	mov    0x14(%eax),%eax
c010cfe7:	01 d0                	add    %edx,%eax
c010cfe9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		if (start < la) {
c010cfec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfef:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cff2:	0f 83 b0 00 00 00    	jae    c010d0a8 <load_icode+0x3c6>
			/* ph->p_memsz == ph->p_filesz */
			if (start == end) {
c010cff8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cffb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010cffe:	75 05                	jne    c010d005 <load_icode+0x323>
				continue ;
c010d000:	e9 46 01 00 00       	jmp    c010d14b <load_icode+0x469>
			}
			off = start + PGSIZE - la, size = PGSIZE - off;
c010d005:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d008:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d00b:	29 c2                	sub    %eax,%edx
c010d00d:	89 d0                	mov    %edx,%eax
c010d00f:	05 00 10 00 00       	add    $0x1000,%eax
c010d014:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d017:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d01c:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d01f:	89 45 dc             	mov    %eax,-0x24(%ebp)
			if (end < la) {
c010d022:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d025:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d028:	73 0d                	jae    c010d037 <load_icode+0x355>
				size -= la - end;
c010d02a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d02d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d030:	29 c2                	sub    %eax,%edx
c010d032:	89 d0                	mov    %edx,%eax
c010d034:	01 45 dc             	add    %eax,-0x24(%ebp)
			}
			memset(page2kva(page) + off, 0, size);
c010d037:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d03a:	89 04 24             	mov    %eax,(%esp)
c010d03d:	e8 9c ec ff ff       	call   c010bcde <page2kva>
c010d042:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d045:	01 c2                	add    %eax,%edx
c010d047:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d04a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d04e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d055:	00 
c010d056:	89 14 24             	mov    %edx,(%esp)
c010d059:	e8 d4 83 00 00       	call   c0115432 <memset>
			start += size;
c010d05e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d061:	01 45 d8             	add    %eax,-0x28(%ebp)
			assert((end < la && start == end) || (end >= la && start == la));
c010d064:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d067:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d06a:	73 08                	jae    c010d074 <load_icode+0x392>
c010d06c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d06f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d072:	74 34                	je     c010d0a8 <load_icode+0x3c6>
c010d074:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d077:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d07a:	72 08                	jb     c010d084 <load_icode+0x3a2>
c010d07c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d07f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d082:	74 24                	je     c010d0a8 <load_icode+0x3c6>
c010d084:	c7 44 24 0c 7c 7f 11 	movl   $0xc0117f7c,0xc(%esp)
c010d08b:	c0 
c010d08c:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010d093:	c0 
c010d094:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c010d09b:	00 
c010d09c:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d0a3:	e8 20 3e ff ff       	call   c0100ec8 <__panic>
		}
		while (start < end) {
c010d0a8:	e9 92 00 00 00       	jmp    c010d13f <load_icode+0x45d>
			if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d0ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d0b0:	8b 40 0c             	mov    0xc(%eax),%eax
c010d0b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d0b6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d0ba:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d0bd:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d0c1:	89 04 24             	mov    %eax,(%esp)
c010d0c4:	e8 fd 8e ff ff       	call   c0105fc6 <pgdir_alloc_page>
c010d0c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d0cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d0d0:	75 0c                	jne    c010d0de <load_icode+0x3fc>
				ret = -E_NO_MEM;
c010d0d2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
				goto bad_cleanup_mmap;
c010d0d9:	e9 0b 04 00 00       	jmp    c010d4e9 <load_icode+0x807>
			}
			off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d0de:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0e1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d0e4:	29 c2                	sub    %eax,%edx
c010d0e6:	89 d0                	mov    %edx,%eax
c010d0e8:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d0eb:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d0f0:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d0f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d0f6:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
			if (end < la) {
c010d0fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d100:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d103:	73 0d                	jae    c010d112 <load_icode+0x430>
				size -= la - end;
c010d105:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d108:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d10b:	29 c2                	sub    %eax,%edx
c010d10d:	89 d0                	mov    %edx,%eax
c010d10f:	01 45 dc             	add    %eax,-0x24(%ebp)
			}
			memset(page2kva(page) + off, 0, size);
c010d112:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d115:	89 04 24             	mov    %eax,(%esp)
c010d118:	e8 c1 eb ff ff       	call   c010bcde <page2kva>
c010d11d:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d120:	01 c2                	add    %eax,%edx
c010d122:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d125:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d129:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d130:	00 
c010d131:	89 14 24             	mov    %edx,(%esp)
c010d134:	e8 f9 82 00 00       	call   c0115432 <memset>
			start += size;
c010d139:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d13c:	01 45 d8             	add    %eax,-0x28(%ebp)
			}
			memset(page2kva(page) + off, 0, size);
			start += size;
			assert((end < la && start == end) || (end >= la && start == la));
		}
		while (start < end) {
c010d13f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d142:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d145:	0f 82 62 ff ff ff    	jb     c010d0ad <load_icode+0x3cb>
		goto bad_elf_cleanup_pgdir;
	}

	struct proghdr __ph, *ph = &__ph;
	uint32_t vm_flags, perm, phnum;
	for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010d14b:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d14f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d152:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d156:	0f b7 c0             	movzwl %ax,%eax
c010d159:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d15c:	0f 87 77 fc ff ff    	ja     c010cdd9 <load_icode+0xf7>
			}
			memset(page2kva(page) + off, 0, size);
			start += size;
		}
	}
	sysfile_close(fd);
c010d162:	8b 45 08             	mov    0x8(%ebp),%eax
c010d165:	89 04 24             	mov    %eax,(%esp)
c010d168:	e8 89 e3 ff ff       	call   c010b4f6 <sysfile_close>

	vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d16d:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
	if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d174:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d17b:	00 
c010d17c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d17f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d183:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d18a:	00 
c010d18b:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d192:	af 
c010d193:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d196:	89 04 24             	mov    %eax,(%esp)
c010d199:	e8 cc b0 ff ff       	call   c010826a <mm_map>
c010d19e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d1a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d1a5:	74 05                	je     c010d1ac <load_icode+0x4ca>
		goto bad_cleanup_mmap;
c010d1a7:	e9 3d 03 00 00       	jmp    c010d4e9 <load_icode+0x807>
	}
	assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d1ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d1af:	8b 40 0c             	mov    0xc(%eax),%eax
c010d1b2:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d1b9:	00 
c010d1ba:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d1c1:	af 
c010d1c2:	89 04 24             	mov    %eax,(%esp)
c010d1c5:	e8 fc 8d ff ff       	call   c0105fc6 <pgdir_alloc_page>
c010d1ca:	85 c0                	test   %eax,%eax
c010d1cc:	75 24                	jne    c010d1f2 <load_icode+0x510>
c010d1ce:	c7 44 24 0c b8 7f 11 	movl   $0xc0117fb8,0xc(%esp)
c010d1d5:	c0 
c010d1d6:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010d1dd:	c0 
c010d1de:	c7 44 24 04 dc 02 00 	movl   $0x2dc,0x4(%esp)
c010d1e5:	00 
c010d1e6:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d1ed:	e8 d6 3c ff ff       	call   c0100ec8 <__panic>
	assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d1f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d1f5:	8b 40 0c             	mov    0xc(%eax),%eax
c010d1f8:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d1ff:	00 
c010d200:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d207:	af 
c010d208:	89 04 24             	mov    %eax,(%esp)
c010d20b:	e8 b6 8d ff ff       	call   c0105fc6 <pgdir_alloc_page>
c010d210:	85 c0                	test   %eax,%eax
c010d212:	75 24                	jne    c010d238 <load_icode+0x556>
c010d214:	c7 44 24 0c fc 7f 11 	movl   $0xc0117ffc,0xc(%esp)
c010d21b:	c0 
c010d21c:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010d223:	c0 
c010d224:	c7 44 24 04 dd 02 00 	movl   $0x2dd,0x4(%esp)
c010d22b:	00 
c010d22c:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d233:	e8 90 3c ff ff       	call   c0100ec8 <__panic>
	assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d238:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d23b:	8b 40 0c             	mov    0xc(%eax),%eax
c010d23e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d245:	00 
c010d246:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d24d:	af 
c010d24e:	89 04 24             	mov    %eax,(%esp)
c010d251:	e8 70 8d ff ff       	call   c0105fc6 <pgdir_alloc_page>
c010d256:	85 c0                	test   %eax,%eax
c010d258:	75 24                	jne    c010d27e <load_icode+0x59c>
c010d25a:	c7 44 24 0c 40 80 11 	movl   $0xc0118040,0xc(%esp)
c010d261:	c0 
c010d262:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010d269:	c0 
c010d26a:	c7 44 24 04 de 02 00 	movl   $0x2de,0x4(%esp)
c010d271:	00 
c010d272:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d279:	e8 4a 3c ff ff       	call   c0100ec8 <__panic>
	assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d27e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d281:	8b 40 0c             	mov    0xc(%eax),%eax
c010d284:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d28b:	00 
c010d28c:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d293:	af 
c010d294:	89 04 24             	mov    %eax,(%esp)
c010d297:	e8 2a 8d ff ff       	call   c0105fc6 <pgdir_alloc_page>
c010d29c:	85 c0                	test   %eax,%eax
c010d29e:	75 24                	jne    c010d2c4 <load_icode+0x5e2>
c010d2a0:	c7 44 24 0c 84 80 11 	movl   $0xc0118084,0xc(%esp)
c010d2a7:	c0 
c010d2a8:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010d2af:	c0 
c010d2b0:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
c010d2b7:	00 
c010d2b8:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d2bf:	e8 04 3c ff ff       	call   c0100ec8 <__panic>

	mm_count_inc(mm);
c010d2c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d2c7:	89 04 24             	mov    %eax,(%esp)
c010d2ca:	e8 ad ea ff ff       	call   c010bd7c <mm_count_inc>
	current->mm = mm;
c010d2cf:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d2d4:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d2d7:	89 50 18             	mov    %edx,0x18(%eax)
	current->cr3 = PADDR(mm->pgdir);
c010d2da:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d2df:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d2e2:	8b 52 0c             	mov    0xc(%edx),%edx
c010d2e5:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d2e8:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d2ef:	77 23                	ja     c010d314 <load_icode+0x632>
c010d2f1:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d2f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d2f8:	c7 44 24 08 60 7e 11 	movl   $0xc0117e60,0x8(%esp)
c010d2ff:	c0 
c010d300:	c7 44 24 04 e3 02 00 	movl   $0x2e3,0x4(%esp)
c010d307:	00 
c010d308:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d30f:	e8 b4 3b ff ff       	call   c0100ec8 <__panic>
c010d314:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d317:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d31d:	89 50 40             	mov    %edx,0x40(%eax)
	lcr3(PADDR(mm->pgdir));
c010d320:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d323:	8b 40 0c             	mov    0xc(%eax),%eax
c010d326:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d329:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d330:	77 23                	ja     c010d355 <load_icode+0x673>
c010d332:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d339:	c7 44 24 08 60 7e 11 	movl   $0xc0117e60,0x8(%esp)
c010d340:	c0 
c010d341:	c7 44 24 04 e4 02 00 	movl   $0x2e4,0x4(%esp)
c010d348:	00 
c010d349:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d350:	e8 73 3b ff ff       	call   c0100ec8 <__panic>
c010d355:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d358:	05 00 00 00 40       	add    $0x40000000,%eax
c010d35d:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d360:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d363:	0f 22 d8             	mov    %eax,%cr3

	//setup argc, argv
	uint32_t argv_size=0, i;
c010d366:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	for (i = 0; i < argc; i ++) {
c010d36d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d374:	eb 30                	jmp    c010d3a6 <load_icode+0x6c4>
		argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d376:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d379:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d380:	8b 45 10             	mov    0x10(%ebp),%eax
c010d383:	01 d0                	add    %edx,%eax
c010d385:	8b 00                	mov    (%eax),%eax
c010d387:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d38e:	00 
c010d38f:	89 04 24             	mov    %eax,(%esp)
c010d392:	e8 6d 7d 00 00       	call   c0115104 <strnlen>
c010d397:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d39a:	01 d0                	add    %edx,%eax
c010d39c:	83 c0 01             	add    $0x1,%eax
c010d39f:	89 45 d0             	mov    %eax,-0x30(%ebp)
	current->cr3 = PADDR(mm->pgdir);
	lcr3(PADDR(mm->pgdir));

	//setup argc, argv
	uint32_t argv_size=0, i;
	for (i = 0; i < argc; i ++) {
c010d3a2:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d3a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3a9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d3ac:	77 c8                	ja     c010d376 <load_icode+0x694>
		argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
	}

	uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c010d3ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d3b1:	c1 e8 02             	shr    $0x2,%eax
c010d3b4:	89 c2                	mov    %eax,%edx
c010d3b6:	b8 00 00 00 00       	mov    $0x0,%eax
c010d3bb:	29 d0                	sub    %edx,%eax
c010d3bd:	c1 e0 02             	shl    $0x2,%eax
c010d3c0:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010d3c5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c010d3c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d3d2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d3d5:	29 d0                	sub    %edx,%eax
c010d3d7:	89 45 a0             	mov    %eax,-0x60(%ebp)

	argv_size = 0;
c010d3da:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	for (i = 0; i < argc; i ++) {
c010d3e1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d3e8:	eb 67                	jmp    c010d451 <load_icode+0x76f>
		uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c010d3ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d3ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d3f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d3f7:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010d3fa:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d3fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d404:	8b 45 10             	mov    0x10(%ebp),%eax
c010d407:	01 d0                	add    %edx,%eax
c010d409:	8b 10                	mov    (%eax),%edx
c010d40b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d40e:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d411:	01 c8                	add    %ecx,%eax
c010d413:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d417:	89 04 24             	mov    %eax,(%esp)
c010d41a:	e8 3c 7d 00 00       	call   c011515b <strcpy>
c010d41f:	89 03                	mov    %eax,(%ebx)
		argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d421:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d424:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d42b:	8b 45 10             	mov    0x10(%ebp),%eax
c010d42e:	01 d0                	add    %edx,%eax
c010d430:	8b 00                	mov    (%eax),%eax
c010d432:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d439:	00 
c010d43a:	89 04 24             	mov    %eax,(%esp)
c010d43d:	e8 c2 7c 00 00       	call   c0115104 <strnlen>
c010d442:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d445:	01 d0                	add    %edx,%eax
c010d447:	83 c0 01             	add    $0x1,%eax
c010d44a:	89 45 d0             	mov    %eax,-0x30(%ebp)

	uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
	char** uargv=(char **)(stacktop  - argc * sizeof(char *));

	argv_size = 0;
	for (i = 0; i < argc; i ++) {
c010d44d:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d451:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d454:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d457:	77 91                	ja     c010d3ea <load_icode+0x708>
		uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
		argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
	}

	stacktop = (uintptr_t)uargv - sizeof(int);
c010d459:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d45c:	83 e8 04             	sub    $0x4,%eax
c010d45f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	*(int *)stacktop = argc;
c010d462:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d465:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d468:	89 10                	mov    %edx,(%eax)

	struct trapframe *tf = current->tf;
c010d46a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d46f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d472:	89 45 9c             	mov    %eax,-0x64(%ebp)
	memset(tf, 0, sizeof(struct trapframe));
c010d475:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d47c:	00 
c010d47d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d484:	00 
c010d485:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d488:	89 04 24             	mov    %eax,(%esp)
c010d48b:	e8 a2 7f 00 00       	call   c0115432 <memset>
	tf->tf_cs = USER_CS;
c010d490:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d493:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
	tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d499:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d49c:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d4a2:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4a5:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d4a9:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4ac:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d4b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4b3:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d4b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4ba:	66 89 50 2c          	mov    %dx,0x2c(%eax)
	tf->tf_esp = stacktop;
c010d4be:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4c1:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d4c4:	89 50 44             	mov    %edx,0x44(%eax)
	tf->tf_eip = elf->e_entry;
c010d4c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d4ca:	8b 50 18             	mov    0x18(%eax),%edx
c010d4cd:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4d0:	89 50 38             	mov    %edx,0x38(%eax)
	tf->tf_eflags = FL_IF;
c010d4d3:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4d6:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
	ret = 0;
c010d4dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
	return ret;
c010d4e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4e7:	eb 23                	jmp    c010d50c <load_icode+0x82a>
bad_cleanup_mmap:
	exit_mmap(mm);
c010d4e9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d4ec:	89 04 24             	mov    %eax,(%esp)
c010d4ef:	e8 93 af ff ff       	call   c0108487 <exit_mmap>
bad_elf_cleanup_pgdir:
	put_pgdir(mm);
c010d4f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d4f7:	89 04 24             	mov    %eax,(%esp)
c010d4fa:	e8 d4 f0 ff ff       	call   c010c5d3 <put_pgdir>
bad_pgdir_cleanup_mm:
	mm_destroy(mm);
c010d4ff:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d502:	89 04 24             	mov    %eax,(%esp)
c010d505:	e8 be ac ff ff       	call   c01081c8 <mm_destroy>
bad_mm:
	goto out;
c010d50a:	eb d8                	jmp    c010d4e4 <load_icode+0x802>
}
c010d50c:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d512:	5b                   	pop    %ebx
c010d513:	5d                   	pop    %ebp
c010d514:	c3                   	ret    

c010d515 <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d515:	55                   	push   %ebp
c010d516:	89 e5                	mov    %esp,%ebp
c010d518:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d51b:	eb 1d                	jmp    c010d53a <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d51d:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d521:	8b 45 08             	mov    0x8(%ebp),%eax
c010d524:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d52b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d52e:	01 d0                	add    %edx,%eax
c010d530:	8b 00                	mov    (%eax),%eax
c010d532:	89 04 24             	mov    %eax,(%esp)
c010d535:	e8 3b 77 ff ff       	call   c0104c75 <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d53a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d53e:	7f dd                	jg     c010d51d <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d540:	c9                   	leave  
c010d541:	c3                   	ret    

c010d542 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d542:	55                   	push   %ebp
c010d543:	89 e5                	mov    %esp,%ebp
c010d545:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d548:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d54f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d552:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d559:	8b 45 14             	mov    0x14(%ebp),%eax
c010d55c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d563:	00 
c010d564:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d568:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d56c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d56f:	89 04 24             	mov    %eax,(%esp)
c010d572:	e8 b5 b9 ff ff       	call   c0108f2c <user_mem_check>
c010d577:	85 c0                	test   %eax,%eax
c010d579:	75 08                	jne    c010d583 <copy_kargv+0x41>
        return ret;
c010d57b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d57e:	e9 a4 00 00 00       	jmp    c010d627 <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d583:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d58a:	eb 77                	jmp    c010d603 <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d58c:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d593:	e8 c2 76 ff ff       	call   c0104c5a <kmalloc>
c010d598:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d59b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d59f:	75 0a                	jne    c010d5ab <copy_kargv+0x69>
            goto failed_nomem;
c010d5a1:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d5a2:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d5a9:	eb 67                	jmp    c010d612 <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d5ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5b5:	8b 45 14             	mov    0x14(%ebp),%eax
c010d5b8:	01 d0                	add    %edx,%eax
c010d5ba:	8b 00                	mov    (%eax),%eax
c010d5bc:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d5c3:	00 
c010d5c4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d5c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d5cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5d2:	89 04 24             	mov    %eax,(%esp)
c010d5d5:	e8 75 ba ff ff       	call   c010904f <copy_string>
c010d5da:	85 c0                	test   %eax,%eax
c010d5dc:	75 0d                	jne    c010d5eb <copy_kargv+0xa9>
            kfree(buffer);
c010d5de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5e1:	89 04 24             	mov    %eax,(%esp)
c010d5e4:	e8 8c 76 ff ff       	call   c0104c75 <kfree>
            goto failed_cleanup;
c010d5e9:	eb 27                	jmp    c010d612 <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d5eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5f5:	8b 45 10             	mov    0x10(%ebp),%eax
c010d5f8:	01 c2                	add    %eax,%edx
c010d5fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5fd:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d5ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d603:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d606:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d609:	7c 81                	jl     c010d58c <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d60b:	b8 00 00 00 00       	mov    $0x0,%eax
c010d610:	eb 15                	jmp    c010d627 <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d612:	8b 45 10             	mov    0x10(%ebp),%eax
c010d615:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d619:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d61c:	89 04 24             	mov    %eax,(%esp)
c010d61f:	e8 f1 fe ff ff       	call   c010d515 <put_kargv>
    return ret;
c010d624:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d627:	c9                   	leave  
c010d628:	c3                   	ret    

c010d629 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d629:	55                   	push   %ebp
c010d62a:	89 e5                	mov    %esp,%ebp
c010d62c:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d632:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d637:	8b 40 18             	mov    0x18(%eax),%eax
c010d63a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d63d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d641:	7e 06                	jle    c010d649 <do_execve+0x20>
c010d643:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d647:	7e 0a                	jle    c010d653 <do_execve+0x2a>
        return -E_INVAL;
c010d649:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d64e:	e9 11 02 00 00       	jmp    c010d864 <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d653:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d65a:	00 
c010d65b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d662:	00 
c010d663:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d666:	89 04 24             	mov    %eax,(%esp)
c010d669:	e8 c4 7d 00 00       	call   c0115432 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d66e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d675:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d678:	89 04 24             	mov    %eax,(%esp)
c010d67b:	e8 30 e7 ff ff       	call   c010bdb0 <lock_mm>
    if (name == NULL) {
c010d680:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d684:	75 29                	jne    c010d6af <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d686:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d68b:	8b 40 04             	mov    0x4(%eax),%eax
c010d68e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d692:	c7 44 24 08 c7 80 11 	movl   $0xc01180c7,0x8(%esp)
c010d699:	c0 
c010d69a:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d6a1:	00 
c010d6a2:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d6a5:	89 04 24             	mov    %eax,(%esp)
c010d6a8:	e8 b7 78 00 00       	call   c0114f64 <snprintf>
c010d6ad:	eb 38                	jmp    c010d6e7 <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d6af:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d6b6:	00 
c010d6b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6ba:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d6be:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d6c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6c8:	89 04 24             	mov    %eax,(%esp)
c010d6cb:	e8 7f b9 ff ff       	call   c010904f <copy_string>
c010d6d0:	85 c0                	test   %eax,%eax
c010d6d2:	75 13                	jne    c010d6e7 <do_execve+0xbe>
            unlock_mm(mm);
c010d6d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6d7:	89 04 24             	mov    %eax,(%esp)
c010d6da:	e8 04 e7 ff ff       	call   c010bde3 <unlock_mm>
            return ret;
c010d6df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6e2:	e9 7d 01 00 00       	jmp    c010d864 <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d6e7:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d6ee:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d6f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d6f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d702:	89 04 24             	mov    %eax,(%esp)
c010d705:	e8 38 fe ff ff       	call   c010d542 <copy_kargv>
c010d70a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d70d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d711:	74 13                	je     c010d726 <do_execve+0xfd>
        unlock_mm(mm);
c010d713:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d716:	89 04 24             	mov    %eax,(%esp)
c010d719:	e8 c5 e6 ff ff       	call   c010bde3 <unlock_mm>
        return ret;
c010d71e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d721:	e9 3e 01 00 00       	jmp    c010d864 <do_execve+0x23b>
    }
    path = argv[0];
c010d726:	8b 45 10             	mov    0x10(%ebp),%eax
c010d729:	8b 00                	mov    (%eax),%eax
c010d72b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d72e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d731:	89 04 24             	mov    %eax,(%esp)
c010d734:	e8 aa e6 ff ff       	call   c010bde3 <unlock_mm>
    files_closeall(current->filesp);
c010d739:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d73e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d744:	89 04 24             	mov    %eax,(%esp)
c010d747:	e8 4f d9 ff ff       	call   c010b09b <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d74c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d753:	00 
c010d754:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d757:	89 04 24             	mov    %eax,(%esp)
c010d75a:	e8 4c dd ff ff       	call   c010b4ab <sysfile_open>
c010d75f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d762:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d765:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d768:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d76c:	79 05                	jns    c010d773 <do_execve+0x14a>
        goto execve_exit;
c010d76e:	e9 ae 00 00 00       	jmp    c010d821 <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d773:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d777:	74 4a                	je     c010d7c3 <do_execve+0x19a>
        lcr3(boot_cr3);
c010d779:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010d77e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d784:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d787:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d78a:	89 04 24             	mov    %eax,(%esp)
c010d78d:	e8 04 e6 ff ff       	call   c010bd96 <mm_count_dec>
c010d792:	85 c0                	test   %eax,%eax
c010d794:	75 21                	jne    c010d7b7 <do_execve+0x18e>
            exit_mmap(mm);
c010d796:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d799:	89 04 24             	mov    %eax,(%esp)
c010d79c:	e8 e6 ac ff ff       	call   c0108487 <exit_mmap>
            put_pgdir(mm);
c010d7a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7a4:	89 04 24             	mov    %eax,(%esp)
c010d7a7:	e8 27 ee ff ff       	call   c010c5d3 <put_pgdir>
            mm_destroy(mm);
c010d7ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7af:	89 04 24             	mov    %eax,(%esp)
c010d7b2:	e8 11 aa ff ff       	call   c01081c8 <mm_destroy>
        }
        current->mm = NULL;
c010d7b7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d7bc:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d7c3:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d7ca:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d7d0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d7de:	89 04 24             	mov    %eax,(%esp)
c010d7e1:	e8 fc f4 ff ff       	call   c010cce2 <load_icode>
c010d7e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d7e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d7ed:	74 02                	je     c010d7f1 <do_execve+0x1c8>
        goto execve_exit;
c010d7ef:	eb 30                	jmp    c010d821 <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d7f1:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d7f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7fe:	89 04 24             	mov    %eax,(%esp)
c010d801:	e8 0f fd ff ff       	call   c010d515 <put_kargv>
    set_proc_name(current, local_name);
c010d806:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d80b:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d80e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d812:	89 04 24             	mov    %eax,(%esp)
c010d815:	e8 b1 e7 ff ff       	call   c010bfcb <set_proc_name>
    return 0;
c010d81a:	b8 00 00 00 00       	mov    $0x0,%eax
c010d81f:	eb 43                	jmp    c010d864 <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010d821:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d827:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d82b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d82e:	89 04 24             	mov    %eax,(%esp)
c010d831:	e8 df fc ff ff       	call   c010d515 <put_kargv>
    do_exit(ret);
c010d836:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d839:	89 04 24             	mov    %eax,(%esp)
c010d83c:	e8 ee f1 ff ff       	call   c010ca2f <do_exit>
    panic("already exit: %e.\n", ret);
c010d841:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d844:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d848:	c7 44 24 08 d1 80 11 	movl   $0xc01180d1,0x8(%esp)
c010d84f:	c0 
c010d850:	c7 44 24 04 6b 03 00 	movl   $0x36b,0x4(%esp)
c010d857:	00 
c010d858:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d85f:	e8 64 36 ff ff       	call   c0100ec8 <__panic>
}
c010d864:	c9                   	leave  
c010d865:	c3                   	ret    

c010d866 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d866:	55                   	push   %ebp
c010d867:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d869:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d86e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d875:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d87a:	5d                   	pop    %ebp
c010d87b:	c3                   	ret    

c010d87c <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d87c:	55                   	push   %ebp
c010d87d:	89 e5                	mov    %esp,%ebp
c010d87f:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010d882:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d887:	8b 40 18             	mov    0x18(%eax),%eax
c010d88a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010d88d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d891:	74 30                	je     c010d8c3 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010d893:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d896:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010d89d:	00 
c010d89e:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010d8a5:	00 
c010d8a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8ad:	89 04 24             	mov    %eax,(%esp)
c010d8b0:	e8 77 b6 ff ff       	call   c0108f2c <user_mem_check>
c010d8b5:	85 c0                	test   %eax,%eax
c010d8b7:	75 0a                	jne    c010d8c3 <do_wait+0x47>
            return -E_INVAL;
c010d8b9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d8be:	e9 57 01 00 00       	jmp    c010da1a <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010d8c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010d8ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d8ce:	74 39                	je     c010d909 <do_wait+0x8d>
        proc = find_proc(pid);
c010d8d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8d3:	89 04 24             	mov    %eax,(%esp)
c010d8d6:	e8 09 eb ff ff       	call   c010c3e4 <find_proc>
c010d8db:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010d8de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8e2:	74 5a                	je     c010d93e <do_wait+0xc2>
c010d8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8e7:	8b 50 14             	mov    0x14(%eax),%edx
c010d8ea:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d8ef:	39 c2                	cmp    %eax,%edx
c010d8f1:	75 4b                	jne    c010d93e <do_wait+0xc2>
            haskid = 1;
c010d8f3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d8fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8fd:	8b 00                	mov    (%eax),%eax
c010d8ff:	83 f8 03             	cmp    $0x3,%eax
c010d902:	75 3a                	jne    c010d93e <do_wait+0xc2>
                goto found;
c010d904:	e9 89 00 00 00       	jmp    c010d992 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010d909:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d90e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d914:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010d917:	eb 1f                	jmp    c010d938 <do_wait+0xbc>
            haskid = 1;
c010d919:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d920:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d923:	8b 00                	mov    (%eax),%eax
c010d925:	83 f8 03             	cmp    $0x3,%eax
c010d928:	75 02                	jne    c010d92c <do_wait+0xb0>
                goto found;
c010d92a:	eb 66                	jmp    c010d992 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010d92c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d92f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d935:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d938:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d93c:	75 db                	jne    c010d919 <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010d93e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d942:	74 44                	je     c010d988 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010d944:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d949:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010d94f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d954:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010d95b:	00 00 80 
        schedule();
c010d95e:	e8 fa 0b 00 00       	call   c010e55d <schedule>
        if (current->flags & PF_EXITING) {
c010d963:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d968:	8b 40 44             	mov    0x44(%eax),%eax
c010d96b:	83 e0 01             	and    $0x1,%eax
c010d96e:	85 c0                	test   %eax,%eax
c010d970:	74 11                	je     c010d983 <do_wait+0x107>
            do_exit(-E_KILLED);
c010d972:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010d979:	e8 b1 f0 ff ff       	call   c010ca2f <do_exit>
        }
        goto repeat;
c010d97e:	e9 40 ff ff ff       	jmp    c010d8c3 <do_wait+0x47>
c010d983:	e9 3b ff ff ff       	jmp    c010d8c3 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010d988:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010d98d:	e9 88 00 00 00       	jmp    c010da1a <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010d992:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d997:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d99a:	74 0a                	je     c010d9a6 <do_wait+0x12a>
c010d99c:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010d9a1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d9a4:	75 1c                	jne    c010d9c2 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010d9a6:	c7 44 24 08 e4 80 11 	movl   $0xc01180e4,0x8(%esp)
c010d9ad:	c0 
c010d9ae:	c7 44 24 04 a4 03 00 	movl   $0x3a4,0x4(%esp)
c010d9b5:	00 
c010d9b6:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010d9bd:	e8 06 35 ff ff       	call   c0100ec8 <__panic>
    }
    if (code_store != NULL) {
c010d9c2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d9c6:	74 0e                	je     c010d9d6 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010d9c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9cb:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010d9d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9d4:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010d9d6:	e8 57 e2 ff ff       	call   c010bc32 <__intr_save>
c010d9db:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010d9de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9e1:	89 04 24             	mov    %eax,(%esp)
c010d9e4:	e8 c6 e9 ff ff       	call   c010c3af <unhash_proc>
        remove_links(proc);
c010d9e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9ec:	89 04 24             	mov    %eax,(%esp)
c010d9ef:	e8 16 e7 ff ff       	call   c010c10a <remove_links>
    }
    local_intr_restore(intr_flag);
c010d9f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9f7:	89 04 24             	mov    %eax,(%esp)
c010d9fa:	e8 5d e2 ff ff       	call   c010bc5c <__intr_restore>
    put_kstack(proc);
c010d9ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da02:	89 04 24             	mov    %eax,(%esp)
c010da05:	e8 fc ea ff ff       	call   c010c506 <put_kstack>
    kfree(proc);
c010da0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da0d:	89 04 24             	mov    %eax,(%esp)
c010da10:	e8 60 72 ff ff       	call   c0104c75 <kfree>
    return 0;
c010da15:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010da1a:	c9                   	leave  
c010da1b:	c3                   	ret    

c010da1c <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010da1c:	55                   	push   %ebp
c010da1d:	89 e5                	mov    %esp,%ebp
c010da1f:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010da22:	8b 45 08             	mov    0x8(%ebp),%eax
c010da25:	89 04 24             	mov    %eax,(%esp)
c010da28:	e8 b7 e9 ff ff       	call   c010c3e4 <find_proc>
c010da2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da34:	74 44                	je     c010da7a <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010da36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da39:	8b 40 44             	mov    0x44(%eax),%eax
c010da3c:	83 e0 01             	and    $0x1,%eax
c010da3f:	85 c0                	test   %eax,%eax
c010da41:	75 30                	jne    c010da73 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010da43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da46:	8b 40 44             	mov    0x44(%eax),%eax
c010da49:	83 c8 01             	or     $0x1,%eax
c010da4c:	89 c2                	mov    %eax,%edx
c010da4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da51:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010da54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da57:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010da5d:	85 c0                	test   %eax,%eax
c010da5f:	79 0b                	jns    c010da6c <do_kill+0x50>
                wakeup_proc(proc);
c010da61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da64:	89 04 24             	mov    %eax,(%esp)
c010da67:	e8 55 0a 00 00       	call   c010e4c1 <wakeup_proc>
            }
            return 0;
c010da6c:	b8 00 00 00 00       	mov    $0x0,%eax
c010da71:	eb 0c                	jmp    c010da7f <do_kill+0x63>
        }
        return -E_KILLED;
c010da73:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010da78:	eb 05                	jmp    c010da7f <do_kill+0x63>
    }
    return -E_INVAL;
c010da7a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010da7f:	c9                   	leave  
c010da80:	c3                   	ret    

c010da81 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010da81:	55                   	push   %ebp
c010da82:	89 e5                	mov    %esp,%ebp
c010da84:	53                   	push   %ebx
c010da85:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010da88:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010da8f:	eb 04                	jmp    c010da95 <kernel_execve+0x14>
        argc ++;
c010da91:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010da95:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010da98:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010da9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010daa2:	01 d0                	add    %edx,%eax
c010daa4:	8b 00                	mov    (%eax),%eax
c010daa6:	85 c0                	test   %eax,%eax
c010daa8:	75 e7                	jne    c010da91 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010daaa:	b8 04 00 00 00       	mov    $0x4,%eax
c010daaf:	8b 55 08             	mov    0x8(%ebp),%edx
c010dab2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010dab5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010dab8:	cd 80                	int    $0x80
c010daba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010dabd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dac0:	83 c4 10             	add    $0x10,%esp
c010dac3:	5b                   	pop    %ebx
c010dac4:	5d                   	pop    %ebp
c010dac5:	c3                   	ret    

c010dac6 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010dac6:	55                   	push   %ebp
c010dac7:	89 e5                	mov    %esp,%ebp
c010dac9:	83 ec 28             	sub    $0x28,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010dacc:	c7 45 f0 00 81 11 c0 	movl   $0xc0118100,-0x10(%ebp)
c010dad3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dada:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dadf:	8b 40 04             	mov    0x4(%eax),%eax
c010dae2:	c7 44 24 08 00 81 11 	movl   $0xc0118100,0x8(%esp)
c010dae9:	c0 
c010daea:	89 44 24 04          	mov    %eax,0x4(%esp)
c010daee:	c7 04 24 04 81 11 c0 	movl   $0xc0118104,(%esp)
c010daf5:	e8 6b 28 ff ff       	call   c0100365 <cprintf>
c010dafa:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dafd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db01:	c7 04 24 00 81 11 c0 	movl   $0xc0118100,(%esp)
c010db08:	e8 74 ff ff ff       	call   c010da81 <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010db0d:	c7 44 24 08 2b 81 11 	movl   $0xc011812b,0x8(%esp)
c010db14:	c0 
c010db15:	c7 44 24 04 ef 03 00 	movl   $0x3ef,0x4(%esp)
c010db1c:	00 
c010db1d:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010db24:	e8 9f 33 ff ff       	call   c0100ec8 <__panic>

c010db29 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010db29:	55                   	push   %ebp
c010db2a:	89 e5                	mov    %esp,%ebp
c010db2c:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010db2f:	c7 04 24 45 81 11 c0 	movl   $0xc0118145,(%esp)
c010db36:	e8 27 18 00 00       	call   c010f362 <vfs_set_bootfs>
c010db3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010db3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010db42:	74 23                	je     c010db67 <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010db44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db47:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010db4b:	c7 44 24 08 4c 81 11 	movl   $0xc011814c,0x8(%esp)
c010db52:	c0 
c010db53:	c7 44 24 04 f7 03 00 	movl   $0x3f7,0x4(%esp)
c010db5a:	00 
c010db5b:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010db62:	e8 61 33 ff ff       	call   c0100ec8 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010db67:	e8 00 76 ff ff       	call   c010516c <nr_free_pages>
c010db6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010db6f:	e8 c9 6f ff ff       	call   c0104b3d <kallocated>
c010db74:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010db77:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010db7e:	00 
c010db7f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010db86:	00 
c010db87:	c7 04 24 c6 da 10 c0 	movl   $0xc010dac6,(%esp)
c010db8e:	e8 c5 e8 ff ff       	call   c010c458 <kernel_thread>
c010db93:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010db96:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010db9a:	7f 1c                	jg     c010dbb8 <init_main+0x8f>
        panic("create user_main failed.\n");
c010db9c:	c7 44 24 08 65 81 11 	movl   $0xc0118165,0x8(%esp)
c010dba3:	c0 
c010dba4:	c7 44 24 04 ff 03 00 	movl   $0x3ff,0x4(%esp)
c010dbab:	00 
c010dbac:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dbb3:	e8 10 33 ff ff       	call   c0100ec8 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010dbb8:	e8 51 ba ff ff       	call   c010960e <check_sync>

    while (do_wait(0, NULL) == 0) {
c010dbbd:	eb 05                	jmp    c010dbc4 <init_main+0x9b>
        schedule();
c010dbbf:	e8 99 09 00 00       	call   c010e55d <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010dbc4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dbcb:	00 
c010dbcc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dbd3:	e8 a4 fc ff ff       	call   c010d87c <do_wait>
c010dbd8:	85 c0                	test   %eax,%eax
c010dbda:	74 e3                	je     c010dbbf <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010dbdc:	e8 56 d3 ff ff       	call   c010af37 <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010dbe1:	c7 04 24 80 81 11 c0 	movl   $0xc0118180,(%esp)
c010dbe8:	e8 78 27 ff ff       	call   c0100365 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010dbed:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dbf2:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dbf8:	85 c0                	test   %eax,%eax
c010dbfa:	75 1e                	jne    c010dc1a <init_main+0xf1>
c010dbfc:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dc01:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010dc07:	85 c0                	test   %eax,%eax
c010dc09:	75 0f                	jne    c010dc1a <init_main+0xf1>
c010dc0b:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dc10:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dc16:	85 c0                	test   %eax,%eax
c010dc18:	74 24                	je     c010dc3e <init_main+0x115>
c010dc1a:	c7 44 24 0c a4 81 11 	movl   $0xc01181a4,0xc(%esp)
c010dc21:	c0 
c010dc22:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010dc29:	c0 
c010dc2a:	c7 44 24 04 0b 04 00 	movl   $0x40b,0x4(%esp)
c010dc31:	00 
c010dc32:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dc39:	e8 8a 32 ff ff       	call   c0100ec8 <__panic>
    assert(nr_process == 2);
c010dc3e:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010dc43:	83 f8 02             	cmp    $0x2,%eax
c010dc46:	74 24                	je     c010dc6c <init_main+0x143>
c010dc48:	c7 44 24 0c ef 81 11 	movl   $0xc01181ef,0xc(%esp)
c010dc4f:	c0 
c010dc50:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010dc57:	c0 
c010dc58:	c7 44 24 04 0c 04 00 	movl   $0x40c,0x4(%esp)
c010dc5f:	00 
c010dc60:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dc67:	e8 5c 32 ff ff       	call   c0100ec8 <__panic>
c010dc6c:	c7 45 e4 fc 31 15 c0 	movl   $0xc01531fc,-0x1c(%ebp)
c010dc73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dc76:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010dc79:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dc7f:	83 c2 7c             	add    $0x7c,%edx
c010dc82:	39 d0                	cmp    %edx,%eax
c010dc84:	74 24                	je     c010dcaa <init_main+0x181>
c010dc86:	c7 44 24 0c 00 82 11 	movl   $0xc0118200,0xc(%esp)
c010dc8d:	c0 
c010dc8e:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010dc95:	c0 
c010dc96:	c7 44 24 04 0d 04 00 	movl   $0x40d,0x4(%esp)
c010dc9d:	00 
c010dc9e:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dca5:	e8 1e 32 ff ff       	call   c0100ec8 <__panic>
c010dcaa:	c7 45 e0 fc 31 15 c0 	movl   $0xc01531fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010dcb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dcb4:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010dcb6:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dcbc:	83 c2 7c             	add    $0x7c,%edx
c010dcbf:	39 d0                	cmp    %edx,%eax
c010dcc1:	74 24                	je     c010dce7 <init_main+0x1be>
c010dcc3:	c7 44 24 0c 30 82 11 	movl   $0xc0118230,0xc(%esp)
c010dcca:	c0 
c010dccb:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010dcd2:	c0 
c010dcd3:	c7 44 24 04 0e 04 00 	movl   $0x40e,0x4(%esp)
c010dcda:	00 
c010dcdb:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dce2:	e8 e1 31 ff ff       	call   c0100ec8 <__panic>

    cprintf("init check memory pass.\n");
c010dce7:	c7 04 24 60 82 11 c0 	movl   $0xc0118260,(%esp)
c010dcee:	e8 72 26 ff ff       	call   c0100365 <cprintf>
    return 0;
c010dcf3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dcf8:	c9                   	leave  
c010dcf9:	c3                   	ret    

c010dcfa <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010dcfa:	55                   	push   %ebp
c010dcfb:	89 e5                	mov    %esp,%ebp
c010dcfd:	53                   	push   %ebx
c010dcfe:	83 ec 24             	sub    $0x24,%esp
c010dd01:	c7 45 ec fc 31 15 c0 	movl   $0xc01531fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dd08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd0b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010dd0e:	89 50 04             	mov    %edx,0x4(%eax)
c010dd11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd14:	8b 50 04             	mov    0x4(%eax),%edx
c010dd17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd1a:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dd1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dd23:	eb 26                	jmp    c010dd4b <proc_init+0x51>
        list_init(hash_list + i);
c010dd25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dd28:	c1 e0 03             	shl    $0x3,%eax
c010dd2b:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010dd30:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dd33:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd36:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010dd39:	89 50 04             	mov    %edx,0x4(%eax)
c010dd3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd3f:	8b 50 04             	mov    0x4(%eax),%edx
c010dd42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd45:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dd47:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010dd4b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010dd52:	7e d1                	jle    c010dd25 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010dd54:	e8 e4 e0 ff ff       	call   c010be3d <alloc_proc>
c010dd59:	a3 20 ff 14 c0       	mov    %eax,0xc014ff20
c010dd5e:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd63:	85 c0                	test   %eax,%eax
c010dd65:	75 1c                	jne    c010dd83 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010dd67:	c7 44 24 08 79 82 11 	movl   $0xc0118279,0x8(%esp)
c010dd6e:	c0 
c010dd6f:	c7 44 24 04 20 04 00 	movl   $0x420,0x4(%esp)
c010dd76:	00 
c010dd77:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dd7e:	e8 45 31 ff ff       	call   c0100ec8 <__panic>
    }

    idleproc->pid = 0;
c010dd83:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd88:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010dd8f:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd94:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010dd9a:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dd9f:	ba 00 c0 14 c0       	mov    $0xc014c000,%edx
c010dda4:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010dda7:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddac:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010ddb3:	8b 1d 20 ff 14 c0    	mov    0xc014ff20,%ebx
c010ddb9:	e8 b2 d1 ff ff       	call   c010af70 <files_create>
c010ddbe:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010ddc4:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010ddca:	85 c0                	test   %eax,%eax
c010ddcc:	75 1c                	jne    c010ddea <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010ddce:	c7 44 24 08 94 82 11 	movl   $0xc0118294,0x8(%esp)
c010ddd5:	c0 
c010ddd6:	c7 44 24 04 29 04 00 	movl   $0x429,0x4(%esp)
c010dddd:	00 
c010ddde:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dde5:	e8 de 30 ff ff       	call   c0100ec8 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010ddea:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddef:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ddf5:	89 04 24             	mov    %eax,(%esp)
c010ddf8:	e8 0c e0 ff ff       	call   c010be09 <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010ddfd:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de02:	c7 44 24 04 b6 82 11 	movl   $0xc01182b6,0x4(%esp)
c010de09:	c0 
c010de0a:	89 04 24             	mov    %eax,(%esp)
c010de0d:	e8 b9 e1 ff ff       	call   c010bfcb <set_proc_name>
    nr_process ++;
c010de12:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010de17:	83 c0 01             	add    $0x1,%eax
c010de1a:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40

    current = idleproc;
c010de1f:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de24:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28

    int pid = kernel_thread(init_main, NULL, 0);
c010de29:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010de30:	00 
c010de31:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010de38:	00 
c010de39:	c7 04 24 29 db 10 c0 	movl   $0xc010db29,(%esp)
c010de40:	e8 13 e6 ff ff       	call   c010c458 <kernel_thread>
c010de45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010de48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010de4c:	7f 1c                	jg     c010de6a <proc_init+0x170>
        panic("create init_main failed.\n");
c010de4e:	c7 44 24 08 bb 82 11 	movl   $0xc01182bb,0x8(%esp)
c010de55:	c0 
c010de56:	c7 44 24 04 34 04 00 	movl   $0x434,0x4(%esp)
c010de5d:	00 
c010de5e:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010de65:	e8 5e 30 ff ff       	call   c0100ec8 <__panic>
    }

    initproc = find_proc(pid);
c010de6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de6d:	89 04 24             	mov    %eax,(%esp)
c010de70:	e8 6f e5 ff ff       	call   c010c3e4 <find_proc>
c010de75:	a3 24 ff 14 c0       	mov    %eax,0xc014ff24
    set_proc_name(initproc, "init");
c010de7a:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010de7f:	c7 44 24 04 d5 82 11 	movl   $0xc01182d5,0x4(%esp)
c010de86:	c0 
c010de87:	89 04 24             	mov    %eax,(%esp)
c010de8a:	e8 3c e1 ff ff       	call   c010bfcb <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010de8f:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de94:	85 c0                	test   %eax,%eax
c010de96:	74 0c                	je     c010dea4 <proc_init+0x1aa>
c010de98:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de9d:	8b 40 04             	mov    0x4(%eax),%eax
c010dea0:	85 c0                	test   %eax,%eax
c010dea2:	74 24                	je     c010dec8 <proc_init+0x1ce>
c010dea4:	c7 44 24 0c dc 82 11 	movl   $0xc01182dc,0xc(%esp)
c010deab:	c0 
c010deac:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010deb3:	c0 
c010deb4:	c7 44 24 04 3a 04 00 	movl   $0x43a,0x4(%esp)
c010debb:	00 
c010debc:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010dec3:	e8 00 30 ff ff       	call   c0100ec8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010dec8:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010decd:	85 c0                	test   %eax,%eax
c010decf:	74 0d                	je     c010dede <proc_init+0x1e4>
c010ded1:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010ded6:	8b 40 04             	mov    0x4(%eax),%eax
c010ded9:	83 f8 01             	cmp    $0x1,%eax
c010dedc:	74 24                	je     c010df02 <proc_init+0x208>
c010dede:	c7 44 24 0c 04 83 11 	movl   $0xc0118304,0xc(%esp)
c010dee5:	c0 
c010dee6:	c7 44 24 08 ab 7e 11 	movl   $0xc0117eab,0x8(%esp)
c010deed:	c0 
c010deee:	c7 44 24 04 3b 04 00 	movl   $0x43b,0x4(%esp)
c010def5:	00 
c010def6:	c7 04 24 84 7e 11 c0 	movl   $0xc0117e84,(%esp)
c010defd:	e8 c6 2f ff ff       	call   c0100ec8 <__panic>
}
c010df02:	83 c4 24             	add    $0x24,%esp
c010df05:	5b                   	pop    %ebx
c010df06:	5d                   	pop    %ebp
c010df07:	c3                   	ret    

c010df08 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010df08:	55                   	push   %ebp
c010df09:	89 e5                	mov    %esp,%ebp
c010df0b:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010df0e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df13:	8b 40 10             	mov    0x10(%eax),%eax
c010df16:	85 c0                	test   %eax,%eax
c010df18:	74 07                	je     c010df21 <cpu_idle+0x19>
            schedule();
c010df1a:	e8 3e 06 00 00       	call   c010e55d <schedule>
        }
    }
c010df1f:	eb ed                	jmp    c010df0e <cpu_idle+0x6>
c010df21:	eb eb                	jmp    c010df0e <cpu_idle+0x6>

c010df23 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010df23:	55                   	push   %ebp
c010df24:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010df26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010df2a:	75 11                	jne    c010df3d <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010df2c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df31:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010df38:	00 00 00 
c010df3b:	eb 0e                	jmp    c010df4b <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010df3d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df42:	8b 55 08             	mov    0x8(%ebp),%edx
c010df45:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010df4b:	5d                   	pop    %ebp
c010df4c:	c3                   	ret    

c010df4d <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010df4d:	55                   	push   %ebp
c010df4e:	89 e5                	mov    %esp,%ebp
c010df50:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010df53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010df57:	75 07                	jne    c010df60 <do_sleep+0x13>
        return 0;
c010df59:	b8 00 00 00 00       	mov    $0x0,%eax
c010df5e:	eb 6b                	jmp    c010dfcb <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010df60:	e8 cd dc ff ff       	call   c010bc32 <__intr_save>
c010df65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010df68:	8b 55 08             	mov    0x8(%ebp),%edx
c010df6b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df70:	89 54 24 08          	mov    %edx,0x8(%esp)
c010df74:	89 44 24 04          	mov    %eax,0x4(%esp)
c010df78:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010df7b:	89 04 24             	mov    %eax,(%esp)
c010df7e:	e8 76 dc ff ff       	call   c010bbf9 <timer_init>
c010df83:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010df86:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df8b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010df91:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df96:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010df9d:	00 00 80 
    add_timer(timer);
c010dfa0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dfa3:	89 04 24             	mov    %eax,(%esp)
c010dfa6:	e8 3d 06 00 00       	call   c010e5e8 <add_timer>
    local_intr_restore(intr_flag);
c010dfab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dfae:	89 04 24             	mov    %eax,(%esp)
c010dfb1:	e8 a6 dc ff ff       	call   c010bc5c <__intr_restore>

    schedule();
c010dfb6:	e8 a2 05 00 00       	call   c010e55d <schedule>

    del_timer(timer);
c010dfbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dfbe:	89 04 24             	mov    %eax,(%esp)
c010dfc1:	e8 60 07 00 00       	call   c010e726 <del_timer>
    return 0;
c010dfc6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dfcb:	c9                   	leave  
c010dfcc:	c3                   	ret    

c010dfcd <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010dfcd:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010dfd1:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010dfd3:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010dfd6:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010dfd9:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010dfdc:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010dfdf:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010dfe2:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010dfe5:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010dfe8:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010dfec:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010dfef:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010dff2:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010dff5:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010dff8:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010dffb:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010dffe:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010e001:	ff 30                	pushl  (%eax)

    ret
c010e003:	c3                   	ret    

c010e004 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e004:	55                   	push   %ebp
c010e005:	89 e5                	mov    %esp,%ebp
c010e007:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e00a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e00e:	75 08                	jne    c010e018 <skew_heap_merge+0x14>
c010e010:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e013:	e9 bd 00 00 00       	jmp    c010e0d5 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e018:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e01c:	75 08                	jne    c010e026 <skew_heap_merge+0x22>
c010e01e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e021:	e9 af 00 00 00       	jmp    c010e0d5 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e026:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e029:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e02d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e030:	89 04 24             	mov    %eax,(%esp)
c010e033:	8b 45 10             	mov    0x10(%ebp),%eax
c010e036:	ff d0                	call   *%eax
c010e038:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e03b:	75 4d                	jne    c010e08a <skew_heap_merge+0x86>
     {
          r = a->left;
c010e03d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e040:	8b 40 04             	mov    0x4(%eax),%eax
c010e043:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e046:	8b 45 08             	mov    0x8(%ebp),%eax
c010e049:	8b 40 08             	mov    0x8(%eax),%eax
c010e04c:	8b 55 10             	mov    0x10(%ebp),%edx
c010e04f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e053:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e056:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e05a:	89 04 24             	mov    %eax,(%esp)
c010e05d:	e8 a2 ff ff ff       	call   c010e004 <skew_heap_merge>
c010e062:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e065:	8b 45 08             	mov    0x8(%ebp),%eax
c010e068:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e06b:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e06e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e071:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e074:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e077:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e07b:	74 08                	je     c010e085 <skew_heap_merge+0x81>
c010e07d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e080:	8b 55 08             	mov    0x8(%ebp),%edx
c010e083:	89 10                	mov    %edx,(%eax)

          return a;
c010e085:	8b 45 08             	mov    0x8(%ebp),%eax
c010e088:	eb 4b                	jmp    c010e0d5 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e08a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e08d:	8b 40 04             	mov    0x4(%eax),%eax
c010e090:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e093:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e096:	8b 40 08             	mov    0x8(%eax),%eax
c010e099:	8b 55 10             	mov    0x10(%ebp),%edx
c010e09c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e0a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e0a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0a7:	89 04 24             	mov    %eax,(%esp)
c010e0aa:	e8 55 ff ff ff       	call   c010e004 <skew_heap_merge>
c010e0af:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e0b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e0b8:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e0bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0be:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e0c1:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e0c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e0c8:	74 08                	je     c010e0d2 <skew_heap_merge+0xce>
c010e0ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e0cd:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e0d0:	89 10                	mov    %edx,(%eax)

          return b;
c010e0d2:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e0d5:	c9                   	leave  
c010e0d6:	c3                   	ret    

c010e0d7 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e0d7:	55                   	push   %ebp
c010e0d8:	89 e5                	mov    %esp,%ebp
c010e0da:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e0dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0e0:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e0e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e0e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0eb:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e0f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e0f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e0f6:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e0fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e0ff:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e105:	29 c2                	sub    %eax,%edx
c010e107:	89 d0                	mov    %edx,%eax
c010e109:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e10c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e110:	7e 07                	jle    c010e119 <proc_stride_comp_f+0x42>
c010e112:	b8 01 00 00 00       	mov    $0x1,%eax
c010e117:	eb 12                	jmp    c010e12b <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e119:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e11d:	75 07                	jne    c010e126 <proc_stride_comp_f+0x4f>
c010e11f:	b8 00 00 00 00       	mov    $0x0,%eax
c010e124:	eb 05                	jmp    c010e12b <proc_stride_comp_f+0x54>
     else return -1;
c010e126:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e12b:	c9                   	leave  
c010e12c:	c3                   	ret    

c010e12d <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e12d:	55                   	push   %ebp
c010e12e:	89 e5                	mov    %esp,%ebp
c010e130:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0
      */
	list_init(&(rq->run_list));
c010e133:	8b 45 08             	mov    0x8(%ebp),%eax
c010e136:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e139:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e13c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e13f:	89 50 04             	mov    %edx,0x4(%eax)
c010e142:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e145:	8b 50 04             	mov    0x4(%eax),%edx
c010e148:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e14b:	89 10                	mov    %edx,(%eax)
	rq->lab6_run_pool = NULL;
c010e14d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e150:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	rq->proc_num = 0;
c010e157:	8b 45 08             	mov    0x8(%ebp),%eax
c010e15a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e161:	c9                   	leave  
c010e162:	c3                   	ret    

c010e163 <stride_enqueue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e163:	55                   	push   %ebp
c010e164:	89 e5                	mov    %esp,%ebp
c010e166:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e169:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e16c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e172:	8b 45 08             	mov    0x8(%ebp),%eax
c010e175:	8b 40 10             	mov    0x10(%eax),%eax
c010e178:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e17b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e17e:	c7 45 ec d7 e0 10 c0 	movl   $0xc010e0d7,-0x14(%ebp)
c010e185:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e188:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e18b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e18e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e194:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e197:	8b 10                	mov    (%eax),%edx
c010e199:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e19c:	89 50 08             	mov    %edx,0x8(%eax)
c010e19f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1a2:	8b 50 08             	mov    0x8(%eax),%edx
c010e1a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1a8:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e1ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e1ae:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e1b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e1b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e1bc:	89 04 24             	mov    %eax,(%esp)
c010e1bf:	e8 40 fe ff ff       	call   c010e004 <skew_heap_merge>
c010e1c4:	89 c2                	mov    %eax,%edx
c010e1c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1c9:	89 50 10             	mov    %edx,0x10(%eax)
	if(proc->time_slice > rq->max_time_slice || proc->time_slice == 0){
c010e1cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1cf:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e1d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1d8:	8b 40 0c             	mov    0xc(%eax),%eax
c010e1db:	39 c2                	cmp    %eax,%edx
c010e1dd:	7f 0d                	jg     c010e1ec <stride_enqueue+0x89>
c010e1df:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1e2:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e1e8:	85 c0                	test   %eax,%eax
c010e1ea:	75 0f                	jne    c010e1fb <stride_enqueue+0x98>
		proc->time_slice = rq->max_time_slice;
c010e1ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1ef:	8b 50 0c             	mov    0xc(%eax),%edx
c010e1f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1f5:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
	}
	rq->proc_num++;
c010e1fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1fe:	8b 40 08             	mov    0x8(%eax),%eax
c010e201:	8d 50 01             	lea    0x1(%eax),%edx
c010e204:	8b 45 08             	mov    0x8(%ebp),%eax
c010e207:	89 50 08             	mov    %edx,0x8(%eax)
	proc->rq = rq;
c010e20a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e20d:	8b 55 08             	mov    0x8(%ebp),%edx
c010e210:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
}
c010e216:	c9                   	leave  
c010e217:	c3                   	ret    

c010e218 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e218:	55                   	push   %ebp
c010e219:	89 e5                	mov    %esp,%ebp
c010e21b:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e21e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e221:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e227:	8b 45 08             	mov    0x8(%ebp),%eax
c010e22a:	8b 40 10             	mov    0x10(%eax),%eax
c010e22d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e230:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e233:	c7 45 ec d7 e0 10 c0 	movl   $0xc010e0d7,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e23a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e23d:	8b 00                	mov    (%eax),%eax
c010e23f:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e242:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e245:	8b 50 08             	mov    0x8(%eax),%edx
c010e248:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e24b:	8b 40 04             	mov    0x4(%eax),%eax
c010e24e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e251:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e255:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e259:	89 04 24             	mov    %eax,(%esp)
c010e25c:	e8 a3 fd ff ff       	call   c010e004 <skew_heap_merge>
c010e261:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e264:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e268:	74 08                	je     c010e272 <stride_dequeue+0x5a>
c010e26a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e26d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e270:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e272:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e276:	74 24                	je     c010e29c <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e278:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e27b:	8b 40 04             	mov    0x4(%eax),%eax
c010e27e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e281:	75 0b                	jne    c010e28e <stride_dequeue+0x76>
               p->left = rep;
c010e283:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e286:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e289:	89 50 04             	mov    %edx,0x4(%eax)
c010e28c:	eb 09                	jmp    c010e297 <stride_dequeue+0x7f>
          else p->right = rep;
c010e28e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e291:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e294:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e29a:	eb 03                	jmp    c010e29f <stride_dequeue+0x87>
     }
     else return rep;
c010e29c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e29f:	89 c2                	mov    %eax,%edx
c010e2a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2a4:	89 50 10             	mov    %edx,0x10(%eax)
	rq->proc_num--;
c010e2a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2aa:	8b 40 08             	mov    0x8(%eax),%eax
c010e2ad:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e2b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2b3:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e2b6:	c9                   	leave  
c010e2b7:	c3                   	ret    

c010e2b8 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e2b8:	55                   	push   %ebp
c010e2b9:	89 e5                	mov    %esp,%ebp
c010e2bb:	53                   	push   %ebx
c010e2bc:	83 ec 10             	sub    $0x10,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
	if(rq->lab6_run_pool == NULL){
c010e2bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2c2:	8b 40 10             	mov    0x10(%eax),%eax
c010e2c5:	85 c0                	test   %eax,%eax
c010e2c7:	75 07                	jne    c010e2d0 <stride_pick_next+0x18>
		return NULL;
c010e2c9:	b8 00 00 00 00       	mov    $0x0,%eax
c010e2ce:	eb 62                	jmp    c010e332 <stride_pick_next+0x7a>
	}
	else{
		struct proc_struct *proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e2d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2d3:	8b 40 10             	mov    0x10(%eax),%eax
c010e2d6:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e2db:	89 45 f8             	mov    %eax,-0x8(%ebp)
		if(proc->lab6_priority == 0){
c010e2de:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2e1:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e2e7:	85 c0                	test   %eax,%eax
c010e2e9:	75 1a                	jne    c010e305 <stride_pick_next+0x4d>
			proc->lab6_stride += BIG_STRIDE;
c010e2eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2ee:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e2f4:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010e2fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2fd:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010e303:	eb 2a                	jmp    c010e32f <stride_pick_next+0x77>
		}
		else{
			proc->lab6_stride += BIG_STRIDE/(proc->lab6_priority);
c010e305:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e308:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e30e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e311:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010e317:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e31c:	ba 00 00 00 00       	mov    $0x0,%edx
c010e321:	f7 f3                	div    %ebx
c010e323:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e326:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e329:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
		}
		return proc;
c010e32f:	8b 45 f8             	mov    -0x8(%ebp),%eax
	}

}
c010e332:	83 c4 10             	add    $0x10,%esp
c010e335:	5b                   	pop    %ebx
c010e336:	5d                   	pop    %ebp
c010e337:	c3                   	ret    

c010e338 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e338:	55                   	push   %ebp
c010e339:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
	if(proc->time_slice > 0){
c010e33b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e33e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e344:	85 c0                	test   %eax,%eax
c010e346:	7e 15                	jle    c010e35d <stride_proc_tick+0x25>
		proc->time_slice--;
c010e348:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e34b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e351:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e354:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e357:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
	}
	if(proc->time_slice == 0){
c010e35d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e360:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e366:	85 c0                	test   %eax,%eax
c010e368:	75 0a                	jne    c010e374 <stride_proc_tick+0x3c>
		proc->need_resched = 1;
c010e36a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e36d:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
	}
}
c010e374:	5d                   	pop    %ebp
c010e375:	c3                   	ret    

c010e376 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e376:	55                   	push   %ebp
c010e377:	89 e5                	mov    %esp,%ebp
c010e379:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e37c:	9c                   	pushf  
c010e37d:	58                   	pop    %eax
c010e37e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e381:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e384:	25 00 02 00 00       	and    $0x200,%eax
c010e389:	85 c0                	test   %eax,%eax
c010e38b:	74 0c                	je     c010e399 <__intr_save+0x23>
        intr_disable();
c010e38d:	e8 98 3d ff ff       	call   c010212a <intr_disable>
        return 1;
c010e392:	b8 01 00 00 00       	mov    $0x1,%eax
c010e397:	eb 05                	jmp    c010e39e <__intr_save+0x28>
    }
    return 0;
c010e399:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e39e:	c9                   	leave  
c010e39f:	c3                   	ret    

c010e3a0 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e3a0:	55                   	push   %ebp
c010e3a1:	89 e5                	mov    %esp,%ebp
c010e3a3:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e3a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e3aa:	74 05                	je     c010e3b1 <__intr_restore+0x11>
        intr_enable();
c010e3ac:	e8 73 3d ff ff       	call   c0102124 <intr_enable>
    }
}
c010e3b1:	c9                   	leave  
c010e3b2:	c3                   	ret    

c010e3b3 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e3b3:	55                   	push   %ebp
c010e3b4:	89 e5                	mov    %esp,%ebp
c010e3b6:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e3b9:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e3be:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e3c1:	74 1a                	je     c010e3dd <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e3c3:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e3c8:	8b 40 08             	mov    0x8(%eax),%eax
c010e3cb:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e3d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e3d4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e3d8:	89 14 24             	mov    %edx,(%esp)
c010e3db:	ff d0                	call   *%eax
    }
}
c010e3dd:	c9                   	leave  
c010e3de:	c3                   	ret    

c010e3df <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e3df:	55                   	push   %ebp
c010e3e0:	89 e5                	mov    %esp,%ebp
c010e3e2:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e3e5:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e3ea:	8b 40 0c             	mov    0xc(%eax),%eax
c010e3ed:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e3f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e3f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e3fa:	89 14 24             	mov    %edx,(%esp)
c010e3fd:	ff d0                	call   *%eax
}
c010e3ff:	c9                   	leave  
c010e400:	c3                   	ret    

c010e401 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e401:	55                   	push   %ebp
c010e402:	89 e5                	mov    %esp,%ebp
c010e404:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e407:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e40c:	8b 40 10             	mov    0x10(%eax),%eax
c010e40f:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e415:	89 14 24             	mov    %edx,(%esp)
c010e418:	ff d0                	call   *%eax
}
c010e41a:	c9                   	leave  
c010e41b:	c3                   	ret    

c010e41c <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e41c:	55                   	push   %ebp
c010e41d:	89 e5                	mov    %esp,%ebp
c010e41f:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e422:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e427:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e42a:	74 1c                	je     c010e448 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e42c:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e431:	8b 40 14             	mov    0x14(%eax),%eax
c010e434:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e43a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e43d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e441:	89 14 24             	mov    %edx,(%esp)
c010e444:	ff d0                	call   *%eax
c010e446:	eb 0a                	jmp    c010e452 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e448:	8b 45 08             	mov    0x8(%ebp),%eax
c010e44b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e452:	c9                   	leave  
c010e453:	c3                   	ret    

c010e454 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e454:	55                   	push   %ebp
c010e455:	89 e5                	mov    %esp,%ebp
c010e457:	83 ec 28             	sub    $0x28,%esp
c010e45a:	c7 45 f4 94 1f 15 c0 	movl   $0xc0151f94,-0xc(%ebp)
c010e461:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e464:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e467:	89 50 04             	mov    %edx,0x4(%eax)
c010e46a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e46d:	8b 50 04             	mov    0x4(%eax),%edx
c010e470:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e473:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e475:	c7 05 9c 1f 15 c0 8c 	movl   $0xc014ea8c,0xc0151f9c
c010e47c:	ea 14 c0 

    rq = &__rq;
c010e47f:	c7 05 a0 1f 15 c0 a4 	movl   $0xc0151fa4,0xc0151fa0
c010e486:	1f 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010e489:	a1 a0 1f 15 c0       	mov    0xc0151fa0,%eax
c010e48e:	c7 40 0c 14 00 00 00 	movl   $0x14,0xc(%eax)
    sched_class->init(rq);
c010e495:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e49a:	8b 40 04             	mov    0x4(%eax),%eax
c010e49d:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e4a3:	89 14 24             	mov    %edx,(%esp)
c010e4a6:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e4a8:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e4ad:	8b 00                	mov    (%eax),%eax
c010e4af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e4b3:	c7 04 24 3c 83 11 c0 	movl   $0xc011833c,(%esp)
c010e4ba:	e8 a6 1e ff ff       	call   c0100365 <cprintf>
}
c010e4bf:	c9                   	leave  
c010e4c0:	c3                   	ret    

c010e4c1 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e4c1:	55                   	push   %ebp
c010e4c2:	89 e5                	mov    %esp,%ebp
c010e4c4:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e4c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4ca:	8b 00                	mov    (%eax),%eax
c010e4cc:	83 f8 03             	cmp    $0x3,%eax
c010e4cf:	75 24                	jne    c010e4f5 <wakeup_proc+0x34>
c010e4d1:	c7 44 24 0c 4d 83 11 	movl   $0xc011834d,0xc(%esp)
c010e4d8:	c0 
c010e4d9:	c7 44 24 08 68 83 11 	movl   $0xc0118368,0x8(%esp)
c010e4e0:	c0 
c010e4e1:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010e4e8:	00 
c010e4e9:	c7 04 24 7d 83 11 c0 	movl   $0xc011837d,(%esp)
c010e4f0:	e8 d3 29 ff ff       	call   c0100ec8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e4f5:	e8 7c fe ff ff       	call   c010e376 <__intr_save>
c010e4fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e4fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e500:	8b 00                	mov    (%eax),%eax
c010e502:	83 f8 02             	cmp    $0x2,%eax
c010e505:	74 2d                	je     c010e534 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e507:	8b 45 08             	mov    0x8(%ebp),%eax
c010e50a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e510:	8b 45 08             	mov    0x8(%ebp),%eax
c010e513:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e51a:	00 00 00 
            if (proc != current) {
c010e51d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e522:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e525:	74 29                	je     c010e550 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e527:	8b 45 08             	mov    0x8(%ebp),%eax
c010e52a:	89 04 24             	mov    %eax,(%esp)
c010e52d:	e8 81 fe ff ff       	call   c010e3b3 <sched_class_enqueue>
c010e532:	eb 1c                	jmp    c010e550 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e534:	c7 44 24 08 93 83 11 	movl   $0xc0118393,0x8(%esp)
c010e53b:	c0 
c010e53c:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010e543:	00 
c010e544:	c7 04 24 7d 83 11 c0 	movl   $0xc011837d,(%esp)
c010e54b:	e8 e4 29 ff ff       	call   c0100f34 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e550:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e553:	89 04 24             	mov    %eax,(%esp)
c010e556:	e8 45 fe ff ff       	call   c010e3a0 <__intr_restore>
}
c010e55b:	c9                   	leave  
c010e55c:	c3                   	ret    

c010e55d <schedule>:

void
schedule(void) {
c010e55d:	55                   	push   %ebp
c010e55e:	89 e5                	mov    %esp,%ebp
c010e560:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e563:	e8 0e fe ff ff       	call   c010e376 <__intr_save>
c010e568:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e56b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e570:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e577:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e57c:	8b 00                	mov    (%eax),%eax
c010e57e:	83 f8 02             	cmp    $0x2,%eax
c010e581:	75 0d                	jne    c010e590 <schedule+0x33>
            sched_class_enqueue(current);
c010e583:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e588:	89 04 24             	mov    %eax,(%esp)
c010e58b:	e8 23 fe ff ff       	call   c010e3b3 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e590:	e8 6c fe ff ff       	call   c010e401 <sched_class_pick_next>
c010e595:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e598:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e59c:	74 0b                	je     c010e5a9 <schedule+0x4c>
            sched_class_dequeue(next);
c010e59e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5a1:	89 04 24             	mov    %eax,(%esp)
c010e5a4:	e8 36 fe ff ff       	call   c010e3df <sched_class_dequeue>
        }
        if (next == NULL) {
c010e5a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e5ad:	75 08                	jne    c010e5b7 <schedule+0x5a>
            next = idleproc;
c010e5af:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e5b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e5b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5ba:	8b 40 08             	mov    0x8(%eax),%eax
c010e5bd:	8d 50 01             	lea    0x1(%eax),%edx
c010e5c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5c3:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e5c6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e5cb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e5ce:	74 0b                	je     c010e5db <schedule+0x7e>
            proc_run(next);
c010e5d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5d3:	89 04 24             	mov    %eax,(%esp)
c010e5d6:	e8 c8 dc ff ff       	call   c010c2a3 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e5db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e5de:	89 04 24             	mov    %eax,(%esp)
c010e5e1:	e8 ba fd ff ff       	call   c010e3a0 <__intr_restore>
}
c010e5e6:	c9                   	leave  
c010e5e7:	c3                   	ret    

c010e5e8 <add_timer>:

void
add_timer(timer_t *timer) {
c010e5e8:	55                   	push   %ebp
c010e5e9:	89 e5                	mov    %esp,%ebp
c010e5eb:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e5ee:	e8 83 fd ff ff       	call   c010e376 <__intr_save>
c010e5f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e5f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5f9:	8b 00                	mov    (%eax),%eax
c010e5fb:	85 c0                	test   %eax,%eax
c010e5fd:	74 0a                	je     c010e609 <add_timer+0x21>
c010e5ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010e602:	8b 40 04             	mov    0x4(%eax),%eax
c010e605:	85 c0                	test   %eax,%eax
c010e607:	75 24                	jne    c010e62d <add_timer+0x45>
c010e609:	c7 44 24 0c b0 83 11 	movl   $0xc01183b0,0xc(%esp)
c010e610:	c0 
c010e611:	c7 44 24 08 68 83 11 	movl   $0xc0118368,0x8(%esp)
c010e618:	c0 
c010e619:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e620:	00 
c010e621:	c7 04 24 7d 83 11 c0 	movl   $0xc011837d,(%esp)
c010e628:	e8 9b 28 ff ff       	call   c0100ec8 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e62d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e630:	83 c0 08             	add    $0x8,%eax
c010e633:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e636:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e639:	8b 40 04             	mov    0x4(%eax),%eax
c010e63c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e63f:	0f 94 c0             	sete   %al
c010e642:	0f b6 c0             	movzbl %al,%eax
c010e645:	85 c0                	test   %eax,%eax
c010e647:	75 24                	jne    c010e66d <add_timer+0x85>
c010e649:	c7 44 24 0c dc 83 11 	movl   $0xc01183dc,0xc(%esp)
c010e650:	c0 
c010e651:	c7 44 24 08 68 83 11 	movl   $0xc0118368,0x8(%esp)
c010e658:	c0 
c010e659:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010e660:	00 
c010e661:	c7 04 24 7d 83 11 c0 	movl   $0xc011837d,(%esp)
c010e668:	e8 5b 28 ff ff       	call   c0100ec8 <__panic>
c010e66d:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e674:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e677:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e67a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e67d:	eb 4a                	jmp    c010e6c9 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e67f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e682:	83 e8 08             	sub    $0x8,%eax
c010e685:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e688:	8b 45 08             	mov    0x8(%ebp),%eax
c010e68b:	8b 10                	mov    (%eax),%edx
c010e68d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e690:	8b 00                	mov    (%eax),%eax
c010e692:	39 c2                	cmp    %eax,%edx
c010e694:	73 13                	jae    c010e6a9 <add_timer+0xc1>
                next->expires -= timer->expires;
c010e696:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e699:	8b 10                	mov    (%eax),%edx
c010e69b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e69e:	8b 00                	mov    (%eax),%eax
c010e6a0:	29 c2                	sub    %eax,%edx
c010e6a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6a5:	89 10                	mov    %edx,(%eax)
                break;
c010e6a7:	eb 29                	jmp    c010e6d2 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e6a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6ac:	8b 10                	mov    (%eax),%edx
c010e6ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6b1:	8b 00                	mov    (%eax),%eax
c010e6b3:	29 c2                	sub    %eax,%edx
c010e6b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6b8:	89 10                	mov    %edx,(%eax)
c010e6ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e6c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e6c3:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e6c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e6c9:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e6d0:	75 ad                	jne    c010e67f <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e6d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6d5:	8d 50 08             	lea    0x8(%eax),%edx
c010e6d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6db:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e6de:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e6e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e6e4:	8b 00                	mov    (%eax),%eax
c010e6e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e6e9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e6ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e6ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e6f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e6f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e6f8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e6fb:	89 10                	mov    %edx,(%eax)
c010e6fd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e700:	8b 10                	mov    (%eax),%edx
c010e702:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e705:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e708:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e70b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e70e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e711:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e714:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e717:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e719:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e71c:	89 04 24             	mov    %eax,(%esp)
c010e71f:	e8 7c fc ff ff       	call   c010e3a0 <__intr_restore>
}
c010e724:	c9                   	leave  
c010e725:	c3                   	ret    

c010e726 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010e726:	55                   	push   %ebp
c010e727:	89 e5                	mov    %esp,%ebp
c010e729:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e72c:	e8 45 fc ff ff       	call   c010e376 <__intr_save>
c010e731:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e734:	8b 45 08             	mov    0x8(%ebp),%eax
c010e737:	83 c0 08             	add    $0x8,%eax
c010e73a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e73d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e740:	8b 40 04             	mov    0x4(%eax),%eax
c010e743:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e746:	0f 94 c0             	sete   %al
c010e749:	0f b6 c0             	movzbl %al,%eax
c010e74c:	85 c0                	test   %eax,%eax
c010e74e:	0f 85 89 00 00 00    	jne    c010e7dd <del_timer+0xb7>
            if (timer->expires != 0) {
c010e754:	8b 45 08             	mov    0x8(%ebp),%eax
c010e757:	8b 00                	mov    (%eax),%eax
c010e759:	85 c0                	test   %eax,%eax
c010e75b:	74 35                	je     c010e792 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e75d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e760:	83 c0 08             	add    $0x8,%eax
c010e763:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e766:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e769:	8b 40 04             	mov    0x4(%eax),%eax
c010e76c:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e76f:	81 7d f0 94 1f 15 c0 	cmpl   $0xc0151f94,-0x10(%ebp)
c010e776:	74 1a                	je     c010e792 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e778:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e77b:	83 e8 08             	sub    $0x8,%eax
c010e77e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e781:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e784:	8b 10                	mov    (%eax),%edx
c010e786:	8b 45 08             	mov    0x8(%ebp),%eax
c010e789:	8b 00                	mov    (%eax),%eax
c010e78b:	01 c2                	add    %eax,%edx
c010e78d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e790:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e792:	8b 45 08             	mov    0x8(%ebp),%eax
c010e795:	83 c0 08             	add    $0x8,%eax
c010e798:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e79b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e79e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e7a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e7a4:	8b 40 04             	mov    0x4(%eax),%eax
c010e7a7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e7aa:	8b 12                	mov    (%edx),%edx
c010e7ac:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e7af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e7b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e7b5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e7b8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e7bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e7be:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e7c1:	89 10                	mov    %edx,(%eax)
c010e7c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e7c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e7c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e7cc:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e7cf:	89 50 04             	mov    %edx,0x4(%eax)
c010e7d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e7d5:	8b 50 04             	mov    0x4(%eax),%edx
c010e7d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e7db:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e7dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7e0:	89 04 24             	mov    %eax,(%esp)
c010e7e3:	e8 b8 fb ff ff       	call   c010e3a0 <__intr_restore>
}
c010e7e8:	c9                   	leave  
c010e7e9:	c3                   	ret    

c010e7ea <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010e7ea:	55                   	push   %ebp
c010e7eb:	89 e5                	mov    %esp,%ebp
c010e7ed:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e7f0:	e8 81 fb ff ff       	call   c010e376 <__intr_save>
c010e7f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e7f8:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e7ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e802:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e805:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e808:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e80f:	0f 84 fb 00 00 00    	je     c010e910 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e815:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e818:	83 e8 08             	sub    $0x8,%eax
c010e81b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e81e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e821:	8b 00                	mov    (%eax),%eax
c010e823:	85 c0                	test   %eax,%eax
c010e825:	75 24                	jne    c010e84b <run_timer_list+0x61>
c010e827:	c7 44 24 0c fd 83 11 	movl   $0xc01183fd,0xc(%esp)
c010e82e:	c0 
c010e82f:	c7 44 24 08 68 83 11 	movl   $0xc0118368,0x8(%esp)
c010e836:	c0 
c010e837:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010e83e:	00 
c010e83f:	c7 04 24 7d 83 11 c0 	movl   $0xc011837d,(%esp)
c010e846:	e8 7d 26 ff ff       	call   c0100ec8 <__panic>
            timer->expires --;
c010e84b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e84e:	8b 00                	mov    (%eax),%eax
c010e850:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e853:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e856:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010e858:	e9 a6 00 00 00       	jmp    c010e903 <run_timer_list+0x119>
c010e85d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e860:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e863:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e866:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010e869:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010e86c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e86f:	8b 40 04             	mov    0x4(%eax),%eax
c010e872:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010e875:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e878:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e87e:	85 c0                	test   %eax,%eax
c010e880:	74 31                	je     c010e8b3 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010e882:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e885:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e88b:	85 c0                	test   %eax,%eax
c010e88d:	78 4a                	js     c010e8d9 <run_timer_list+0xef>
c010e88f:	c7 44 24 0c 14 84 11 	movl   $0xc0118414,0xc(%esp)
c010e896:	c0 
c010e897:	c7 44 24 08 68 83 11 	movl   $0xc0118368,0x8(%esp)
c010e89e:	c0 
c010e89f:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010e8a6:	00 
c010e8a7:	c7 04 24 7d 83 11 c0 	movl   $0xc011837d,(%esp)
c010e8ae:	e8 15 26 ff ff       	call   c0100ec8 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010e8b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8b6:	8b 40 04             	mov    0x4(%eax),%eax
c010e8b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e8bd:	c7 44 24 08 38 84 11 	movl   $0xc0118438,0x8(%esp)
c010e8c4:	c0 
c010e8c5:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c010e8cc:	00 
c010e8cd:	c7 04 24 7d 83 11 c0 	movl   $0xc011837d,(%esp)
c010e8d4:	e8 5b 26 ff ff       	call   c0100f34 <__warn>
                }
                wakeup_proc(proc);
c010e8d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8dc:	89 04 24             	mov    %eax,(%esp)
c010e8df:	e8 dd fb ff ff       	call   c010e4c1 <wakeup_proc>
                del_timer(timer);
c010e8e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8e7:	89 04 24             	mov    %eax,(%esp)
c010e8ea:	e8 37 fe ff ff       	call   c010e726 <del_timer>
                if (le == &timer_list) {
c010e8ef:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e8f6:	75 02                	jne    c010e8fa <run_timer_list+0x110>
                    break;
c010e8f8:	eb 16                	jmp    c010e910 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010e8fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e8fd:	83 e8 08             	sub    $0x8,%eax
c010e900:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010e903:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e906:	8b 00                	mov    (%eax),%eax
c010e908:	85 c0                	test   %eax,%eax
c010e90a:	0f 84 4d ff ff ff    	je     c010e85d <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010e910:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e915:	89 04 24             	mov    %eax,(%esp)
c010e918:	e8 ff fa ff ff       	call   c010e41c <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010e91d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e920:	89 04 24             	mov    %eax,(%esp)
c010e923:	e8 78 fa ff ff       	call   c010e3a0 <__intr_restore>
}
c010e928:	c9                   	leave  
c010e929:	c3                   	ret    

c010e92a <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010e92a:	55                   	push   %ebp
c010e92b:	89 e5                	mov    %esp,%ebp
c010e92d:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010e930:	8b 45 08             	mov    0x8(%ebp),%eax
c010e933:	8b 00                	mov    (%eax),%eax
c010e935:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010e938:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e93b:	89 04 24             	mov    %eax,(%esp)
c010e93e:	e8 ec e0 ff ff       	call   c010ca2f <do_exit>
}
c010e943:	c9                   	leave  
c010e944:	c3                   	ret    

c010e945 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010e945:	55                   	push   %ebp
c010e946:	89 e5                	mov    %esp,%ebp
c010e948:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010e94b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e950:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e953:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010e956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e959:	8b 40 44             	mov    0x44(%eax),%eax
c010e95c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010e95f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e962:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e966:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e969:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e96d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010e974:	e8 5d df ff ff       	call   c010c8d6 <do_fork>
}
c010e979:	c9                   	leave  
c010e97a:	c3                   	ret    

c010e97b <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010e97b:	55                   	push   %ebp
c010e97c:	89 e5                	mov    %esp,%ebp
c010e97e:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010e981:	8b 45 08             	mov    0x8(%ebp),%eax
c010e984:	8b 00                	mov    (%eax),%eax
c010e986:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010e989:	8b 45 08             	mov    0x8(%ebp),%eax
c010e98c:	83 c0 04             	add    $0x4,%eax
c010e98f:	8b 00                	mov    (%eax),%eax
c010e991:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010e994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e997:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e99b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e99e:	89 04 24             	mov    %eax,(%esp)
c010e9a1:	e8 d6 ee ff ff       	call   c010d87c <do_wait>
}
c010e9a6:	c9                   	leave  
c010e9a7:	c3                   	ret    

c010e9a8 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010e9a8:	55                   	push   %ebp
c010e9a9:	89 e5                	mov    %esp,%ebp
c010e9ab:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010e9ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9b1:	8b 00                	mov    (%eax),%eax
c010e9b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010e9b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9b9:	83 c0 04             	add    $0x4,%eax
c010e9bc:	8b 00                	mov    (%eax),%eax
c010e9be:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010e9c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9c4:	83 c0 08             	add    $0x8,%eax
c010e9c7:	8b 00                	mov    (%eax),%eax
c010e9c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010e9cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e9cf:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e9da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9dd:	89 04 24             	mov    %eax,(%esp)
c010e9e0:	e8 44 ec ff ff       	call   c010d629 <do_execve>
}
c010e9e5:	c9                   	leave  
c010e9e6:	c3                   	ret    

c010e9e7 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010e9e7:	55                   	push   %ebp
c010e9e8:	89 e5                	mov    %esp,%ebp
c010e9ea:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010e9ed:	e8 74 ee ff ff       	call   c010d866 <do_yield>
}
c010e9f2:	c9                   	leave  
c010e9f3:	c3                   	ret    

c010e9f4 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010e9f4:	55                   	push   %ebp
c010e9f5:	89 e5                	mov    %esp,%ebp
c010e9f7:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010e9fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9fd:	8b 00                	mov    (%eax),%eax
c010e9ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ea02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea05:	89 04 24             	mov    %eax,(%esp)
c010ea08:	e8 0f f0 ff ff       	call   c010da1c <do_kill>
}
c010ea0d:	c9                   	leave  
c010ea0e:	c3                   	ret    

c010ea0f <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ea0f:	55                   	push   %ebp
c010ea10:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ea12:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ea17:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ea1a:	5d                   	pop    %ebp
c010ea1b:	c3                   	ret    

c010ea1c <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ea1c:	55                   	push   %ebp
c010ea1d:	89 e5                	mov    %esp,%ebp
c010ea1f:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ea22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea25:	8b 00                	mov    (%eax),%eax
c010ea27:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ea2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea2d:	89 04 24             	mov    %eax,(%esp)
c010ea30:	e8 56 19 ff ff       	call   c010038b <cputchar>
    return 0;
c010ea35:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea3a:	c9                   	leave  
c010ea3b:	c3                   	ret    

c010ea3c <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ea3c:	55                   	push   %ebp
c010ea3d:	89 e5                	mov    %esp,%ebp
c010ea3f:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ea42:	e8 9e 81 ff ff       	call   c0106be5 <print_pgdir>
    return 0;
c010ea47:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea4c:	c9                   	leave  
c010ea4d:	c3                   	ret    

c010ea4e <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ea4e:	55                   	push   %ebp
c010ea4f:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ea51:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c010ea56:	5d                   	pop    %ebp
c010ea57:	c3                   	ret    

c010ea58 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010ea58:	55                   	push   %ebp
c010ea59:	89 e5                	mov    %esp,%ebp
c010ea5b:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ea5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea61:	8b 00                	mov    (%eax),%eax
c010ea63:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ea66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea69:	89 04 24             	mov    %eax,(%esp)
c010ea6c:	e8 b2 f4 ff ff       	call   c010df23 <lab6_set_priority>
    return 0;
c010ea71:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea76:	c9                   	leave  
c010ea77:	c3                   	ret    

c010ea78 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ea78:	55                   	push   %ebp
c010ea79:	89 e5                	mov    %esp,%ebp
c010ea7b:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ea7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea81:	8b 00                	mov    (%eax),%eax
c010ea83:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010ea86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea89:	89 04 24             	mov    %eax,(%esp)
c010ea8c:	e8 bc f4 ff ff       	call   c010df4d <do_sleep>
}
c010ea91:	c9                   	leave  
c010ea92:	c3                   	ret    

c010ea93 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ea93:	55                   	push   %ebp
c010ea94:	89 e5                	mov    %esp,%ebp
c010ea96:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010ea99:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea9c:	8b 00                	mov    (%eax),%eax
c010ea9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010eaa1:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaa4:	8b 40 04             	mov    0x4(%eax),%eax
c010eaa7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010eaaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eaad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eab4:	89 04 24             	mov    %eax,(%esp)
c010eab7:	e8 ef c9 ff ff       	call   c010b4ab <sysfile_open>
}
c010eabc:	c9                   	leave  
c010eabd:	c3                   	ret    

c010eabe <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010eabe:	55                   	push   %ebp
c010eabf:	89 e5                	mov    %esp,%ebp
c010eac1:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eac4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eac7:	8b 00                	mov    (%eax),%eax
c010eac9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010eacc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eacf:	89 04 24             	mov    %eax,(%esp)
c010ead2:	e8 1f ca ff ff       	call   c010b4f6 <sysfile_close>
}
c010ead7:	c9                   	leave  
c010ead8:	c3                   	ret    

c010ead9 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010ead9:	55                   	push   %ebp
c010eada:	89 e5                	mov    %esp,%ebp
c010eadc:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eadf:	8b 45 08             	mov    0x8(%ebp),%eax
c010eae2:	8b 00                	mov    (%eax),%eax
c010eae4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010eae7:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaea:	83 c0 04             	add    $0x4,%eax
c010eaed:	8b 00                	mov    (%eax),%eax
c010eaef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010eaf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaf5:	8b 40 08             	mov    0x8(%eax),%eax
c010eaf8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010eafb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eafe:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb05:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb0c:	89 04 24             	mov    %eax,(%esp)
c010eb0f:	e8 f5 c9 ff ff       	call   c010b509 <sysfile_read>
}
c010eb14:	c9                   	leave  
c010eb15:	c3                   	ret    

c010eb16 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010eb16:	55                   	push   %ebp
c010eb17:	89 e5                	mov    %esp,%ebp
c010eb19:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb1f:	8b 00                	mov    (%eax),%eax
c010eb21:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010eb24:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb27:	83 c0 04             	add    $0x4,%eax
c010eb2a:	8b 00                	mov    (%eax),%eax
c010eb2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010eb2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb32:	8b 40 08             	mov    0x8(%eax),%eax
c010eb35:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010eb38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb3b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb42:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb49:	89 04 24             	mov    %eax,(%esp)
c010eb4c:	e8 30 cb ff ff       	call   c010b681 <sysfile_write>
}
c010eb51:	c9                   	leave  
c010eb52:	c3                   	ret    

c010eb53 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010eb53:	55                   	push   %ebp
c010eb54:	89 e5                	mov    %esp,%ebp
c010eb56:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb59:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb5c:	8b 00                	mov    (%eax),%eax
c010eb5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010eb61:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb64:	83 c0 04             	add    $0x4,%eax
c010eb67:	8b 00                	mov    (%eax),%eax
c010eb69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010eb6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb6f:	83 c0 08             	add    $0x8,%eax
c010eb72:	8b 00                	mov    (%eax),%eax
c010eb74:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010eb77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb7a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb81:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb88:	89 04 24             	mov    %eax,(%esp)
c010eb8b:	e8 6b cc ff ff       	call   c010b7fb <sysfile_seek>
}
c010eb90:	c9                   	leave  
c010eb91:	c3                   	ret    

c010eb92 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010eb92:	55                   	push   %ebp
c010eb93:	89 e5                	mov    %esp,%ebp
c010eb95:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb98:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb9b:	8b 00                	mov    (%eax),%eax
c010eb9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010eba0:	8b 45 08             	mov    0x8(%ebp),%eax
c010eba3:	83 c0 04             	add    $0x4,%eax
c010eba6:	8b 00                	mov    (%eax),%eax
c010eba8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010ebab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebb5:	89 04 24             	mov    %eax,(%esp)
c010ebb8:	e8 5f cc ff ff       	call   c010b81c <sysfile_fstat>
}
c010ebbd:	c9                   	leave  
c010ebbe:	c3                   	ret    

c010ebbf <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010ebbf:	55                   	push   %ebp
c010ebc0:	89 e5                	mov    %esp,%ebp
c010ebc2:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ebc5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebc8:	8b 00                	mov    (%eax),%eax
c010ebca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010ebcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebd0:	89 04 24             	mov    %eax,(%esp)
c010ebd3:	e8 c2 cc ff ff       	call   c010b89a <sysfile_fsync>
}
c010ebd8:	c9                   	leave  
c010ebd9:	c3                   	ret    

c010ebda <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ebda:	55                   	push   %ebp
c010ebdb:	89 e5                	mov    %esp,%ebp
c010ebdd:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010ebe0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe3:	8b 00                	mov    (%eax),%eax
c010ebe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ebe8:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebeb:	8b 40 04             	mov    0x4(%eax),%eax
c010ebee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010ebf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebfb:	89 04 24             	mov    %eax,(%esp)
c010ebfe:	e8 34 ce ff ff       	call   c010ba37 <sysfile_getcwd>
}
c010ec03:	c9                   	leave  
c010ec04:	c3                   	ret    

c010ec05 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ec05:	55                   	push   %ebp
c010ec06:	89 e5                	mov    %esp,%ebp
c010ec08:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ec0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec0e:	8b 00                	mov    (%eax),%eax
c010ec10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ec13:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec16:	83 c0 04             	add    $0x4,%eax
c010ec19:	8b 00                	mov    (%eax),%eax
c010ec1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ec1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec21:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec28:	89 04 24             	mov    %eax,(%esp)
c010ec2b:	e8 9e ce ff ff       	call   c010bace <sysfile_getdirentry>
}
c010ec30:	c9                   	leave  
c010ec31:	c3                   	ret    

c010ec32 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ec32:	55                   	push   %ebp
c010ec33:	89 e5                	mov    %esp,%ebp
c010ec35:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ec38:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec3b:	8b 00                	mov    (%eax),%eax
c010ec3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010ec40:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec43:	83 c0 04             	add    $0x4,%eax
c010ec46:	8b 00                	mov    (%eax),%eax
c010ec48:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010ec4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec55:	89 04 24             	mov    %eax,(%esp)
c010ec58:	e8 65 cf ff ff       	call   c010bbc2 <sysfile_dup>
}
c010ec5d:	c9                   	leave  
c010ec5e:	c3                   	ret    

c010ec5f <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ec5f:	55                   	push   %ebp
c010ec60:	89 e5                	mov    %esp,%ebp
c010ec62:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010ec65:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ec6a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ec6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ec70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec73:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ec76:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ec79:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ec7d:	78 60                	js     c010ecdf <syscall+0x80>
c010ec7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec82:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ec87:	77 56                	ja     c010ecdf <syscall+0x80>
        if (syscalls[num] != NULL) {
c010ec89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec8c:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010ec93:	85 c0                	test   %eax,%eax
c010ec95:	74 48                	je     c010ecdf <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ec97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec9a:	8b 40 14             	mov    0x14(%eax),%eax
c010ec9d:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010eca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eca3:	8b 40 18             	mov    0x18(%eax),%eax
c010eca6:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010eca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecac:	8b 40 10             	mov    0x10(%eax),%eax
c010ecaf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ecb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecb5:	8b 00                	mov    (%eax),%eax
c010ecb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ecba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecbd:	8b 40 04             	mov    0x4(%eax),%eax
c010ecc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ecc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ecc6:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010eccd:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ecd0:	89 14 24             	mov    %edx,(%esp)
c010ecd3:	ff d0                	call   *%eax
c010ecd5:	89 c2                	mov    %eax,%edx
c010ecd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecda:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ecdd:	eb 46                	jmp    c010ed25 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ecdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ece2:	89 04 24             	mov    %eax,(%esp)
c010ece5:	e8 d8 37 ff ff       	call   c01024c2 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ecea:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ecef:	8d 50 48             	lea    0x48(%eax),%edx
c010ecf2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ecf7:	8b 40 04             	mov    0x4(%eax),%eax
c010ecfa:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ecfe:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ed02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed05:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ed09:	c7 44 24 08 58 84 11 	movl   $0xc0118458,0x8(%esp)
c010ed10:	c0 
c010ed11:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010ed18:	00 
c010ed19:	c7 04 24 84 84 11 c0 	movl   $0xc0118484,(%esp)
c010ed20:	e8 a3 21 ff ff       	call   c0100ec8 <__panic>
            num, current->pid, current->name);
}
c010ed25:	c9                   	leave  
c010ed26:	c3                   	ret    

c010ed27 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ed27:	55                   	push   %ebp
c010ed28:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ed2a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ed2d:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ed32:	29 c2                	sub    %eax,%edx
c010ed34:	89 d0                	mov    %edx,%eax
c010ed36:	c1 f8 05             	sar    $0x5,%eax
}
c010ed39:	5d                   	pop    %ebp
c010ed3a:	c3                   	ret    

c010ed3b <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ed3b:	55                   	push   %ebp
c010ed3c:	89 e5                	mov    %esp,%ebp
c010ed3e:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ed41:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed44:	89 04 24             	mov    %eax,(%esp)
c010ed47:	e8 db ff ff ff       	call   c010ed27 <page2ppn>
c010ed4c:	c1 e0 0c             	shl    $0xc,%eax
}
c010ed4f:	c9                   	leave  
c010ed50:	c3                   	ret    

c010ed51 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ed51:	55                   	push   %ebp
c010ed52:	89 e5                	mov    %esp,%ebp
c010ed54:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010ed57:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed5a:	89 04 24             	mov    %eax,(%esp)
c010ed5d:	e8 d9 ff ff ff       	call   c010ed3b <page2pa>
c010ed62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ed65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed68:	c1 e8 0c             	shr    $0xc,%eax
c010ed6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ed6e:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010ed73:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ed76:	72 23                	jb     c010ed9b <page2kva+0x4a>
c010ed78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ed7f:	c7 44 24 08 9c 84 11 	movl   $0xc011849c,0x8(%esp)
c010ed86:	c0 
c010ed87:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010ed8e:	00 
c010ed8f:	c7 04 24 bf 84 11 c0 	movl   $0xc01184bf,(%esp)
c010ed96:	e8 2d 21 ff ff       	call   c0100ec8 <__panic>
c010ed9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed9e:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010eda3:	c9                   	leave  
c010eda4:	c3                   	ret    

c010eda5 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010eda5:	55                   	push   %ebp
c010eda6:	89 e5                	mov    %esp,%ebp
c010eda8:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010edab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010edb2:	e8 6b 2e ff ff       	call   c0101c22 <ide_device_valid>
c010edb7:	85 c0                	test   %eax,%eax
c010edb9:	75 1c                	jne    c010edd7 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010edbb:	c7 44 24 08 cd 84 11 	movl   $0xc01184cd,0x8(%esp)
c010edc2:	c0 
c010edc3:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010edca:	00 
c010edcb:	c7 04 24 e7 84 11 c0 	movl   $0xc01184e7,(%esp)
c010edd2:	e8 f1 20 ff ff       	call   c0100ec8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010edd7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010edde:	e8 7e 2e ff ff       	call   c0101c61 <ide_device_size>
c010ede3:	c1 e8 03             	shr    $0x3,%eax
c010ede6:	a3 dc 30 15 c0       	mov    %eax,0xc01530dc
}
c010edeb:	c9                   	leave  
c010edec:	c3                   	ret    

c010eded <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010eded:	55                   	push   %ebp
c010edee:	89 e5                	mov    %esp,%ebp
c010edf0:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010edf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010edf6:	89 04 24             	mov    %eax,(%esp)
c010edf9:	e8 53 ff ff ff       	call   c010ed51 <page2kva>
c010edfe:	8b 55 08             	mov    0x8(%ebp),%edx
c010ee01:	c1 ea 08             	shr    $0x8,%edx
c010ee04:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ee07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee0b:	74 0b                	je     c010ee18 <swapfs_read+0x2b>
c010ee0d:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010ee13:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010ee16:	72 23                	jb     c010ee3b <swapfs_read+0x4e>
c010ee18:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ee1f:	c7 44 24 08 fd 84 11 	movl   $0xc01184fd,0x8(%esp)
c010ee26:	c0 
c010ee27:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010ee2e:	00 
c010ee2f:	c7 04 24 e7 84 11 c0 	movl   $0xc01184e7,(%esp)
c010ee36:	e8 8d 20 ff ff       	call   c0100ec8 <__panic>
c010ee3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ee3e:	c1 e2 03             	shl    $0x3,%edx
c010ee41:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010ee48:	00 
c010ee49:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ee4d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ee51:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ee58:	e8 43 2e ff ff       	call   c0101ca0 <ide_read_secs>
}
c010ee5d:	c9                   	leave  
c010ee5e:	c3                   	ret    

c010ee5f <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010ee5f:	55                   	push   %ebp
c010ee60:	89 e5                	mov    %esp,%ebp
c010ee62:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010ee65:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ee68:	89 04 24             	mov    %eax,(%esp)
c010ee6b:	e8 e1 fe ff ff       	call   c010ed51 <page2kva>
c010ee70:	8b 55 08             	mov    0x8(%ebp),%edx
c010ee73:	c1 ea 08             	shr    $0x8,%edx
c010ee76:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ee79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee7d:	74 0b                	je     c010ee8a <swapfs_write+0x2b>
c010ee7f:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010ee85:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010ee88:	72 23                	jb     c010eead <swapfs_write+0x4e>
c010ee8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee8d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ee91:	c7 44 24 08 fd 84 11 	movl   $0xc01184fd,0x8(%esp)
c010ee98:	c0 
c010ee99:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010eea0:	00 
c010eea1:	c7 04 24 e7 84 11 c0 	movl   $0xc01184e7,(%esp)
c010eea8:	e8 1b 20 ff ff       	call   c0100ec8 <__panic>
c010eead:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010eeb0:	c1 e2 03             	shl    $0x3,%edx
c010eeb3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010eeba:	00 
c010eebb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eebf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010eec3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010eeca:	e8 13 30 ff ff       	call   c0101ee2 <ide_write_secs>
}
c010eecf:	c9                   	leave  
c010eed0:	c3                   	ret    

c010eed1 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010eed1:	55                   	push   %ebp
c010eed2:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010eed4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eed7:	8b 40 30             	mov    0x30(%eax),%eax
}
c010eeda:	5d                   	pop    %ebp
c010eedb:	c3                   	ret    

c010eedc <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010eedc:	55                   	push   %ebp
c010eedd:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010eedf:	8b 45 08             	mov    0x8(%ebp),%eax
c010eee2:	8b 40 34             	mov    0x34(%eax),%eax
}
c010eee5:	5d                   	pop    %ebp
c010eee6:	c3                   	ret    

c010eee7 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010eee7:	55                   	push   %ebp
c010eee8:	89 e5                	mov    %esp,%ebp
c010eeea:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010eeed:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010eef4:	e8 61 5d ff ff       	call   c0104c5a <kmalloc>
c010eef9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eefc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef00:	74 09                	je     c010ef0b <__alloc_inode+0x24>
        node->in_type = type;
c010ef02:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef08:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010ef0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ef0e:	c9                   	leave  
c010ef0f:	c3                   	ret    

c010ef10 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010ef10:	55                   	push   %ebp
c010ef11:	89 e5                	mov    %esp,%ebp
c010ef13:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c010ef16:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef19:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010ef20:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef23:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010ef2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef2d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ef30:	89 50 3c             	mov    %edx,0x3c(%eax)
c010ef33:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef36:	8b 55 10             	mov    0x10(%ebp),%edx
c010ef39:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010ef3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef3f:	89 04 24             	mov    %eax,(%esp)
c010ef42:	e8 7b 00 00 00       	call   c010efc2 <inode_ref_inc>
}
c010ef47:	c9                   	leave  
c010ef48:	c3                   	ret    

c010ef49 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010ef49:	55                   	push   %ebp
c010ef4a:	89 e5                	mov    %esp,%ebp
c010ef4c:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c010ef4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef52:	89 04 24             	mov    %eax,(%esp)
c010ef55:	e8 77 ff ff ff       	call   c010eed1 <inode_ref_count>
c010ef5a:	85 c0                	test   %eax,%eax
c010ef5c:	74 24                	je     c010ef82 <inode_kill+0x39>
c010ef5e:	c7 44 24 0c 1c 85 11 	movl   $0xc011851c,0xc(%esp)
c010ef65:	c0 
c010ef66:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010ef6d:	c0 
c010ef6e:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c010ef75:	00 
c010ef76:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010ef7d:	e8 46 1f ff ff       	call   c0100ec8 <__panic>
    assert(inode_open_count(node) == 0);
c010ef82:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef85:	89 04 24             	mov    %eax,(%esp)
c010ef88:	e8 4f ff ff ff       	call   c010eedc <inode_open_count>
c010ef8d:	85 c0                	test   %eax,%eax
c010ef8f:	74 24                	je     c010efb5 <inode_kill+0x6c>
c010ef91:	c7 44 24 0c 60 85 11 	movl   $0xc0118560,0xc(%esp)
c010ef98:	c0 
c010ef99:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010efa0:	c0 
c010efa1:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c010efa8:	00 
c010efa9:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010efb0:	e8 13 1f ff ff       	call   c0100ec8 <__panic>
    kfree(node);
c010efb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010efb8:	89 04 24             	mov    %eax,(%esp)
c010efbb:	e8 b5 5c ff ff       	call   c0104c75 <kfree>
}
c010efc0:	c9                   	leave  
c010efc1:	c3                   	ret    

c010efc2 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010efc2:	55                   	push   %ebp
c010efc3:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010efc5:	8b 45 08             	mov    0x8(%ebp),%eax
c010efc8:	8b 40 30             	mov    0x30(%eax),%eax
c010efcb:	8d 50 01             	lea    0x1(%eax),%edx
c010efce:	8b 45 08             	mov    0x8(%ebp),%eax
c010efd1:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010efd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010efd7:	8b 40 30             	mov    0x30(%eax),%eax
}
c010efda:	5d                   	pop    %ebp
c010efdb:	c3                   	ret    

c010efdc <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010efdc:	55                   	push   %ebp
c010efdd:	89 e5                	mov    %esp,%ebp
c010efdf:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010efe2:	8b 45 08             	mov    0x8(%ebp),%eax
c010efe5:	89 04 24             	mov    %eax,(%esp)
c010efe8:	e8 e4 fe ff ff       	call   c010eed1 <inode_ref_count>
c010efed:	85 c0                	test   %eax,%eax
c010efef:	7f 24                	jg     c010f015 <inode_ref_dec+0x39>
c010eff1:	c7 44 24 0c 7c 85 11 	movl   $0xc011857c,0xc(%esp)
c010eff8:	c0 
c010eff9:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f000:	c0 
c010f001:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c010f008:	00 
c010f009:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f010:	e8 b3 1e ff ff       	call   c0100ec8 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f015:	8b 45 08             	mov    0x8(%ebp),%eax
c010f018:	8b 40 30             	mov    0x30(%eax),%eax
c010f01b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f01e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f021:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f024:	8b 45 08             	mov    0x8(%ebp),%eax
c010f027:	8b 40 30             	mov    0x30(%eax),%eax
c010f02a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f02d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f031:	0f 85 8d 00 00 00    	jne    c010f0c4 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f037:	8b 45 08             	mov    0x8(%ebp),%eax
c010f03a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f03d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f041:	74 17                	je     c010f05a <inode_ref_dec+0x7e>
c010f043:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f046:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f049:	85 c0                	test   %eax,%eax
c010f04b:	74 0d                	je     c010f05a <inode_ref_dec+0x7e>
c010f04d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f050:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f053:	8b 40 24             	mov    0x24(%eax),%eax
c010f056:	85 c0                	test   %eax,%eax
c010f058:	75 24                	jne    c010f07e <inode_ref_dec+0xa2>
c010f05a:	c7 44 24 0c 98 85 11 	movl   $0xc0118598,0xc(%esp)
c010f061:	c0 
c010f062:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f069:	c0 
c010f06a:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010f071:	00 
c010f072:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f079:	e8 4a 1e ff ff       	call   c0100ec8 <__panic>
c010f07e:	c7 44 24 04 e8 85 11 	movl   $0xc01185e8,0x4(%esp)
c010f085:	c0 
c010f086:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f089:	89 04 24             	mov    %eax,(%esp)
c010f08c:	e8 39 01 00 00       	call   c010f1ca <inode_check>
c010f091:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f094:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f097:	8b 40 24             	mov    0x24(%eax),%eax
c010f09a:	8b 55 08             	mov    0x8(%ebp),%edx
c010f09d:	89 14 24             	mov    %edx,(%esp)
c010f0a0:	ff d0                	call   *%eax
c010f0a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f0a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f0a9:	74 19                	je     c010f0c4 <inode_ref_dec+0xe8>
c010f0ab:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f0af:	74 13                	je     c010f0c4 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f0b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f0b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f0b8:	c7 04 24 f0 85 11 c0 	movl   $0xc01185f0,(%esp)
c010f0bf:	e8 a1 12 ff ff       	call   c0100365 <cprintf>
        }
    }
    return ref_count;
c010f0c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f0c7:	c9                   	leave  
c010f0c8:	c3                   	ret    

c010f0c9 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f0c9:	55                   	push   %ebp
c010f0ca:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f0cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0cf:	8b 40 34             	mov    0x34(%eax),%eax
c010f0d2:	8d 50 01             	lea    0x1(%eax),%edx
c010f0d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0d8:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f0db:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0de:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f0e1:	5d                   	pop    %ebp
c010f0e2:	c3                   	ret    

c010f0e3 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f0e3:	55                   	push   %ebp
c010f0e4:	89 e5                	mov    %esp,%ebp
c010f0e6:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f0e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0ec:	89 04 24             	mov    %eax,(%esp)
c010f0ef:	e8 e8 fd ff ff       	call   c010eedc <inode_open_count>
c010f0f4:	85 c0                	test   %eax,%eax
c010f0f6:	7f 24                	jg     c010f11c <inode_open_dec+0x39>
c010f0f8:	c7 44 24 0c 10 86 11 	movl   $0xc0118610,0xc(%esp)
c010f0ff:	c0 
c010f100:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f107:	c0 
c010f108:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010f10f:	00 
c010f110:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f117:	e8 ac 1d ff ff       	call   c0100ec8 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f11c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f11f:	8b 40 34             	mov    0x34(%eax),%eax
c010f122:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f125:	8b 45 08             	mov    0x8(%ebp),%eax
c010f128:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f12b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f12e:	8b 40 34             	mov    0x34(%eax),%eax
c010f131:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f134:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f138:	0f 85 87 00 00 00    	jne    c010f1c5 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f13e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f141:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f144:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f148:	74 17                	je     c010f161 <inode_open_dec+0x7e>
c010f14a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f14d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f150:	85 c0                	test   %eax,%eax
c010f152:	74 0d                	je     c010f161 <inode_open_dec+0x7e>
c010f154:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f157:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f15a:	8b 40 08             	mov    0x8(%eax),%eax
c010f15d:	85 c0                	test   %eax,%eax
c010f15f:	75 24                	jne    c010f185 <inode_open_dec+0xa2>
c010f161:	c7 44 24 0c 2c 86 11 	movl   $0xc011862c,0xc(%esp)
c010f168:	c0 
c010f169:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f170:	c0 
c010f171:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010f178:	00 
c010f179:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f180:	e8 43 1d ff ff       	call   c0100ec8 <__panic>
c010f185:	c7 44 24 04 7a 86 11 	movl   $0xc011867a,0x4(%esp)
c010f18c:	c0 
c010f18d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f190:	89 04 24             	mov    %eax,(%esp)
c010f193:	e8 32 00 00 00       	call   c010f1ca <inode_check>
c010f198:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f19b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f19e:	8b 40 08             	mov    0x8(%eax),%eax
c010f1a1:	8b 55 08             	mov    0x8(%ebp),%edx
c010f1a4:	89 14 24             	mov    %edx,(%esp)
c010f1a7:	ff d0                	call   *%eax
c010f1a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f1ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f1b0:	74 13                	je     c010f1c5 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f1b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f1b9:	c7 04 24 80 86 11 c0 	movl   $0xc0118680,(%esp)
c010f1c0:	e8 a0 11 ff ff       	call   c0100365 <cprintf>
        }
    }
    return open_count;
c010f1c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f1c8:	c9                   	leave  
c010f1c9:	c3                   	ret    

c010f1ca <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f1ca:	55                   	push   %ebp
c010f1cb:	89 e5                	mov    %esp,%ebp
c010f1cd:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f1d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f1d4:	74 0a                	je     c010f1e0 <inode_check+0x16>
c010f1d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1d9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1dc:	85 c0                	test   %eax,%eax
c010f1de:	75 24                	jne    c010f204 <inode_check+0x3a>
c010f1e0:	c7 44 24 0c a0 86 11 	movl   $0xc01186a0,0xc(%esp)
c010f1e7:	c0 
c010f1e8:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f1ef:	c0 
c010f1f0:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010f1f7:	00 
c010f1f8:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f1ff:	e8 c4 1c ff ff       	call   c0100ec8 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f204:	8b 45 08             	mov    0x8(%ebp),%eax
c010f207:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f20a:	8b 00                	mov    (%eax),%eax
c010f20c:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f211:	74 24                	je     c010f237 <inode_check+0x6d>
c010f213:	c7 44 24 0c c8 86 11 	movl   $0xc01186c8,0xc(%esp)
c010f21a:	c0 
c010f21b:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f222:	c0 
c010f223:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010f22a:	00 
c010f22b:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f232:	e8 91 1c ff ff       	call   c0100ec8 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f237:	8b 45 08             	mov    0x8(%ebp),%eax
c010f23a:	89 04 24             	mov    %eax,(%esp)
c010f23d:	e8 8f fc ff ff       	call   c010eed1 <inode_ref_count>
c010f242:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f245:	8b 45 08             	mov    0x8(%ebp),%eax
c010f248:	89 04 24             	mov    %eax,(%esp)
c010f24b:	e8 8c fc ff ff       	call   c010eedc <inode_open_count>
c010f250:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f253:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f256:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f259:	7c 06                	jl     c010f261 <inode_check+0x97>
c010f25b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f25f:	79 24                	jns    c010f285 <inode_check+0xbb>
c010f261:	c7 44 24 0c f0 86 11 	movl   $0xc01186f0,0xc(%esp)
c010f268:	c0 
c010f269:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f270:	c0 
c010f271:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f278:	00 
c010f279:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f280:	e8 43 1c ff ff       	call   c0100ec8 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f285:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f28c:	7f 09                	jg     c010f297 <inode_check+0xcd>
c010f28e:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f295:	7e 24                	jle    c010f2bb <inode_check+0xf1>
c010f297:	c7 44 24 0c 1c 87 11 	movl   $0xc011871c,0xc(%esp)
c010f29e:	c0 
c010f29f:	c7 44 24 08 37 85 11 	movl   $0xc0118537,0x8(%esp)
c010f2a6:	c0 
c010f2a7:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010f2ae:	00 
c010f2af:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010f2b6:	e8 0d 1c ff ff       	call   c0100ec8 <__panic>
}
c010f2bb:	c9                   	leave  
c010f2bc:	c3                   	ret    

c010f2bd <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f2bd:	55                   	push   %ebp
c010f2be:	89 e5                	mov    %esp,%ebp
c010f2c0:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f2c3:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f2ca:	e8 8b 59 ff ff       	call   c0104c5a <kmalloc>
c010f2cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f2d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f2d6:	74 09                	je     c010f2e1 <__alloc_fs+0x24>
        fs->fs_type = type;
c010f2d8:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f2de:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f2e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f2e4:	c9                   	leave  
c010f2e5:	c3                   	ret    

c010f2e6 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f2e6:	55                   	push   %ebp
c010f2e7:	89 e5                	mov    %esp,%ebp
c010f2e9:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f2ec:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f2f3:	00 
c010f2f4:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f2fb:	e8 39 a7 ff ff       	call   c0109a39 <sem_init>
    vfs_devlist_init();
c010f300:	e8 63 01 00 00       	call   c010f468 <vfs_devlist_init>
}
c010f305:	c9                   	leave  
c010f306:	c3                   	ret    

c010f307 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f307:	55                   	push   %ebp
c010f308:	89 e5                	mov    %esp,%ebp
c010f30a:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f30d:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f314:	e8 ae a8 ff ff       	call   c0109bc7 <down>
}
c010f319:	c9                   	leave  
c010f31a:	c3                   	ret    

c010f31b <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f31b:	55                   	push   %ebp
c010f31c:	89 e5                	mov    %esp,%ebp
c010f31e:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f321:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f328:	e8 7f a8 ff ff       	call   c0109bac <up>
}
c010f32d:	c9                   	leave  
c010f32e:	c3                   	ret    

c010f32f <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f32f:	55                   	push   %ebp
c010f330:	89 e5                	mov    %esp,%ebp
c010f332:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f335:	e8 cd ff ff ff       	call   c010f307 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f33a:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f33f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f342:	8b 45 08             	mov    0x8(%ebp),%eax
c010f345:	a3 c4 1f 15 c0       	mov    %eax,0xc0151fc4
    }
    unlock_bootfs();
c010f34a:	e8 cc ff ff ff       	call   c010f31b <unlock_bootfs>
    if (old != NULL) {
c010f34f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f353:	74 0b                	je     c010f360 <change_bootfs+0x31>
        vop_ref_dec(old);
c010f355:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f358:	89 04 24             	mov    %eax,(%esp)
c010f35b:	e8 7c fc ff ff       	call   c010efdc <inode_ref_dec>
    }
}
c010f360:	c9                   	leave  
c010f361:	c3                   	ret    

c010f362 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f362:	55                   	push   %ebp
c010f363:	89 e5                	mov    %esp,%ebp
c010f365:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f368:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f36f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f373:	74 62                	je     c010f3d7 <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f375:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f37c:	00 
c010f37d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f380:	89 04 24             	mov    %eax,(%esp)
c010f383:	e8 eb 5e 00 00       	call   c0115273 <strchr>
c010f388:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f38b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f38f:	74 0d                	je     c010f39e <vfs_set_bootfs+0x3c>
c010f391:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f394:	83 c0 01             	add    $0x1,%eax
c010f397:	0f b6 00             	movzbl (%eax),%eax
c010f39a:	84 c0                	test   %al,%al
c010f39c:	74 07                	je     c010f3a5 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f39e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f3a3:	eb 42                	jmp    c010f3e7 <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f3a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3a8:	89 04 24             	mov    %eax,(%esp)
c010f3ab:	e8 99 10 00 00       	call   c0110449 <vfs_chdir>
c010f3b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f3b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f3b7:	74 05                	je     c010f3be <vfs_set_bootfs+0x5c>
            return ret;
c010f3b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3bc:	eb 29                	jmp    c010f3e7 <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f3be:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f3c1:	89 04 24             	mov    %eax,(%esp)
c010f3c4:	e8 54 0f 00 00       	call   c011031d <vfs_get_curdir>
c010f3c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f3cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f3d0:	74 05                	je     c010f3d7 <vfs_set_bootfs+0x75>
            return ret;
c010f3d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3d5:	eb 10                	jmp    c010f3e7 <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f3d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3da:	89 04 24             	mov    %eax,(%esp)
c010f3dd:	e8 4d ff ff ff       	call   c010f32f <change_bootfs>
    return 0;
c010f3e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f3e7:	c9                   	leave  
c010f3e8:	c3                   	ret    

c010f3e9 <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f3e9:	55                   	push   %ebp
c010f3ea:	89 e5                	mov    %esp,%ebp
c010f3ec:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f3ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f3f6:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f3fb:	85 c0                	test   %eax,%eax
c010f3fd:	74 25                	je     c010f424 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f3ff:	e8 03 ff ff ff       	call   c010f307 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f404:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f409:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f40c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f410:	74 0d                	je     c010f41f <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f412:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f417:	89 04 24             	mov    %eax,(%esp)
c010f41a:	e8 a3 fb ff ff       	call   c010efc2 <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f41f:	e8 f7 fe ff ff       	call   c010f31b <unlock_bootfs>
    }
    if (node == NULL) {
c010f424:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f428:	75 07                	jne    c010f431 <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f42a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f42f:	eb 0d                	jmp    c010f43e <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f431:	8b 45 08             	mov    0x8(%ebp),%eax
c010f434:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f437:	89 10                	mov    %edx,(%eax)
    return 0;
c010f439:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f43e:	c9                   	leave  
c010f43f:	c3                   	ret    

c010f440 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f440:	55                   	push   %ebp
c010f441:	89 e5                	mov    %esp,%ebp
c010f443:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f446:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f44d:	e8 75 a7 ff ff       	call   c0109bc7 <down>
}
c010f452:	c9                   	leave  
c010f453:	c3                   	ret    

c010f454 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f454:	55                   	push   %ebp
c010f455:	89 e5                	mov    %esp,%ebp
c010f457:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f45a:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f461:	e8 46 a7 ff ff       	call   c0109bac <up>
}
c010f466:	c9                   	leave  
c010f467:	c3                   	ret    

c010f468 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f468:	55                   	push   %ebp
c010f469:	89 e5                	mov    %esp,%ebp
c010f46b:	83 ec 28             	sub    $0x28,%esp
c010f46e:	c7 45 f4 c8 1f 15 c0 	movl   $0xc0151fc8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f475:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f478:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f47b:	89 50 04             	mov    %edx,0x4(%eax)
c010f47e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f481:	8b 50 04             	mov    0x4(%eax),%edx
c010f484:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f487:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f489:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f490:	00 
c010f491:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f498:	e8 9c a5 ff ff       	call   c0109a39 <sem_init>
}
c010f49d:	c9                   	leave  
c010f49e:	c3                   	ret    

c010f49f <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f49f:	55                   	push   %ebp
c010f4a0:	89 e5                	mov    %esp,%ebp
c010f4a2:	83 ec 38             	sub    $0x38,%esp
c010f4a5:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f4ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f4af:	8b 40 04             	mov    0x4(%eax),%eax
c010f4b2:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f4b5:	0f 94 c0             	sete   %al
c010f4b8:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f4bb:	85 c0                	test   %eax,%eax
c010f4bd:	75 57                	jne    c010f516 <vfs_cleanup+0x77>
        lock_vdev_list();
c010f4bf:	e8 7c ff ff ff       	call   c010f440 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f4c4:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f4cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f4d1:	eb 27                	jmp    c010f4fa <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f4d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4d6:	83 e8 10             	sub    $0x10,%eax
c010f4d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f4dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4df:	8b 40 08             	mov    0x8(%eax),%eax
c010f4e2:	85 c0                	test   %eax,%eax
c010f4e4:	74 14                	je     c010f4fa <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f4e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4e9:	8b 40 08             	mov    0x8(%eax),%eax
c010f4ec:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f4ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f4f2:	8b 52 08             	mov    0x8(%edx),%edx
c010f4f5:	89 14 24             	mov    %edx,(%esp)
c010f4f8:	ff d0                	call   *%eax
c010f4fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f500:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f503:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f506:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f50c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f50f:	75 c2                	jne    c010f4d3 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f511:	e8 3e ff ff ff       	call   c010f454 <unlock_vdev_list>
    }
}
c010f516:	c9                   	leave  
c010f517:	c3                   	ret    

c010f518 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f518:	55                   	push   %ebp
c010f519:	89 e5                	mov    %esp,%ebp
c010f51b:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f51e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f522:	75 24                	jne    c010f548 <vfs_get_root+0x30>
c010f524:	c7 44 24 0c 58 87 11 	movl   $0xc0118758,0xc(%esp)
c010f52b:	c0 
c010f52c:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010f533:	c0 
c010f534:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f53b:	00 
c010f53c:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010f543:	e8 80 19 ff ff       	call   c0100ec8 <__panic>
    int ret = -E_NO_DEV;
c010f548:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f54f:	c7 45 e0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f556:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f559:	8b 40 04             	mov    0x4(%eax),%eax
c010f55c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f55f:	0f 94 c0             	sete   %al
c010f562:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f565:	85 c0                	test   %eax,%eax
c010f567:	0f 85 c3 00 00 00    	jne    c010f630 <vfs_get_root+0x118>
        lock_vdev_list();
c010f56d:	e8 ce fe ff ff       	call   c010f440 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f572:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f579:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f57c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f57f:	e9 8c 00 00 00       	jmp    c010f610 <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f584:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f587:	83 e8 10             	sub    $0x10,%eax
c010f58a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f58d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f590:	8b 00                	mov    (%eax),%eax
c010f592:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f596:	8b 45 08             	mov    0x8(%ebp),%eax
c010f599:	89 04 24             	mov    %eax,(%esp)
c010f59c:	e8 33 5c 00 00       	call   c01151d4 <strcmp>
c010f5a1:	85 c0                	test   %eax,%eax
c010f5a3:	75 6b                	jne    c010f610 <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f5a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f5ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5af:	8b 40 08             	mov    0x8(%eax),%eax
c010f5b2:	85 c0                	test   %eax,%eax
c010f5b4:	74 19                	je     c010f5cf <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f5b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5b9:	8b 40 08             	mov    0x8(%eax),%eax
c010f5bc:	8b 40 74             	mov    0x74(%eax),%eax
c010f5bf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f5c2:	8b 52 08             	mov    0x8(%edx),%edx
c010f5c5:	89 14 24             	mov    %edx,(%esp)
c010f5c8:	ff d0                	call   *%eax
c010f5ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f5cd:	eb 21                	jmp    c010f5f0 <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f5cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5d2:	8b 40 0c             	mov    0xc(%eax),%eax
c010f5d5:	85 c0                	test   %eax,%eax
c010f5d7:	75 17                	jne    c010f5f0 <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f5d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5dc:	8b 40 04             	mov    0x4(%eax),%eax
c010f5df:	89 04 24             	mov    %eax,(%esp)
c010f5e2:	e8 db f9 ff ff       	call   c010efc2 <inode_ref_inc>
                        found = vdev->devnode;
c010f5e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5ea:	8b 40 04             	mov    0x4(%eax),%eax
c010f5ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f5f0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f5f4:	74 11                	je     c010f607 <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f5f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f5fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f600:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f603:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f605:	eb 24                	jmp    c010f62b <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f607:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f60e:	eb 1b                	jmp    c010f62b <vfs_get_root+0x113>
c010f610:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f613:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f616:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f619:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f61c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f61f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f622:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f625:	0f 85 59 ff ff ff    	jne    c010f584 <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f62b:	e8 24 fe ff ff       	call   c010f454 <unlock_vdev_list>
    }
    return ret;
c010f630:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f633:	c9                   	leave  
c010f634:	c3                   	ret    

c010f635 <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f635:	55                   	push   %ebp
c010f636:	89 e5                	mov    %esp,%ebp
c010f638:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f63b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f63f:	75 24                	jne    c010f665 <vfs_get_devname+0x30>
c010f641:	c7 44 24 0c 92 87 11 	movl   $0xc0118792,0xc(%esp)
c010f648:	c0 
c010f649:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010f650:	c0 
c010f651:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f658:	00 
c010f659:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010f660:	e8 63 18 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f665:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f66c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f66f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f672:	eb 1b                	jmp    c010f68f <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f674:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f677:	83 e8 10             	sub    $0x10,%eax
c010f67a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f67d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f680:	8b 40 08             	mov    0x8(%eax),%eax
c010f683:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f686:	75 07                	jne    c010f68f <vfs_get_devname+0x5a>
            return vdev->devname;
c010f688:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f68b:	8b 00                	mov    (%eax),%eax
c010f68d:	eb 1c                	jmp    c010f6ab <vfs_get_devname+0x76>
c010f68f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f692:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f695:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f698:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f69b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f69e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f6a4:	75 ce                	jne    c010f674 <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f6a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f6ab:	c9                   	leave  
c010f6ac:	c3                   	ret    

c010f6ad <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f6ad:	55                   	push   %ebp
c010f6ae:	89 e5                	mov    %esp,%ebp
c010f6b0:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f6b3:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f6ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f6c0:	eb 28                	jmp    c010f6ea <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f6c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6c5:	83 e8 10             	sub    $0x10,%eax
c010f6c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f6cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6ce:	8b 00                	mov    (%eax),%eax
c010f6d0:	8b 55 08             	mov    0x8(%ebp),%edx
c010f6d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f6d7:	89 04 24             	mov    %eax,(%esp)
c010f6da:	e8 f5 5a 00 00       	call   c01151d4 <strcmp>
c010f6df:	85 c0                	test   %eax,%eax
c010f6e1:	75 07                	jne    c010f6ea <check_devname_conflict+0x3d>
            return 0;
c010f6e3:	b8 00 00 00 00       	mov    $0x0,%eax
c010f6e8:	eb 1c                	jmp    c010f706 <check_devname_conflict+0x59>
c010f6ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f6f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6f3:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f6f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f6f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f6ff:	75 c1                	jne    c010f6c2 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f701:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f706:	c9                   	leave  
c010f707:	c3                   	ret    

c010f708 <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f708:	55                   	push   %ebp
c010f709:	89 e5                	mov    %esp,%ebp
c010f70b:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f70e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f712:	75 24                	jne    c010f738 <vfs_do_add+0x30>
c010f714:	c7 44 24 0c 58 87 11 	movl   $0xc0118758,0xc(%esp)
c010f71b:	c0 
c010f71c:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010f723:	c0 
c010f724:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f72b:	00 
c010f72c:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010f733:	e8 90 17 ff ff       	call   c0100ec8 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f738:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f73c:	75 06                	jne    c010f744 <vfs_do_add+0x3c>
c010f73e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f742:	74 37                	je     c010f77b <vfs_do_add+0x73>
c010f744:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f748:	74 0d                	je     c010f757 <vfs_do_add+0x4f>
c010f74a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f74d:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f750:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f755:	74 24                	je     c010f77b <vfs_do_add+0x73>
c010f757:	c7 44 24 0c a0 87 11 	movl   $0xc01187a0,0xc(%esp)
c010f75e:	c0 
c010f75f:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010f766:	c0 
c010f767:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010f76e:	00 
c010f76f:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010f776:	e8 4d 17 ff ff       	call   c0100ec8 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f77b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f77e:	89 04 24             	mov    %eax,(%esp)
c010f781:	e8 56 59 00 00       	call   c01150dc <strlen>
c010f786:	83 f8 1f             	cmp    $0x1f,%eax
c010f789:	76 0a                	jbe    c010f795 <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010f78b:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f790:	e9 00 01 00 00       	jmp    c010f895 <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010f795:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f79c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f79f:	89 04 24             	mov    %eax,(%esp)
c010f7a2:	e8 5f 0c ff ff       	call   c0100406 <strdup>
c010f7a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f7aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f7ae:	75 08                	jne    c010f7b8 <vfs_do_add+0xb0>
        return ret;
c010f7b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f7b3:	e9 dd 00 00 00       	jmp    c010f895 <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010f7b8:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010f7bf:	e8 96 54 ff ff       	call   c0104c5a <kmalloc>
c010f7c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f7c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f7cb:	75 05                	jne    c010f7d2 <vfs_do_add+0xca>
        goto failed_cleanup_name;
c010f7cd:	e9 b5 00 00 00       	jmp    c010f887 <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c010f7d2:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010f7d9:	e8 62 fc ff ff       	call   c010f440 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010f7de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7e1:	89 04 24             	mov    %eax,(%esp)
c010f7e4:	e8 c4 fe ff ff       	call   c010f6ad <check_devname_conflict>
c010f7e9:	85 c0                	test   %eax,%eax
c010f7eb:	75 16                	jne    c010f803 <vfs_do_add+0xfb>
        unlock_vdev_list();
c010f7ed:	e8 62 fc ff ff       	call   c010f454 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010f7f2:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010f7f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7f6:	89 04 24             	mov    %eax,(%esp)
c010f7f9:	e8 77 54 ff ff       	call   c0104c75 <kfree>
c010f7fe:	e9 84 00 00 00       	jmp    c010f887 <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010f803:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f806:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f809:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010f80b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f80e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f811:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010f814:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f817:	8b 55 14             	mov    0x14(%ebp),%edx
c010f81a:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010f81d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f820:	8b 55 10             	mov    0x10(%ebp),%edx
c010f823:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010f826:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f829:	83 c0 10             	add    $0x10,%eax
c010f82c:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f833:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f836:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f839:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f83c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f83f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f842:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f845:	8b 40 04             	mov    0x4(%eax),%eax
c010f848:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f84b:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010f84e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f851:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010f854:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f857:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f85a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f85d:	89 10                	mov    %edx,(%eax)
c010f85f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f862:	8b 10                	mov    (%eax),%edx
c010f864:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f867:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f86a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f86d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f870:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f873:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f876:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010f879:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010f87b:	e8 d4 fb ff ff       	call   c010f454 <unlock_vdev_list>
    return 0;
c010f880:	b8 00 00 00 00       	mov    $0x0,%eax
c010f885:	eb 0e                	jmp    c010f895 <vfs_do_add+0x18d>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010f887:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f88a:	89 04 24             	mov    %eax,(%esp)
c010f88d:	e8 e3 53 ff ff       	call   c0104c75 <kfree>
    return ret;
c010f892:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f895:	c9                   	leave  
c010f896:	c3                   	ret    

c010f897 <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010f897:	55                   	push   %ebp
c010f898:	89 e5                	mov    %esp,%ebp
c010f89a:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010f89d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010f8a4:	00 
c010f8a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f8ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010f8b3:	00 
c010f8b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8b7:	89 04 24             	mov    %eax,(%esp)
c010f8ba:	e8 49 fe ff ff       	call   c010f708 <vfs_do_add>
}
c010f8bf:	c9                   	leave  
c010f8c0:	c3                   	ret    

c010f8c1 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010f8c1:	55                   	push   %ebp
c010f8c2:	89 e5                	mov    %esp,%ebp
c010f8c4:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010f8c7:	8b 45 10             	mov    0x10(%ebp),%eax
c010f8ca:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f8ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010f8d5:	00 
c010f8d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f8dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8e0:	89 04 24             	mov    %eax,(%esp)
c010f8e3:	e8 20 fe ff ff       	call   c010f708 <vfs_do_add>
}
c010f8e8:	c9                   	leave  
c010f8e9:	c3                   	ret    

c010f8ea <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010f8ea:	55                   	push   %ebp
c010f8eb:	89 e5                	mov    %esp,%ebp
c010f8ed:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010f8f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f8f4:	75 24                	jne    c010f91a <find_mount+0x30>
c010f8f6:	c7 44 24 0c 58 87 11 	movl   $0xc0118758,0xc(%esp)
c010f8fd:	c0 
c010f8fe:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010f905:	c0 
c010f906:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010f90d:	00 
c010f90e:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010f915:	e8 ae 15 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f91a:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f921:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f924:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f927:	eb 3a                	jmp    c010f963 <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f929:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f92c:	83 e8 10             	sub    $0x10,%eax
c010f92f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010f932:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f935:	8b 40 0c             	mov    0xc(%eax),%eax
c010f938:	85 c0                	test   %eax,%eax
c010f93a:	74 27                	je     c010f963 <find_mount+0x79>
c010f93c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f93f:	8b 00                	mov    (%eax),%eax
c010f941:	8b 55 08             	mov    0x8(%ebp),%edx
c010f944:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f948:	89 04 24             	mov    %eax,(%esp)
c010f94b:	e8 84 58 00 00       	call   c01151d4 <strcmp>
c010f950:	85 c0                	test   %eax,%eax
c010f952:	75 0f                	jne    c010f963 <find_mount+0x79>
            *vdev_store = vdev;
c010f954:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f957:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f95a:	89 10                	mov    %edx,(%eax)
            return 0;
c010f95c:	b8 00 00 00 00       	mov    $0x0,%eax
c010f961:	eb 1c                	jmp    c010f97f <find_mount+0x95>
c010f963:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f966:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f969:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f96c:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f96f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f972:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f975:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f978:	75 af                	jne    c010f929 <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010f97a:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010f97f:	c9                   	leave  
c010f980:	c3                   	ret    

c010f981 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010f981:	55                   	push   %ebp
c010f982:	89 e5                	mov    %esp,%ebp
c010f984:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010f987:	e8 b4 fa ff ff       	call   c010f440 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010f98c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f98f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f993:	8b 45 08             	mov    0x8(%ebp),%eax
c010f996:	89 04 24             	mov    %eax,(%esp)
c010f999:	e8 4c ff ff ff       	call   c010f8ea <find_mount>
c010f99e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f9a5:	74 05                	je     c010f9ac <vfs_mount+0x2b>
        goto out;
c010f9a7:	e9 f4 00 00 00       	jmp    c010faa0 <vfs_mount+0x11f>
    }
    if (vdev->fs != NULL) {
c010f9ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9af:	8b 40 08             	mov    0x8(%eax),%eax
c010f9b2:	85 c0                	test   %eax,%eax
c010f9b4:	74 0c                	je     c010f9c2 <vfs_mount+0x41>
        ret = -E_BUSY;
c010f9b6:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010f9bd:	e9 de 00 00 00       	jmp    c010faa0 <vfs_mount+0x11f>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010f9c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9c5:	8b 00                	mov    (%eax),%eax
c010f9c7:	85 c0                	test   %eax,%eax
c010f9c9:	74 0a                	je     c010f9d5 <vfs_mount+0x54>
c010f9cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9ce:	8b 40 0c             	mov    0xc(%eax),%eax
c010f9d1:	85 c0                	test   %eax,%eax
c010f9d3:	75 24                	jne    c010f9f9 <vfs_mount+0x78>
c010f9d5:	c7 44 24 0c fc 87 11 	movl   $0xc01187fc,0xc(%esp)
c010f9dc:	c0 
c010f9dd:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010f9e4:	c0 
c010f9e5:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010f9ec:	00 
c010f9ed:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010f9f4:	e8 cf 14 ff ff       	call   c0100ec8 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010f9f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9fc:	8b 40 04             	mov    0x4(%eax),%eax
c010f9ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa02:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa06:	74 0d                	je     c010fa15 <vfs_mount+0x94>
c010fa08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa0b:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fa0e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fa13:	74 24                	je     c010fa39 <vfs_mount+0xb8>
c010fa15:	c7 44 24 0c 28 88 11 	movl   $0xc0118828,0xc(%esp)
c010fa1c:	c0 
c010fa1d:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010fa24:	c0 
c010fa25:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010fa2c:	00 
c010fa2d:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010fa34:	e8 8f 14 ff ff       	call   c0100ec8 <__panic>
c010fa39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fa3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa42:	83 c0 08             	add    $0x8,%eax
c010fa45:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa4c:	89 04 24             	mov    %eax,(%esp)
c010fa4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa52:	ff d0                	call   *%eax
c010fa54:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fa57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa5b:	75 43                	jne    c010faa0 <vfs_mount+0x11f>
        assert(vdev->fs != NULL);
c010fa5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa60:	8b 40 08             	mov    0x8(%eax),%eax
c010fa63:	85 c0                	test   %eax,%eax
c010fa65:	75 24                	jne    c010fa8b <vfs_mount+0x10a>
c010fa67:	c7 44 24 0c 5b 88 11 	movl   $0xc011885b,0xc(%esp)
c010fa6e:	c0 
c010fa6f:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010fa76:	c0 
c010fa77:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010fa7e:	00 
c010fa7f:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010fa86:	e8 3d 14 ff ff       	call   c0100ec8 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010fa8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa8e:	8b 00                	mov    (%eax),%eax
c010fa90:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa94:	c7 04 24 6c 88 11 c0 	movl   $0xc011886c,(%esp)
c010fa9b:	e8 c5 08 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010faa0:	e8 af f9 ff ff       	call   c010f454 <unlock_vdev_list>
    return ret;
c010faa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010faa8:	c9                   	leave  
c010faa9:	c3                   	ret    

c010faaa <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010faaa:	55                   	push   %ebp
c010faab:	89 e5                	mov    %esp,%ebp
c010faad:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010fab0:	e8 8b f9 ff ff       	call   c010f440 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fab5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fab8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fabc:	8b 45 08             	mov    0x8(%ebp),%eax
c010fabf:	89 04 24             	mov    %eax,(%esp)
c010fac2:	e8 23 fe ff ff       	call   c010f8ea <find_mount>
c010fac7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010faca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010face:	74 05                	je     c010fad5 <vfs_unmount+0x2b>
        goto out;
c010fad0:	e9 a8 00 00 00       	jmp    c010fb7d <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c010fad5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fad8:	8b 40 08             	mov    0x8(%eax),%eax
c010fadb:	85 c0                	test   %eax,%eax
c010fadd:	75 0c                	jne    c010faeb <vfs_unmount+0x41>
        ret = -E_INVAL;
c010fadf:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fae6:	e9 92 00 00 00       	jmp    c010fb7d <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010faeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010faee:	8b 00                	mov    (%eax),%eax
c010faf0:	85 c0                	test   %eax,%eax
c010faf2:	74 0a                	je     c010fafe <vfs_unmount+0x54>
c010faf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010faf7:	8b 40 0c             	mov    0xc(%eax),%eax
c010fafa:	85 c0                	test   %eax,%eax
c010fafc:	75 24                	jne    c010fb22 <vfs_unmount+0x78>
c010fafe:	c7 44 24 0c fc 87 11 	movl   $0xc01187fc,0xc(%esp)
c010fb05:	c0 
c010fb06:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010fb0d:	c0 
c010fb0e:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010fb15:	00 
c010fb16:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010fb1d:	e8 a6 13 ff ff       	call   c0100ec8 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fb22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb25:	8b 40 08             	mov    0x8(%eax),%eax
c010fb28:	8b 40 70             	mov    0x70(%eax),%eax
c010fb2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fb2e:	8b 52 08             	mov    0x8(%edx),%edx
c010fb31:	89 14 24             	mov    %edx,(%esp)
c010fb34:	ff d0                	call   *%eax
c010fb36:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb3d:	74 02                	je     c010fb41 <vfs_unmount+0x97>
        goto out;
c010fb3f:	eb 3c                	jmp    c010fb7d <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fb41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb44:	8b 40 08             	mov    0x8(%eax),%eax
c010fb47:	8b 40 78             	mov    0x78(%eax),%eax
c010fb4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fb4d:	8b 52 08             	mov    0x8(%edx),%edx
c010fb50:	89 14 24             	mov    %edx,(%esp)
c010fb53:	ff d0                	call   *%eax
c010fb55:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb5c:	75 1f                	jne    c010fb7d <vfs_unmount+0xd3>
        vdev->fs = NULL;
c010fb5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb61:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fb68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb6b:	8b 00                	mov    (%eax),%eax
c010fb6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb71:	c7 04 24 7c 88 11 c0 	movl   $0xc011887c,(%esp)
c010fb78:	e8 e8 07 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fb7d:	e8 d2 f8 ff ff       	call   c010f454 <unlock_vdev_list>
    return ret;
c010fb82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fb85:	c9                   	leave  
c010fb86:	c3                   	ret    

c010fb87 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fb87:	55                   	push   %ebp
c010fb88:	89 e5                	mov    %esp,%ebp
c010fb8a:	83 ec 38             	sub    $0x38,%esp
c010fb8d:	c7 45 e4 c8 1f 15 c0 	movl   $0xc0151fc8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fb94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fb97:	8b 40 04             	mov    0x4(%eax),%eax
c010fb9a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fb9d:	0f 94 c0             	sete   %al
c010fba0:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fba3:	85 c0                	test   %eax,%eax
c010fba5:	0f 85 f1 00 00 00    	jne    c010fc9c <vfs_unmount_all+0x115>
        lock_vdev_list();
c010fbab:	e8 90 f8 ff ff       	call   c010f440 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fbb0:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010fbb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fbba:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fbbd:	e9 ba 00 00 00       	jmp    c010fc7c <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fbc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbc5:	83 e8 10             	sub    $0x10,%eax
c010fbc8:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fbcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbce:	8b 40 0c             	mov    0xc(%eax),%eax
c010fbd1:	85 c0                	test   %eax,%eax
c010fbd3:	0f 84 a3 00 00 00    	je     c010fc7c <vfs_unmount_all+0xf5>
c010fbd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbdc:	8b 40 08             	mov    0x8(%eax),%eax
c010fbdf:	85 c0                	test   %eax,%eax
c010fbe1:	0f 84 95 00 00 00    	je     c010fc7c <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fbe7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbea:	8b 40 08             	mov    0x8(%eax),%eax
c010fbed:	8b 40 70             	mov    0x70(%eax),%eax
c010fbf0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fbf3:	8b 52 08             	mov    0x8(%edx),%edx
c010fbf6:	89 14 24             	mov    %edx,(%esp)
c010fbf9:	ff d0                	call   *%eax
c010fbfb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fbfe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fc02:	74 1e                	je     c010fc22 <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010fc04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc07:	8b 00                	mov    (%eax),%eax
c010fc09:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fc0c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fc10:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc14:	c7 04 24 90 88 11 c0 	movl   $0xc0118890,(%esp)
c010fc1b:	e8 45 07 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fc20:	eb 5a                	jmp    c010fc7c <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010fc22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc25:	8b 40 08             	mov    0x8(%eax),%eax
c010fc28:	8b 40 78             	mov    0x78(%eax),%eax
c010fc2b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc2e:	8b 52 08             	mov    0x8(%edx),%edx
c010fc31:	89 14 24             	mov    %edx,(%esp)
c010fc34:	ff d0                	call   *%eax
c010fc36:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fc39:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fc3d:	74 1e                	je     c010fc5d <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fc3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc42:	8b 00                	mov    (%eax),%eax
c010fc44:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fc47:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fc4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc4f:	c7 04 24 b8 88 11 c0 	movl   $0xc01188b8,(%esp)
c010fc56:	e8 0a 07 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fc5b:	eb 1f                	jmp    c010fc7c <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010fc5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc60:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010fc67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc6a:	8b 00                	mov    (%eax),%eax
c010fc6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc70:	c7 04 24 7c 88 11 c0 	movl   $0xc011887c,(%esp)
c010fc77:	e8 e9 06 ff ff       	call   c0100365 <cprintf>
c010fc7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fc82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fc85:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010fc88:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fc91:	0f 85 2b ff ff ff    	jne    c010fbc2 <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010fc97:	e8 b8 f7 ff ff       	call   c010f454 <unlock_vdev_list>
    }
    return 0;
c010fc9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fca1:	c9                   	leave  
c010fca2:	c3                   	ret    

c010fca3 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010fca3:	55                   	push   %ebp
c010fca4:	89 e5                	mov    %esp,%ebp
c010fca6:	53                   	push   %ebx
c010fca7:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010fcaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010fcb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcb4:	83 e0 03             	and    $0x3,%eax
c010fcb7:	85 c0                	test   %eax,%eax
c010fcb9:	74 18                	je     c010fcd3 <vfs_open+0x30>
c010fcbb:	83 f8 02             	cmp    $0x2,%eax
c010fcbe:	77 09                	ja     c010fcc9 <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010fcc0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010fcc7:	eb 0b                	jmp    c010fcd4 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010fcc9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fcce:	e9 ba 02 00 00       	jmp    c010ff8d <vfs_open+0x2ea>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010fcd3:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010fcd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcd7:	83 e0 10             	and    $0x10,%eax
c010fcda:	85 c0                	test   %eax,%eax
c010fcdc:	74 10                	je     c010fcee <vfs_open+0x4b>
        if (!can_write) {
c010fcde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fce2:	75 0a                	jne    c010fcee <vfs_open+0x4b>
            return -E_INVAL;
c010fce4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fce9:	e9 9f 02 00 00       	jmp    c010ff8d <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010fcee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcf1:	83 e0 08             	and    $0x8,%eax
c010fcf4:	85 c0                	test   %eax,%eax
c010fcf6:	0f 95 c0             	setne  %al
c010fcf9:	0f b6 c0             	movzbl %al,%eax
c010fcfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010fcff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd02:	83 e0 04             	and    $0x4,%eax
c010fd05:	85 c0                	test   %eax,%eax
c010fd07:	0f 95 c0             	setne  %al
c010fd0a:	0f b6 c0             	movzbl %al,%eax
c010fd0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010fd10:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010fd13:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd17:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd1a:	89 04 24             	mov    %eax,(%esp)
c010fd1d:	e8 7a 04 00 00       	call   c011019c <vfs_lookup>
c010fd22:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010fd25:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fd29:	0f 84 cc 00 00 00    	je     c010fdfb <vfs_open+0x158>
        if (ret == -16 && (create)) {
c010fd2f:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010fd33:	0f 85 ba 00 00 00    	jne    c010fdf3 <vfs_open+0x150>
c010fd39:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fd3d:	0f 84 b0 00 00 00    	je     c010fdf3 <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010fd43:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010fd46:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fd4a:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010fd4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd51:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd54:	89 04 24             	mov    %eax,(%esp)
c010fd57:	e8 20 05 00 00       	call   c011027c <vfs_lookup_parent>
c010fd5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fd5f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fd63:	74 08                	je     c010fd6d <vfs_open+0xca>
                return ret;
c010fd65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fd68:	e9 20 02 00 00       	jmp    c010ff8d <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c010fd6d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fd70:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010fd73:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010fd77:	74 17                	je     c010fd90 <vfs_open+0xed>
c010fd79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fd7c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fd7f:	85 c0                	test   %eax,%eax
c010fd81:	74 0d                	je     c010fd90 <vfs_open+0xed>
c010fd83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fd86:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fd89:	8b 40 34             	mov    0x34(%eax),%eax
c010fd8c:	85 c0                	test   %eax,%eax
c010fd8e:	75 24                	jne    c010fdb4 <vfs_open+0x111>
c010fd90:	c7 44 24 0c e4 88 11 	movl   $0xc01188e4,0xc(%esp)
c010fd97:	c0 
c010fd98:	c7 44 24 08 33 89 11 	movl   $0xc0118933,0x8(%esp)
c010fd9f:	c0 
c010fda0:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010fda7:	00 
c010fda8:	c7 04 24 48 89 11 c0 	movl   $0xc0118948,(%esp)
c010fdaf:	e8 14 11 ff ff       	call   c0100ec8 <__panic>
c010fdb4:	c7 44 24 04 5e 89 11 	movl   $0xc011895e,0x4(%esp)
c010fdbb:	c0 
c010fdbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fdbf:	89 04 24             	mov    %eax,(%esp)
c010fdc2:	e8 03 f4 ff ff       	call   c010f1ca <inode_check>
c010fdc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fdca:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fdcd:	8b 40 34             	mov    0x34(%eax),%eax
c010fdd0:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010fdd3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fdd6:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010fdd9:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010fddd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010fde0:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010fde4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fde8:	89 14 24             	mov    %edx,(%esp)
c010fdeb:	ff d0                	call   *%eax
c010fded:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010fdf0:	90                   	nop
c010fdf1:	eb 1e                	jmp    c010fe11 <vfs_open+0x16e>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010fdf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fdf6:	e9 92 01 00 00       	jmp    c010ff8d <vfs_open+0x2ea>
    } else if (excl && create) {
c010fdfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fdff:	74 10                	je     c010fe11 <vfs_open+0x16e>
c010fe01:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fe05:	74 0a                	je     c010fe11 <vfs_open+0x16e>
        return -E_EXISTS;
c010fe07:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010fe0c:	e9 7c 01 00 00       	jmp    c010ff8d <vfs_open+0x2ea>
    }
    assert(node != NULL);
c010fe11:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fe14:	85 c0                	test   %eax,%eax
c010fe16:	75 24                	jne    c010fe3c <vfs_open+0x199>
c010fe18:	c7 44 24 0c 65 89 11 	movl   $0xc0118965,0xc(%esp)
c010fe1f:	c0 
c010fe20:	c7 44 24 08 33 89 11 	movl   $0xc0118933,0x8(%esp)
c010fe27:	c0 
c010fe28:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c010fe2f:	00 
c010fe30:	c7 04 24 48 89 11 c0 	movl   $0xc0118948,(%esp)
c010fe37:	e8 8c 10 ff ff       	call   c0100ec8 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010fe3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fe3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010fe42:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010fe46:	74 17                	je     c010fe5f <vfs_open+0x1bc>
c010fe48:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe4b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe4e:	85 c0                	test   %eax,%eax
c010fe50:	74 0d                	je     c010fe5f <vfs_open+0x1bc>
c010fe52:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe55:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe58:	8b 40 04             	mov    0x4(%eax),%eax
c010fe5b:	85 c0                	test   %eax,%eax
c010fe5d:	75 24                	jne    c010fe83 <vfs_open+0x1e0>
c010fe5f:	c7 44 24 0c 74 89 11 	movl   $0xc0118974,0xc(%esp)
c010fe66:	c0 
c010fe67:	c7 44 24 08 33 89 11 	movl   $0xc0118933,0x8(%esp)
c010fe6e:	c0 
c010fe6f:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010fe76:	00 
c010fe77:	c7 04 24 48 89 11 c0 	movl   $0xc0118948,(%esp)
c010fe7e:	e8 45 10 ff ff       	call   c0100ec8 <__panic>
c010fe83:	c7 44 24 04 c1 89 11 	movl   $0xc01189c1,0x4(%esp)
c010fe8a:	c0 
c010fe8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe8e:	89 04 24             	mov    %eax,(%esp)
c010fe91:	e8 34 f3 ff ff       	call   c010f1ca <inode_check>
c010fe96:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe99:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe9c:	8b 40 04             	mov    0x4(%eax),%eax
c010fe9f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fea2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010fea5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fea9:	89 14 24             	mov    %edx,(%esp)
c010feac:	ff d0                	call   *%eax
c010feae:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010feb1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010feb5:	74 13                	je     c010feca <vfs_open+0x227>
        vop_ref_dec(node);
c010feb7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010feba:	89 04 24             	mov    %eax,(%esp)
c010febd:	e8 1a f1 ff ff       	call   c010efdc <inode_ref_dec>
        return ret;
c010fec2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fec5:	e9 c3 00 00 00       	jmp    c010ff8d <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c010feca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fecd:	89 04 24             	mov    %eax,(%esp)
c010fed0:	e8 f4 f1 ff ff       	call   c010f0c9 <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c010fed5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fed8:	83 e0 10             	and    $0x10,%eax
c010fedb:	85 c0                	test   %eax,%eax
c010fedd:	75 0a                	jne    c010fee9 <vfs_open+0x246>
c010fedf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fee3:	0f 84 97 00 00 00    	je     c010ff80 <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c010fee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010feec:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010feef:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010fef3:	74 17                	je     c010ff0c <vfs_open+0x269>
c010fef5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010fef8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fefb:	85 c0                	test   %eax,%eax
c010fefd:	74 0d                	je     c010ff0c <vfs_open+0x269>
c010feff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff02:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff05:	8b 40 30             	mov    0x30(%eax),%eax
c010ff08:	85 c0                	test   %eax,%eax
c010ff0a:	75 24                	jne    c010ff30 <vfs_open+0x28d>
c010ff0c:	c7 44 24 0c c8 89 11 	movl   $0xc01189c8,0xc(%esp)
c010ff13:	c0 
c010ff14:	c7 44 24 08 33 89 11 	movl   $0xc0118933,0x8(%esp)
c010ff1b:	c0 
c010ff1c:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010ff23:	00 
c010ff24:	c7 04 24 48 89 11 c0 	movl   $0xc0118948,(%esp)
c010ff2b:	e8 98 0f ff ff       	call   c0100ec8 <__panic>
c010ff30:	c7 44 24 04 19 8a 11 	movl   $0xc0118a19,0x4(%esp)
c010ff37:	c0 
c010ff38:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff3b:	89 04 24             	mov    %eax,(%esp)
c010ff3e:	e8 87 f2 ff ff       	call   c010f1ca <inode_check>
c010ff43:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff46:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff49:	8b 40 30             	mov    0x30(%eax),%eax
c010ff4c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ff4f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ff56:	00 
c010ff57:	89 14 24             	mov    %edx,(%esp)
c010ff5a:	ff d0                	call   *%eax
c010ff5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ff5f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ff63:	74 1b                	je     c010ff80 <vfs_open+0x2dd>
            vop_open_dec(node);
c010ff65:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff68:	89 04 24             	mov    %eax,(%esp)
c010ff6b:	e8 73 f1 ff ff       	call   c010f0e3 <inode_open_dec>
            vop_ref_dec(node);
c010ff70:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff73:	89 04 24             	mov    %eax,(%esp)
c010ff76:	e8 61 f0 ff ff       	call   c010efdc <inode_ref_dec>
            return ret;
c010ff7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ff7e:	eb 0d                	jmp    c010ff8d <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c010ff80:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ff83:	8b 45 10             	mov    0x10(%ebp),%eax
c010ff86:	89 10                	mov    %edx,(%eax)
    return 0;
c010ff88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff8d:	83 c4 44             	add    $0x44,%esp
c010ff90:	5b                   	pop    %ebx
c010ff91:	5d                   	pop    %ebp
c010ff92:	c3                   	ret    

c010ff93 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c010ff93:	55                   	push   %ebp
c010ff94:	89 e5                	mov    %esp,%ebp
c010ff96:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c010ff99:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff9c:	89 04 24             	mov    %eax,(%esp)
c010ff9f:	e8 3f f1 ff ff       	call   c010f0e3 <inode_open_dec>
    vop_ref_dec(node);
c010ffa4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffa7:	89 04 24             	mov    %eax,(%esp)
c010ffaa:	e8 2d f0 ff ff       	call   c010efdc <inode_ref_dec>
    return 0;
c010ffaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ffb4:	c9                   	leave  
c010ffb5:	c3                   	ret    

c010ffb6 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c010ffb6:	55                   	push   %ebp
c010ffb7:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffb9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffbe:	5d                   	pop    %ebp
c010ffbf:	c3                   	ret    

c010ffc0 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c010ffc0:	55                   	push   %ebp
c010ffc1:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffc3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffc8:	5d                   	pop    %ebp
c010ffc9:	c3                   	ret    

c010ffca <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c010ffca:	55                   	push   %ebp
c010ffcb:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffcd:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffd2:	5d                   	pop    %ebp
c010ffd3:	c3                   	ret    

c010ffd4 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c010ffd4:	55                   	push   %ebp
c010ffd5:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffd7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffdc:	5d                   	pop    %ebp
c010ffdd:	c3                   	ret    

c010ffde <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c010ffde:	55                   	push   %ebp
c010ffdf:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffe1:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ffe6:	5d                   	pop    %ebp
c010ffe7:	c3                   	ret    

c010ffe8 <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c010ffe8:	55                   	push   %ebp
c010ffe9:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010ffeb:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010fff0:	5d                   	pop    %ebp
c010fff1:	c3                   	ret    

c010fff2 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c010fff2:	55                   	push   %ebp
c010fff3:	89 e5                	mov    %esp,%ebp
c010fff5:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c010fff8:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010ffff:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c0110006:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011000d:	eb 32                	jmp    c0110041 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c011000f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110012:	8b 45 08             	mov    0x8(%ebp),%eax
c0110015:	01 d0                	add    %edx,%eax
c0110017:	0f b6 00             	movzbl (%eax),%eax
c011001a:	3c 3a                	cmp    $0x3a,%al
c011001c:	75 08                	jne    c0110026 <get_device+0x34>
c011001e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110021:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110024:	eb 2a                	jmp    c0110050 <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c0110026:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110029:	8b 45 08             	mov    0x8(%ebp),%eax
c011002c:	01 d0                	add    %edx,%eax
c011002e:	0f b6 00             	movzbl (%eax),%eax
c0110031:	3c 2f                	cmp    $0x2f,%al
c0110033:	75 08                	jne    c011003d <get_device+0x4b>
c0110035:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110038:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011003b:	eb 13                	jmp    c0110050 <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c011003d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110041:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110044:	8b 45 08             	mov    0x8(%ebp),%eax
c0110047:	01 d0                	add    %edx,%eax
c0110049:	0f b6 00             	movzbl (%eax),%eax
c011004c:	84 c0                	test   %al,%al
c011004e:	75 bf                	jne    c011000f <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110050:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110054:	79 1e                	jns    c0110074 <get_device+0x82>
c0110056:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011005a:	74 18                	je     c0110074 <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c011005c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011005f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110062:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c0110064:	8b 45 10             	mov    0x10(%ebp),%eax
c0110067:	89 04 24             	mov    %eax,(%esp)
c011006a:	e8 ae 02 00 00       	call   c011031d <vfs_get_curdir>
c011006f:	e9 26 01 00 00       	jmp    c011019a <get_device+0x1a8>
    }
    if (colon > 0) {
c0110074:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110078:	7e 42                	jle    c01100bc <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c011007a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011007d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110080:	01 d0                	add    %edx,%eax
c0110082:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c0110085:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0110089:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011008c:	8b 45 08             	mov    0x8(%ebp),%eax
c011008f:	01 d0                	add    %edx,%eax
c0110091:	0f b6 00             	movzbl (%eax),%eax
c0110094:	3c 2f                	cmp    $0x2f,%al
c0110096:	74 ed                	je     c0110085 <get_device+0x93>
        *subpath = path + colon;
c0110098:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011009b:	8b 45 08             	mov    0x8(%ebp),%eax
c011009e:	01 c2                	add    %eax,%edx
c01100a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01100a3:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c01100a5:	8b 45 10             	mov    0x10(%ebp),%eax
c01100a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01100ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01100af:	89 04 24             	mov    %eax,(%esp)
c01100b2:	e8 61 f4 ff ff       	call   c010f518 <vfs_get_root>
c01100b7:	e9 de 00 00 00       	jmp    c011019a <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c01100bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01100bf:	0f b6 00             	movzbl (%eax),%eax
c01100c2:	3c 2f                	cmp    $0x2f,%al
c01100c4:	75 20                	jne    c01100e6 <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c01100c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01100c9:	89 04 24             	mov    %eax,(%esp)
c01100cc:	e8 18 f3 ff ff       	call   c010f3e9 <vfs_get_bootfs>
c01100d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01100d4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01100d8:	0f 84 a1 00 00 00    	je     c011017f <get_device+0x18d>
            return ret;
c01100de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01100e1:	e9 b4 00 00 00       	jmp    c011019a <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c01100e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01100e9:	0f b6 00             	movzbl (%eax),%eax
c01100ec:	3c 3a                	cmp    $0x3a,%al
c01100ee:	74 24                	je     c0110114 <get_device+0x122>
c01100f0:	c7 44 24 0c 24 8a 11 	movl   $0xc0118a24,0xc(%esp)
c01100f7:	c0 
c01100f8:	c7 44 24 08 31 8a 11 	movl   $0xc0118a31,0x8(%esp)
c01100ff:	c0 
c0110100:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c0110107:	00 
c0110108:	c7 04 24 46 8a 11 c0 	movl   $0xc0118a46,(%esp)
c011010f:	e8 b4 0d ff ff       	call   c0100ec8 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c0110114:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0110117:	89 04 24             	mov    %eax,(%esp)
c011011a:	e8 fe 01 00 00       	call   c011031d <vfs_get_curdir>
c011011f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110122:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110126:	74 05                	je     c011012d <get_device+0x13b>
            return ret;
c0110128:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011012b:	eb 6d                	jmp    c011019a <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c011012d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110130:	8b 40 38             	mov    0x38(%eax),%eax
c0110133:	85 c0                	test   %eax,%eax
c0110135:	75 24                	jne    c011015b <get_device+0x169>
c0110137:	c7 44 24 0c 5e 8a 11 	movl   $0xc0118a5e,0xc(%esp)
c011013e:	c0 
c011013f:	c7 44 24 08 31 8a 11 	movl   $0xc0118a31,0x8(%esp)
c0110146:	c0 
c0110147:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c011014e:	00 
c011014f:	c7 04 24 46 8a 11 c0 	movl   $0xc0118a46,(%esp)
c0110156:	e8 6d 0d ff ff       	call   c0100ec8 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c011015b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011015e:	8b 40 38             	mov    0x38(%eax),%eax
c0110161:	8b 40 74             	mov    0x74(%eax),%eax
c0110164:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0110167:	8b 52 38             	mov    0x38(%edx),%edx
c011016a:	89 14 24             	mov    %edx,(%esp)
c011016d:	ff d0                	call   *%eax
c011016f:	8b 55 10             	mov    0x10(%ebp),%edx
c0110172:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c0110174:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110177:	89 04 24             	mov    %eax,(%esp)
c011017a:	e8 5d ee ff ff       	call   c010efdc <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c011017f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0110183:	8b 45 08             	mov    0x8(%ebp),%eax
c0110186:	0f b6 00             	movzbl (%eax),%eax
c0110189:	3c 2f                	cmp    $0x2f,%al
c011018b:	74 f2                	je     c011017f <get_device+0x18d>
    *subpath = path;
c011018d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110190:	8b 55 08             	mov    0x8(%ebp),%edx
c0110193:	89 10                	mov    %edx,(%eax)
    return 0;
c0110195:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011019a:	c9                   	leave  
c011019b:	c3                   	ret    

c011019c <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c011019c:	55                   	push   %ebp
c011019d:	89 e5                	mov    %esp,%ebp
c011019f:	56                   	push   %esi
c01101a0:	53                   	push   %ebx
c01101a1:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c01101a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01101a7:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01101aa:	89 54 24 08          	mov    %edx,0x8(%esp)
c01101ae:	8d 75 08             	lea    0x8(%ebp),%esi
c01101b1:	89 74 24 04          	mov    %esi,0x4(%esp)
c01101b5:	89 04 24             	mov    %eax,(%esp)
c01101b8:	e8 35 fe ff ff       	call   c010fff2 <get_device>
c01101bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01101c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01101c4:	74 08                	je     c01101ce <vfs_lookup+0x32>
        return ret;
c01101c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01101c9:	e9 a7 00 00 00       	jmp    c0110275 <vfs_lookup+0xd9>
    }
    if (*path != '\0') {
c01101ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01101d1:	0f b6 00             	movzbl (%eax),%eax
c01101d4:	84 c0                	test   %al,%al
c01101d6:	0f 84 8c 00 00 00    	je     c0110268 <vfs_lookup+0xcc>
        ret = vop_lookup(node, path, node_store);
c01101dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01101df:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01101e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01101e6:	74 17                	je     c01101ff <vfs_lookup+0x63>
c01101e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01101eb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101ee:	85 c0                	test   %eax,%eax
c01101f0:	74 0d                	je     c01101ff <vfs_lookup+0x63>
c01101f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01101f5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101f8:	8b 40 38             	mov    0x38(%eax),%eax
c01101fb:	85 c0                	test   %eax,%eax
c01101fd:	75 24                	jne    c0110223 <vfs_lookup+0x87>
c01101ff:	c7 44 24 0c 74 8a 11 	movl   $0xc0118a74,0xc(%esp)
c0110206:	c0 
c0110207:	c7 44 24 08 31 8a 11 	movl   $0xc0118a31,0x8(%esp)
c011020e:	c0 
c011020f:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c0110216:	00 
c0110217:	c7 04 24 46 8a 11 c0 	movl   $0xc0118a46,(%esp)
c011021e:	e8 a5 0c ff ff       	call   c0100ec8 <__panic>
c0110223:	c7 44 24 04 c3 8a 11 	movl   $0xc0118ac3,0x4(%esp)
c011022a:	c0 
c011022b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011022e:	89 04 24             	mov    %eax,(%esp)
c0110231:	e8 94 ef ff ff       	call   c010f1ca <inode_check>
c0110236:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110239:	8b 40 3c             	mov    0x3c(%eax),%eax
c011023c:	8b 40 38             	mov    0x38(%eax),%eax
c011023f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110242:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110245:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0110248:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011024c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110250:	89 14 24             	mov    %edx,(%esp)
c0110253:	ff d0                	call   *%eax
c0110255:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110258:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011025b:	89 04 24             	mov    %eax,(%esp)
c011025e:	e8 79 ed ff ff       	call   c010efdc <inode_ref_dec>
        return ret;
c0110263:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110266:	eb 0d                	jmp    c0110275 <vfs_lookup+0xd9>
    }
    *node_store = node;
c0110268:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011026b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011026e:	89 10                	mov    %edx,(%eax)
    return 0;
c0110270:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110275:	83 c4 20             	add    $0x20,%esp
c0110278:	5b                   	pop    %ebx
c0110279:	5e                   	pop    %esi
c011027a:	5d                   	pop    %ebp
c011027b:	c3                   	ret    

c011027c <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c011027c:	55                   	push   %ebp
c011027d:	89 e5                	mov    %esp,%ebp
c011027f:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c0110282:	8b 45 08             	mov    0x8(%ebp),%eax
c0110285:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0110288:	89 54 24 08          	mov    %edx,0x8(%esp)
c011028c:	8d 4d 08             	lea    0x8(%ebp),%ecx
c011028f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110293:	89 04 24             	mov    %eax,(%esp)
c0110296:	e8 57 fd ff ff       	call   c010fff2 <get_device>
c011029b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011029e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01102a2:	74 05                	je     c01102a9 <vfs_lookup_parent+0x2d>
        return ret;
c01102a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102a7:	eb 15                	jmp    c01102be <vfs_lookup_parent+0x42>
    }
    *endp = path;
c01102a9:	8b 55 08             	mov    0x8(%ebp),%edx
c01102ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01102af:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c01102b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01102b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102b7:	89 10                	mov    %edx,(%eax)
    return 0;
c01102b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01102be:	c9                   	leave  
c01102bf:	c3                   	ret    

c01102c0 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c01102c0:	55                   	push   %ebp
c01102c1:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c01102c3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01102c8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01102ce:	8b 00                	mov    (%eax),%eax
}
c01102d0:	5d                   	pop    %ebp
c01102d1:	c3                   	ret    

c01102d2 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c01102d2:	55                   	push   %ebp
c01102d3:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c01102d5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01102da:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01102e0:	8b 55 08             	mov    0x8(%ebp),%edx
c01102e3:	89 10                	mov    %edx,(%eax)
}
c01102e5:	5d                   	pop    %ebp
c01102e6:	c3                   	ret    

c01102e7 <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c01102e7:	55                   	push   %ebp
c01102e8:	89 e5                	mov    %esp,%ebp
c01102ea:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c01102ed:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01102f2:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01102f8:	89 04 24             	mov    %eax,(%esp)
c01102fb:	e8 44 ac ff ff       	call   c010af44 <lock_files>
}
c0110300:	c9                   	leave  
c0110301:	c3                   	ret    

c0110302 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c0110302:	55                   	push   %ebp
c0110303:	89 e5                	mov    %esp,%ebp
c0110305:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c0110308:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c011030d:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110313:	89 04 24             	mov    %eax,(%esp)
c0110316:	e8 3f ac ff ff       	call   c010af5a <unlock_files>
}
c011031b:	c9                   	leave  
c011031c:	c3                   	ret    

c011031d <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c011031d:	55                   	push   %ebp
c011031e:	89 e5                	mov    %esp,%ebp
c0110320:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c0110323:	e8 98 ff ff ff       	call   c01102c0 <get_cwd_nolock>
c0110328:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011032b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011032f:	74 1a                	je     c011034b <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c0110331:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110334:	89 04 24             	mov    %eax,(%esp)
c0110337:	e8 86 ec ff ff       	call   c010efc2 <inode_ref_inc>
        *dir_store = node;
c011033c:	8b 45 08             	mov    0x8(%ebp),%eax
c011033f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110342:	89 10                	mov    %edx,(%eax)
        return 0;
c0110344:	b8 00 00 00 00       	mov    $0x0,%eax
c0110349:	eb 05                	jmp    c0110350 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c011034b:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110350:	c9                   	leave  
c0110351:	c3                   	ret    

c0110352 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c0110352:	55                   	push   %ebp
c0110353:	89 e5                	mov    %esp,%ebp
c0110355:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c0110358:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c011035f:	e8 83 ff ff ff       	call   c01102e7 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c0110364:	e8 57 ff ff ff       	call   c01102c0 <get_cwd_nolock>
c0110369:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011036c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011036f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0110372:	0f 84 c7 00 00 00    	je     c011043f <vfs_set_curdir+0xed>
        if (dir != NULL) {
c0110378:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011037c:	0f 84 a1 00 00 00    	je     c0110423 <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c0110382:	8b 45 08             	mov    0x8(%ebp),%eax
c0110385:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110388:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011038c:	74 17                	je     c01103a5 <vfs_set_curdir+0x53>
c011038e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110391:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110394:	85 c0                	test   %eax,%eax
c0110396:	74 0d                	je     c01103a5 <vfs_set_curdir+0x53>
c0110398:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011039b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011039e:	8b 40 28             	mov    0x28(%eax),%eax
c01103a1:	85 c0                	test   %eax,%eax
c01103a3:	75 24                	jne    c01103c9 <vfs_set_curdir+0x77>
c01103a5:	c7 44 24 0c cc 8a 11 	movl   $0xc0118acc,0xc(%esp)
c01103ac:	c0 
c01103ad:	c7 44 24 08 1c 8b 11 	movl   $0xc0118b1c,0x8(%esp)
c01103b4:	c0 
c01103b5:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01103bc:	00 
c01103bd:	c7 04 24 31 8b 11 c0 	movl   $0xc0118b31,(%esp)
c01103c4:	e8 ff 0a ff ff       	call   c0100ec8 <__panic>
c01103c9:	c7 44 24 04 47 8b 11 	movl   $0xc0118b47,0x4(%esp)
c01103d0:	c0 
c01103d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01103d4:	89 04 24             	mov    %eax,(%esp)
c01103d7:	e8 ee ed ff ff       	call   c010f1ca <inode_check>
c01103dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01103df:	8b 40 3c             	mov    0x3c(%eax),%eax
c01103e2:	8b 40 28             	mov    0x28(%eax),%eax
c01103e5:	8d 55 e8             	lea    -0x18(%ebp),%edx
c01103e8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01103ec:	8b 55 08             	mov    0x8(%ebp),%edx
c01103ef:	89 14 24             	mov    %edx,(%esp)
c01103f2:	ff d0                	call   *%eax
c01103f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01103f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01103fb:	74 02                	je     c01103ff <vfs_set_curdir+0xad>
                goto out;
c01103fd:	eb 40                	jmp    c011043f <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c01103ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110402:	25 00 70 00 00       	and    $0x7000,%eax
c0110407:	3d 00 20 00 00       	cmp    $0x2000,%eax
c011040c:	74 0a                	je     c0110418 <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c011040e:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c0110415:	90                   	nop
c0110416:	eb 27                	jmp    c011043f <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c0110418:	8b 45 08             	mov    0x8(%ebp),%eax
c011041b:	89 04 24             	mov    %eax,(%esp)
c011041e:	e8 9f eb ff ff       	call   c010efc2 <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c0110423:	8b 45 08             	mov    0x8(%ebp),%eax
c0110426:	89 04 24             	mov    %eax,(%esp)
c0110429:	e8 a4 fe ff ff       	call   c01102d2 <set_cwd_nolock>
        if (old_dir != NULL) {
c011042e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110432:	74 0b                	je     c011043f <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c0110434:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110437:	89 04 24             	mov    %eax,(%esp)
c011043a:	e8 9d eb ff ff       	call   c010efdc <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c011043f:	e8 be fe ff ff       	call   c0110302 <unlock_cfs>
    return ret;
c0110444:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110447:	c9                   	leave  
c0110448:	c3                   	ret    

c0110449 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c0110449:	55                   	push   %ebp
c011044a:	89 e5                	mov    %esp,%ebp
c011044c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c011044f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0110452:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110456:	8b 45 08             	mov    0x8(%ebp),%eax
c0110459:	89 04 24             	mov    %eax,(%esp)
c011045c:	e8 3b fd ff ff       	call   c011019c <vfs_lookup>
c0110461:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110464:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110468:	75 19                	jne    c0110483 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c011046a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011046d:	89 04 24             	mov    %eax,(%esp)
c0110470:	e8 dd fe ff ff       	call   c0110352 <vfs_set_curdir>
c0110475:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110478:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011047b:	89 04 24             	mov    %eax,(%esp)
c011047e:	e8 59 eb ff ff       	call   c010efdc <inode_ref_dec>
    }
    return ret;
c0110483:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110486:	c9                   	leave  
c0110487:	c3                   	ret    

c0110488 <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c0110488:	55                   	push   %ebp
c0110489:	89 e5                	mov    %esp,%ebp
c011048b:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c011048e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110491:	89 04 24             	mov    %eax,(%esp)
c0110494:	e8 84 fe ff ff       	call   c011031d <vfs_get_curdir>
c0110499:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011049c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104a0:	74 08                	je     c01104aa <vfs_getcwd+0x22>
        return ret;
c01104a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104a5:	e9 3a 01 00 00       	jmp    c01105e4 <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c01104aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104ad:	8b 40 38             	mov    0x38(%eax),%eax
c01104b0:	85 c0                	test   %eax,%eax
c01104b2:	75 24                	jne    c01104d8 <vfs_getcwd+0x50>
c01104b4:	c7 44 24 0c 4f 8b 11 	movl   $0xc0118b4f,0xc(%esp)
c01104bb:	c0 
c01104bc:	c7 44 24 08 1c 8b 11 	movl   $0xc0118b1c,0x8(%esp)
c01104c3:	c0 
c01104c4:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c01104cb:	00 
c01104cc:	c7 04 24 31 8b 11 c0 	movl   $0xc0118b31,(%esp)
c01104d3:	e8 f0 09 ff ff       	call   c0100ec8 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c01104d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104db:	8b 40 38             	mov    0x38(%eax),%eax
c01104de:	89 04 24             	mov    %eax,(%esp)
c01104e1:	e8 4f f1 ff ff       	call   c010f635 <vfs_get_devname>
c01104e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c01104e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104ec:	89 04 24             	mov    %eax,(%esp)
c01104ef:	e8 e8 4b 00 00       	call   c01150dc <strlen>
c01104f4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01104fb:	00 
c01104fc:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110503:	00 
c0110504:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110508:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011050b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011050f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110512:	89 04 24             	mov    %eax,(%esp)
c0110515:	e8 22 ad ff ff       	call   c010b23c <iobuf_move>
c011051a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011051d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110521:	74 05                	je     c0110528 <vfs_getcwd+0xa0>
        goto out;
c0110523:	e9 ae 00 00 00       	jmp    c01105d6 <vfs_getcwd+0x14e>
    }
    char colon = ':';
c0110528:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c011052c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0110533:	00 
c0110534:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011053b:	00 
c011053c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110543:	00 
c0110544:	8d 45 e7             	lea    -0x19(%ebp),%eax
c0110547:	89 44 24 04          	mov    %eax,0x4(%esp)
c011054b:	8b 45 08             	mov    0x8(%ebp),%eax
c011054e:	89 04 24             	mov    %eax,(%esp)
c0110551:	e8 e6 ac ff ff       	call   c010b23c <iobuf_move>
c0110556:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110559:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011055d:	74 02                	je     c0110561 <vfs_getcwd+0xd9>
        goto out;
c011055f:	eb 75                	jmp    c01105d6 <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c0110561:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110564:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110567:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011056b:	74 17                	je     c0110584 <vfs_getcwd+0xfc>
c011056d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110570:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110573:	85 c0                	test   %eax,%eax
c0110575:	74 0d                	je     c0110584 <vfs_getcwd+0xfc>
c0110577:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011057a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011057d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0110580:	85 c0                	test   %eax,%eax
c0110582:	75 24                	jne    c01105a8 <vfs_getcwd+0x120>
c0110584:	c7 44 24 0c 64 8b 11 	movl   $0xc0118b64,0xc(%esp)
c011058b:	c0 
c011058c:	c7 44 24 08 1c 8b 11 	movl   $0xc0118b1c,0x8(%esp)
c0110593:	c0 
c0110594:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c011059b:	00 
c011059c:	c7 04 24 31 8b 11 c0 	movl   $0xc0118b31,(%esp)
c01105a3:	e8 20 09 ff ff       	call   c0100ec8 <__panic>
c01105a8:	c7 44 24 04 b5 8b 11 	movl   $0xc0118bb5,0x4(%esp)
c01105af:	c0 
c01105b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105b3:	89 04 24             	mov    %eax,(%esp)
c01105b6:	e8 0f ec ff ff       	call   c010f1ca <inode_check>
c01105bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105be:	8b 40 3c             	mov    0x3c(%eax),%eax
c01105c1:	8b 40 1c             	mov    0x1c(%eax),%eax
c01105c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01105c7:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01105ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01105ce:	89 14 24             	mov    %edx,(%esp)
c01105d1:	ff d0                	call   *%eax
c01105d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c01105d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01105d9:	89 04 24             	mov    %eax,(%esp)
c01105dc:	e8 fb e9 ff ff       	call   c010efdc <inode_ref_dec>
    return ret;
c01105e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01105e4:	c9                   	leave  
c01105e5:	c3                   	ret    

c01105e6 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c01105e6:	55                   	push   %ebp
c01105e7:	89 e5                	mov    %esp,%ebp
c01105e9:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c01105ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105ef:	83 e0 3c             	and    $0x3c,%eax
c01105f2:	85 c0                	test   %eax,%eax
c01105f4:	74 07                	je     c01105fd <dev_open+0x17>
        return -E_INVAL;
c01105f6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01105fb:	eb 58                	jmp    c0110655 <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c01105fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0110600:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110603:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110607:	74 0d                	je     c0110616 <dev_open+0x30>
c0110609:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011060c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011060f:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110614:	74 24                	je     c011063a <dev_open+0x54>
c0110616:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c011061d:	c0 
c011061e:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c0110625:	c0 
c0110626:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c011062d:	00 
c011062e:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c0110635:	e8 8e 08 ff ff       	call   c0100ec8 <__panic>
c011063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011063d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c0110640:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110643:	8b 40 08             	mov    0x8(%eax),%eax
c0110646:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110649:	89 54 24 04          	mov    %edx,0x4(%esp)
c011064d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110650:	89 14 24             	mov    %edx,(%esp)
c0110653:	ff d0                	call   *%eax
}
c0110655:	c9                   	leave  
c0110656:	c3                   	ret    

c0110657 <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c0110657:	55                   	push   %ebp
c0110658:	89 e5                	mov    %esp,%ebp
c011065a:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011065d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110660:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110663:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110667:	74 0d                	je     c0110676 <dev_close+0x1f>
c0110669:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011066c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011066f:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110674:	74 24                	je     c011069a <dev_close+0x43>
c0110676:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c011067d:	c0 
c011067e:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c0110685:	c0 
c0110686:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c011068d:	00 
c011068e:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c0110695:	e8 2e 08 ff ff       	call   c0100ec8 <__panic>
c011069a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011069d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c01106a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106a3:	8b 40 0c             	mov    0xc(%eax),%eax
c01106a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01106a9:	89 14 24             	mov    %edx,(%esp)
c01106ac:	ff d0                	call   *%eax
}
c01106ae:	c9                   	leave  
c01106af:	c3                   	ret    

c01106b0 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c01106b0:	55                   	push   %ebp
c01106b1:	89 e5                	mov    %esp,%ebp
c01106b3:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01106b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01106b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106c0:	74 0d                	je     c01106cf <dev_read+0x1f>
c01106c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106c5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01106c8:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01106cd:	74 24                	je     c01106f3 <dev_read+0x43>
c01106cf:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c01106d6:	c0 
c01106d7:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c01106de:	c0 
c01106df:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c01106e6:	00 
c01106e7:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c01106ee:	e8 d5 07 ff ff       	call   c0100ec8 <__panic>
c01106f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01106f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106fc:	8b 40 10             	mov    0x10(%eax),%eax
c01106ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110706:	00 
c0110707:	8b 55 0c             	mov    0xc(%ebp),%edx
c011070a:	89 54 24 04          	mov    %edx,0x4(%esp)
c011070e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110711:	89 14 24             	mov    %edx,(%esp)
c0110714:	ff d0                	call   *%eax
}
c0110716:	c9                   	leave  
c0110717:	c3                   	ret    

c0110718 <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c0110718:	55                   	push   %ebp
c0110719:	89 e5                	mov    %esp,%ebp
c011071b:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011071e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110721:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110728:	74 0d                	je     c0110737 <dev_write+0x1f>
c011072a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011072d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110730:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110735:	74 24                	je     c011075b <dev_write+0x43>
c0110737:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c011073e:	c0 
c011073f:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c0110746:	c0 
c0110747:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c011074e:	00 
c011074f:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c0110756:	e8 6d 07 ff ff       	call   c0100ec8 <__panic>
c011075b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011075e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c0110761:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110764:	8b 40 10             	mov    0x10(%eax),%eax
c0110767:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011076e:	00 
c011076f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110772:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110776:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110779:	89 14 24             	mov    %edx,(%esp)
c011077c:	ff d0                	call   *%eax
}
c011077e:	c9                   	leave  
c011077f:	c3                   	ret    

c0110780 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c0110780:	55                   	push   %ebp
c0110781:	89 e5                	mov    %esp,%ebp
c0110783:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110786:	8b 45 08             	mov    0x8(%ebp),%eax
c0110789:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011078c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110790:	74 0d                	je     c011079f <dev_ioctl+0x1f>
c0110792:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110795:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110798:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011079d:	74 24                	je     c01107c3 <dev_ioctl+0x43>
c011079f:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c01107a6:	c0 
c01107a7:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c01107ae:	c0 
c01107af:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c01107b6:	00 
c01107b7:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c01107be:	e8 05 07 ff ff       	call   c0100ec8 <__panic>
c01107c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c01107c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107cc:	8b 40 14             	mov    0x14(%eax),%eax
c01107cf:	8b 55 10             	mov    0x10(%ebp),%edx
c01107d2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01107d6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01107d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01107dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01107e0:	89 14 24             	mov    %edx,(%esp)
c01107e3:	ff d0                	call   *%eax
}
c01107e5:	c9                   	leave  
c01107e6:	c3                   	ret    

c01107e7 <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c01107e7:	55                   	push   %ebp
c01107e8:	89 e5                	mov    %esp,%ebp
c01107ea:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01107ed:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01107f4:	00 
c01107f5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01107fc:	00 
c01107fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110800:	89 04 24             	mov    %eax,(%esp)
c0110803:	e8 2a 4c 00 00       	call   c0115432 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0110808:	8b 45 08             	mov    0x8(%ebp),%eax
c011080b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011080e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110812:	74 17                	je     c011082b <dev_fstat+0x44>
c0110814:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110817:	8b 40 3c             	mov    0x3c(%eax),%eax
c011081a:	85 c0                	test   %eax,%eax
c011081c:	74 0d                	je     c011082b <dev_fstat+0x44>
c011081e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110821:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110824:	8b 40 28             	mov    0x28(%eax),%eax
c0110827:	85 c0                	test   %eax,%eax
c0110829:	75 24                	jne    c011084f <dev_fstat+0x68>
c011082b:	c7 44 24 0c 1c 8c 11 	movl   $0xc0118c1c,0xc(%esp)
c0110832:	c0 
c0110833:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c011083a:	c0 
c011083b:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0110842:	00 
c0110843:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c011084a:	e8 79 06 ff ff       	call   c0100ec8 <__panic>
c011084f:	c7 44 24 04 6c 8c 11 	movl   $0xc0118c6c,0x4(%esp)
c0110856:	c0 
c0110857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011085a:	89 04 24             	mov    %eax,(%esp)
c011085d:	e8 68 e9 ff ff       	call   c010f1ca <inode_check>
c0110862:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110865:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110868:	8b 40 28             	mov    0x28(%eax),%eax
c011086b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011086e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110872:	8b 55 08             	mov    0x8(%ebp),%edx
c0110875:	89 14 24             	mov    %edx,(%esp)
c0110878:	ff d0                	call   *%eax
c011087a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011087d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110881:	74 05                	je     c0110888 <dev_fstat+0xa1>
        return ret;
c0110883:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110886:	eb 72                	jmp    c01108fa <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c0110888:	8b 45 08             	mov    0x8(%ebp),%eax
c011088b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011088e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110892:	74 0d                	je     c01108a1 <dev_fstat+0xba>
c0110894:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110897:	8b 40 2c             	mov    0x2c(%eax),%eax
c011089a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011089f:	74 24                	je     c01108c5 <dev_fstat+0xde>
c01108a1:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c01108a8:	c0 
c01108a9:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c01108b0:	c0 
c01108b1:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c01108b8:	00 
c01108b9:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c01108c0:	e8 03 06 ff ff       	call   c0100ec8 <__panic>
c01108c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01108c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c01108cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108ce:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c01108d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108d8:	8b 10                	mov    (%eax),%edx
c01108da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108dd:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c01108e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108e3:	8b 50 08             	mov    0x8(%eax),%edx
c01108e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108e9:	8b 40 04             	mov    0x4(%eax),%eax
c01108ec:	0f af d0             	imul   %eax,%edx
c01108ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108f2:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01108f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01108fa:	c9                   	leave  
c01108fb:	c3                   	ret    

c01108fc <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c01108fc:	55                   	push   %ebp
c01108fd:	89 e5                	mov    %esp,%ebp
c01108ff:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110902:	8b 45 08             	mov    0x8(%ebp),%eax
c0110905:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110908:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011090c:	74 0d                	je     c011091b <dev_gettype+0x1f>
c011090e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110911:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110914:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110919:	74 24                	je     c011093f <dev_gettype+0x43>
c011091b:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c0110922:	c0 
c0110923:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c011092a:	c0 
c011092b:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0110932:	00 
c0110933:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c011093a:	e8 89 05 ff ff       	call   c0100ec8 <__panic>
c011093f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110942:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110945:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110948:	8b 00                	mov    (%eax),%eax
c011094a:	85 c0                	test   %eax,%eax
c011094c:	74 07                	je     c0110955 <dev_gettype+0x59>
c011094e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110953:	eb 05                	jmp    c011095a <dev_gettype+0x5e>
c0110955:	b8 00 40 00 00       	mov    $0x4000,%eax
c011095a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011095d:	89 02                	mov    %eax,(%edx)
    return 0;
c011095f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110964:	c9                   	leave  
c0110965:	c3                   	ret    

c0110966 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110966:	55                   	push   %ebp
c0110967:	89 e5                	mov    %esp,%ebp
c0110969:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011096c:	8b 45 08             	mov    0x8(%ebp),%eax
c011096f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110972:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110976:	74 0d                	je     c0110985 <dev_tryseek+0x1f>
c0110978:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011097b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011097e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110983:	74 24                	je     c01109a9 <dev_tryseek+0x43>
c0110985:	c7 44 24 0c c0 8b 11 	movl   $0xc0118bc0,0xc(%esp)
c011098c:	c0 
c011098d:	c7 44 24 08 f3 8b 11 	movl   $0xc0118bf3,0x8(%esp)
c0110994:	c0 
c0110995:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011099c:	00 
c011099d:	c7 04 24 08 8c 11 c0 	movl   $0xc0118c08,(%esp)
c01109a4:	e8 1f 05 ff ff       	call   c0100ec8 <__panic>
c01109a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c01109af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109b2:	8b 00                	mov    (%eax),%eax
c01109b4:	85 c0                	test   %eax,%eax
c01109b6:	74 38                	je     c01109f0 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c01109b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01109bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01109be:	8b 4a 04             	mov    0x4(%edx),%ecx
c01109c1:	ba 00 00 00 00       	mov    $0x0,%edx
c01109c6:	f7 f1                	div    %ecx
c01109c8:	89 d0                	mov    %edx,%eax
c01109ca:	85 c0                	test   %eax,%eax
c01109cc:	75 22                	jne    c01109f0 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c01109ce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01109d2:	78 1c                	js     c01109f0 <dev_tryseek+0x8a>
c01109d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01109d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109da:	8b 08                	mov    (%eax),%ecx
c01109dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109df:	8b 40 04             	mov    0x4(%eax),%eax
c01109e2:	0f af c1             	imul   %ecx,%eax
c01109e5:	39 c2                	cmp    %eax,%edx
c01109e7:	73 07                	jae    c01109f0 <dev_tryseek+0x8a>
                return 0;
c01109e9:	b8 00 00 00 00       	mov    $0x0,%eax
c01109ee:	eb 05                	jmp    c01109f5 <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c01109f0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01109f5:	c9                   	leave  
c01109f6:	c3                   	ret    

c01109f7 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c01109f7:	55                   	push   %ebp
c01109f8:	89 e5                	mov    %esp,%ebp
c01109fa:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c01109fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a00:	0f b6 00             	movzbl (%eax),%eax
c0110a03:	84 c0                	test   %al,%al
c0110a05:	74 07                	je     c0110a0e <dev_lookup+0x17>
        return -E_NOENT;
c0110a07:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110a0c:	eb 18                	jmp    c0110a26 <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c0110a0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a11:	89 04 24             	mov    %eax,(%esp)
c0110a14:	e8 a9 e5 ff ff       	call   c010efc2 <inode_ref_inc>
    *node_store = node;
c0110a19:	8b 45 10             	mov    0x10(%ebp),%eax
c0110a1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0110a1f:	89 10                	mov    %edx,(%eax)
    return 0;
c0110a21:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a26:	c9                   	leave  
c0110a27:	c3                   	ret    

c0110a28 <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0110a28:	55                   	push   %ebp
c0110a29:	89 e5                	mov    %esp,%ebp
c0110a2b:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110a2e:	e8 8f 07 00 00       	call   c01111c2 <dev_init_stdin>
    init_device(stdout);
c0110a33:	e8 0a 09 00 00       	call   c0111342 <dev_init_stdout>
    init_device(disk0);
c0110a38:	e8 26 04 00 00       	call   c0110e63 <dev_init_disk0>
}
c0110a3d:	c9                   	leave  
c0110a3e:	c3                   	ret    

c0110a3f <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110a3f:	55                   	push   %ebp
c0110a40:	89 e5                	mov    %esp,%ebp
c0110a42:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110a45:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110a4c:	e8 96 e4 ff ff       	call   c010eee7 <__alloc_inode>
c0110a51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a58:	74 1b                	je     c0110a75 <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110a5a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110a61:	00 
c0110a62:	c7 44 24 04 80 8c 11 	movl   $0xc0118c80,0x4(%esp)
c0110a69:	c0 
c0110a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a6d:	89 04 24             	mov    %eax,(%esp)
c0110a70:	e8 9b e4 ff ff       	call   c010ef10 <inode_init>
    }
    return node;
c0110a75:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110a78:	c9                   	leave  
c0110a79:	c3                   	ret    

c0110a7a <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110a7a:	55                   	push   %ebp
c0110a7b:	89 e5                	mov    %esp,%ebp
c0110a7d:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110a80:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110a87:	e8 3b 91 ff ff       	call   c0109bc7 <down>
}
c0110a8c:	c9                   	leave  
c0110a8d:	c3                   	ret    

c0110a8e <unlock_disk0>:

static void
unlock_disk0(void) {
c0110a8e:	55                   	push   %ebp
c0110a8f:	89 e5                	mov    %esp,%ebp
c0110a91:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110a94:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110a9b:	e8 0c 91 ff ff       	call   c0109bac <up>
}
c0110aa0:	c9                   	leave  
c0110aa1:	c3                   	ret    

c0110aa2 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110aa2:	55                   	push   %ebp
c0110aa3:	89 e5                	mov    %esp,%ebp
    return 0;
c0110aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110aaa:	5d                   	pop    %ebp
c0110aab:	c3                   	ret    

c0110aac <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110aac:	55                   	push   %ebp
c0110aad:	89 e5                	mov    %esp,%ebp
    return 0;
c0110aaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110ab4:	5d                   	pop    %ebp
c0110ab5:	c3                   	ret    

c0110ab6 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110ab6:	55                   	push   %ebp
c0110ab7:	89 e5                	mov    %esp,%ebp
c0110ab9:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0110abf:	c1 e0 03             	shl    $0x3,%eax
c0110ac2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110ac5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ac8:	c1 e0 03             	shl    $0x3,%eax
c0110acb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110ace:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110ad3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110ad6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110ada:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ae1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110ae5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110aec:	e8 af 11 ff ff       	call   c0101ca0 <ide_read_secs>
c0110af1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110af4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110af8:	74 3f                	je     c0110b39 <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110afa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110afd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110b01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b04:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110b08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b0b:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b12:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110b16:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b19:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110b1d:	c7 44 24 08 c0 8c 11 	movl   $0xc0118cc0,0x8(%esp)
c0110b24:	c0 
c0110b25:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0110b2c:	00 
c0110b2d:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110b34:	e8 8f 03 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110b39:	c9                   	leave  
c0110b3a:	c3                   	ret    

c0110b3b <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110b3b:	55                   	push   %ebp
c0110b3c:	89 e5                	mov    %esp,%ebp
c0110b3e:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110b41:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b44:	c1 e0 03             	shl    $0x3,%eax
c0110b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110b4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b4d:	c1 e0 03             	shl    $0x3,%eax
c0110b50:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110b53:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110b58:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110b5b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110b5f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110b63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b66:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110b6a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110b71:	e8 6c 13 ff ff       	call   c0101ee2 <ide_write_secs>
c0110b76:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110b79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110b7d:	74 3f                	je     c0110bbe <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110b7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b82:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110b86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b89:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b90:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b97:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110b9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110ba2:	c7 44 24 08 24 8d 11 	movl   $0xc0118d24,0x8(%esp)
c0110ba9:	c0 
c0110baa:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c0110bb1:	00 
c0110bb2:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110bb9:	e8 0a 03 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110bbe:	c9                   	leave  
c0110bbf:	c3                   	ret    

c0110bc0 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110bc0:	55                   	push   %ebp
c0110bc1:	89 e5                	mov    %esp,%ebp
c0110bc3:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bc9:	8b 40 04             	mov    0x4(%eax),%eax
c0110bcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bd2:	8b 40 0c             	mov    0xc(%eax),%eax
c0110bd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110bd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110bdb:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110be1:	85 c0                	test   %eax,%eax
c0110be3:	0f 48 c2             	cmovs  %edx,%eax
c0110be6:	c1 f8 0c             	sar    $0xc,%eax
c0110be9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bef:	c1 e8 0c             	shr    $0xc,%eax
c0110bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110bf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110bf8:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110bfd:	85 c0                	test   %eax,%eax
c0110bff:	75 0c                	jne    c0110c0d <disk0_io+0x4d>
c0110c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c04:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110c09:	85 c0                	test   %eax,%eax
c0110c0b:	74 0a                	je     c0110c17 <disk0_io+0x57>
        return -E_INVAL;
c0110c0d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110c12:	e9 7a 01 00 00       	jmp    c0110d91 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110c17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110c1a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110c1d:	01 c2                	add    %eax,%edx
c0110c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c22:	8b 00                	mov    (%eax),%eax
c0110c24:	39 c2                	cmp    %eax,%edx
c0110c26:	76 0a                	jbe    c0110c32 <disk0_io+0x72>
        return -E_INVAL;
c0110c28:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110c2d:	e9 5f 01 00 00       	jmp    c0110d91 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110c32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110c36:	75 0a                	jne    c0110c42 <disk0_io+0x82>
        return 0;
c0110c38:	b8 00 00 00 00       	mov    $0x0,%eax
c0110c3d:	e9 4f 01 00 00       	jmp    c0110d91 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110c42:	e8 33 fe ff ff       	call   c0110a7a <lock_disk0>
    while (resid != 0) {
c0110c47:	e9 31 01 00 00       	jmp    c0110d7d <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110c4c:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110c53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110c57:	0f 84 89 00 00 00    	je     c0110ce6 <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110c5d:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110c62:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110c65:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110c69:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110c70:	00 
c0110c71:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110c74:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110c78:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110c7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c7f:	89 04 24             	mov    %eax,(%esp)
c0110c82:	e8 b5 a5 ff ff       	call   c010b23c <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110c87:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c8a:	85 c0                	test   %eax,%eax
c0110c8c:	74 14                	je     c0110ca2 <disk0_io+0xe2>
c0110c8e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c91:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110c94:	77 0c                	ja     c0110ca2 <disk0_io+0xe2>
c0110c96:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c99:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110c9e:	85 c0                	test   %eax,%eax
c0110ca0:	74 24                	je     c0110cc6 <disk0_io+0x106>
c0110ca2:	c7 44 24 0c 70 8d 11 	movl   $0xc0118d70,0xc(%esp)
c0110ca9:	c0 
c0110caa:	c7 44 24 08 ae 8d 11 	movl   $0xc0118dae,0x8(%esp)
c0110cb1:	c0 
c0110cb2:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110cb9:	00 
c0110cba:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110cc1:	e8 02 02 ff ff       	call   c0100ec8 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110cc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110cc9:	c1 e8 0c             	shr    $0xc,%eax
c0110ccc:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110ccf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110cd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cd9:	89 04 24             	mov    %eax,(%esp)
c0110cdc:	e8 5a fe ff ff       	call   c0110b3b <disk0_write_blks_nolock>
c0110ce1:	e9 8b 00 00 00       	jmp    c0110d71 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110ce6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110ce9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110cec:	76 06                	jbe    c0110cf4 <disk0_io+0x134>
                alen = resid;
c0110cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110cf1:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110cf4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110cf7:	c1 e8 0c             	shr    $0xc,%eax
c0110cfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0110cfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110d07:	89 04 24             	mov    %eax,(%esp)
c0110d0a:	e8 a7 fd ff ff       	call   c0110ab6 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0110d0f:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110d14:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110d17:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110d1b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110d22:	00 
c0110d23:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110d26:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110d2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d31:	89 04 24             	mov    %eax,(%esp)
c0110d34:	e8 03 a5 ff ff       	call   c010b23c <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0110d39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d3c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110d3f:	75 0c                	jne    c0110d4d <disk0_io+0x18d>
c0110d41:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d44:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110d49:	85 c0                	test   %eax,%eax
c0110d4b:	74 24                	je     c0110d71 <disk0_io+0x1b1>
c0110d4d:	c7 44 24 0c c4 8d 11 	movl   $0xc0118dc4,0xc(%esp)
c0110d54:	c0 
c0110d55:	c7 44 24 08 ae 8d 11 	movl   $0xc0118dae,0x8(%esp)
c0110d5c:	c0 
c0110d5d:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0110d64:	00 
c0110d65:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110d6c:	e8 57 01 ff ff       	call   c0100ec8 <__panic>
        }
        resid -= copied, blkno += nblks;
c0110d71:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d74:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0110d77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d7a:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110d7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d81:	0f 85 c5 fe ff ff    	jne    c0110c4c <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c0110d87:	e8 02 fd ff ff       	call   c0110a8e <unlock_disk0>
    return 0;
c0110d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d91:	c9                   	leave  
c0110d92:	c3                   	ret    

c0110d93 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110d93:	55                   	push   %ebp
c0110d94:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110d96:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110d9b:	5d                   	pop    %ebp
c0110d9c:	c3                   	ret    

c0110d9d <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110d9d:	55                   	push   %ebp
c0110d9e:	89 e5                	mov    %esp,%ebp
c0110da0:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110da3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110daa:	e8 73 0e ff ff       	call   c0101c22 <ide_device_valid>
c0110daf:	85 c0                	test   %eax,%eax
c0110db1:	75 1c                	jne    c0110dcf <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c0110db3:	c7 44 24 08 f4 8d 11 	movl   $0xc0118df4,0x8(%esp)
c0110dba:	c0 
c0110dbb:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0110dc2:	00 
c0110dc3:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110dca:	e8 f9 00 ff ff       	call   c0100ec8 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c0110dcf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110dd6:	e8 86 0e ff ff       	call   c0101c61 <ide_device_size>
c0110ddb:	c1 e8 03             	shr    $0x3,%eax
c0110dde:	89 c2                	mov    %eax,%edx
c0110de0:	8b 45 08             	mov    0x8(%ebp),%eax
c0110de3:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c0110de5:	8b 45 08             	mov    0x8(%ebp),%eax
c0110de8:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c0110def:	8b 45 08             	mov    0x8(%ebp),%eax
c0110df2:	c7 40 08 a2 0a 11 c0 	movl   $0xc0110aa2,0x8(%eax)
    dev->d_close = disk0_close;
c0110df9:	8b 45 08             	mov    0x8(%ebp),%eax
c0110dfc:	c7 40 0c ac 0a 11 c0 	movl   $0xc0110aac,0xc(%eax)
    dev->d_io = disk0_io;
c0110e03:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e06:	c7 40 10 c0 0b 11 c0 	movl   $0xc0110bc0,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c0110e0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e10:	c7 40 14 93 0d 11 c0 	movl   $0xc0110d93,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c0110e17:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0110e1e:	00 
c0110e1f:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110e26:	e8 0e 8c ff ff       	call   c0109a39 <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0110e2b:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0110e32:	e8 23 3e ff ff       	call   c0104c5a <kmalloc>
c0110e37:	a3 dc 1f 15 c0       	mov    %eax,0xc0151fdc
c0110e3c:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110e41:	85 c0                	test   %eax,%eax
c0110e43:	75 1c                	jne    c0110e61 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0110e45:	c7 44 24 08 13 8e 11 	movl   $0xc0118e13,0x8(%esp)
c0110e4c:	c0 
c0110e4d:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c0110e54:	00 
c0110e55:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110e5c:	e8 67 00 ff ff       	call   c0100ec8 <__panic>
    }
}
c0110e61:	c9                   	leave  
c0110e62:	c3                   	ret    

c0110e63 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0110e63:	55                   	push   %ebp
c0110e64:	89 e5                	mov    %esp,%ebp
c0110e66:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110e69:	e8 d1 fb ff ff       	call   c0110a3f <dev_create_inode>
c0110e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110e75:	75 1c                	jne    c0110e93 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c0110e77:	c7 44 24 08 2f 8e 11 	movl   $0xc0118e2f,0x8(%esp)
c0110e7e:	c0 
c0110e7f:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c0110e86:	00 
c0110e87:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110e8e:	e8 35 00 ff ff       	call   c0100ec8 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e96:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110e99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110e9d:	74 0d                	je     c0110eac <dev_init_disk0+0x49>
c0110e9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ea2:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110ea5:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110eaa:	74 24                	je     c0110ed0 <dev_init_disk0+0x6d>
c0110eac:	c7 44 24 0c 48 8e 11 	movl   $0xc0118e48,0xc(%esp)
c0110eb3:	c0 
c0110eb4:	c7 44 24 08 ae 8d 11 	movl   $0xc0118dae,0x8(%esp)
c0110ebb:	c0 
c0110ebc:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0110ec3:	00 
c0110ec4:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110ecb:	e8 f8 ff fe ff       	call   c0100ec8 <__panic>
c0110ed0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ed3:	89 04 24             	mov    %eax,(%esp)
c0110ed6:	e8 c2 fe ff ff       	call   c0110d9d <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0110edb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110ee2:	00 
c0110ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ee6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110eea:	c7 04 24 7b 8e 11 c0 	movl   $0xc0118e7b,(%esp)
c0110ef1:	e8 cb e9 ff ff       	call   c010f8c1 <vfs_add_dev>
c0110ef6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110ef9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110efd:	74 23                	je     c0110f22 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0110eff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f02:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110f06:	c7 44 24 08 81 8e 11 	movl   $0xc0118e81,0x8(%esp)
c0110f0d:	c0 
c0110f0e:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c0110f15:	00 
c0110f16:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110f1d:	e8 a6 ff fe ff       	call   c0100ec8 <__panic>
    }
}
c0110f22:	c9                   	leave  
c0110f23:	c3                   	ret    

c0110f24 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0110f24:	55                   	push   %ebp
c0110f25:	89 e5                	mov    %esp,%ebp
c0110f27:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0110f2a:	9c                   	pushf  
c0110f2b:	58                   	pop    %eax
c0110f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0110f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0110f32:	25 00 02 00 00       	and    $0x200,%eax
c0110f37:	85 c0                	test   %eax,%eax
c0110f39:	74 0c                	je     c0110f47 <__intr_save+0x23>
        intr_disable();
c0110f3b:	e8 ea 11 ff ff       	call   c010212a <intr_disable>
        return 1;
c0110f40:	b8 01 00 00 00       	mov    $0x1,%eax
c0110f45:	eb 05                	jmp    c0110f4c <__intr_save+0x28>
    }
    return 0;
c0110f47:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110f4c:	c9                   	leave  
c0110f4d:	c3                   	ret    

c0110f4e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0110f4e:	55                   	push   %ebp
c0110f4f:	89 e5                	mov    %esp,%ebp
c0110f51:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0110f54:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110f58:	74 05                	je     c0110f5f <__intr_restore+0x11>
        intr_enable();
c0110f5a:	e8 c5 11 ff ff       	call   c0102124 <intr_enable>
    }
}
c0110f5f:	c9                   	leave  
c0110f60:	c3                   	ret    

c0110f61 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c0110f61:	55                   	push   %ebp
c0110f62:	89 e5                	mov    %esp,%ebp
c0110f64:	83 ec 28             	sub    $0x28,%esp
c0110f67:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f6a:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c0110f6d:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0110f71:	0f 84 80 00 00 00    	je     c0110ff7 <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c0110f77:	e8 a8 ff ff ff       	call   c0110f24 <__intr_save>
c0110f7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c0110f7f:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110f84:	99                   	cltd   
c0110f85:	c1 ea 14             	shr    $0x14,%edx
c0110f88:	01 d0                	add    %edx,%eax
c0110f8a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f8f:	29 d0                	sub    %edx,%eax
c0110f91:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0110f95:	88 90 00 20 15 c0    	mov    %dl,-0x3feae000(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c0110f9b:	8b 15 04 30 15 c0    	mov    0xc0153004,%edx
c0110fa1:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0110fa6:	29 c2                	sub    %eax,%edx
c0110fa8:	89 d0                	mov    %edx,%eax
c0110faa:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0110faf:	7f 0d                	jg     c0110fbe <dev_stdin_write+0x5d>
                p_wpos ++;
c0110fb1:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110fb6:	83 c0 01             	add    $0x1,%eax
c0110fb9:	a3 04 30 15 c0       	mov    %eax,0xc0153004
            }
            if (!wait_queue_empty(wait_queue)) {
c0110fbe:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110fc3:	89 04 24             	mov    %eax,(%esp)
c0110fc6:	e8 68 8f ff ff       	call   c0109f33 <wait_queue_empty>
c0110fcb:	85 c0                	test   %eax,%eax
c0110fcd:	75 1d                	jne    c0110fec <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c0110fcf:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110fd4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110fdb:	00 
c0110fdc:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c0110fe3:	80 
c0110fe4:	89 04 24             	mov    %eax,(%esp)
c0110fe7:	e8 fe 8f ff ff       	call   c0109fea <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c0110fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110fef:	89 04 24             	mov    %eax,(%esp)
c0110ff2:	e8 57 ff ff ff       	call   c0110f4e <__intr_restore>
    }
}
c0110ff7:	c9                   	leave  
c0110ff8:	c3                   	ret    

c0110ff9 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c0110ff9:	55                   	push   %ebp
c0110ffa:	89 e5                	mov    %esp,%ebp
c0110ffc:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0110fff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0111006:	e8 19 ff ff ff       	call   c0110f24 <__intr_save>
c011100b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011100e:	e9 bb 00 00 00       	jmp    c01110ce <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0111013:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0111019:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c011101e:	39 c2                	cmp    %eax,%edx
c0111020:	7d 3d                	jge    c011105f <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0111022:	8b 45 08             	mov    0x8(%ebp),%eax
c0111025:	8d 50 01             	lea    0x1(%eax),%edx
c0111028:	89 55 08             	mov    %edx,0x8(%ebp)
c011102b:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0111031:	89 d1                	mov    %edx,%ecx
c0111033:	c1 f9 1f             	sar    $0x1f,%ecx
c0111036:	c1 e9 14             	shr    $0x14,%ecx
c0111039:	01 ca                	add    %ecx,%edx
c011103b:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0111041:	29 ca                	sub    %ecx,%edx
c0111043:	0f b6 92 00 20 15 c0 	movzbl -0x3feae000(%edx),%edx
c011104a:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011104c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111050:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0111055:	83 c0 01             	add    $0x1,%eax
c0111058:	a3 00 30 15 c0       	mov    %eax,0xc0153000
c011105d:	eb 6f                	jmp    c01110ce <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c011105f:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0111062:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c0111065:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c011106a:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c0111071:	80 
c0111072:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111075:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111079:	89 04 24             	mov    %eax,(%esp)
c011107c:	e8 fe 8f ff ff       	call   c010a07f <wait_current_set>
                local_intr_restore(intr_flag);
c0111081:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111084:	89 04 24             	mov    %eax,(%esp)
c0111087:	e8 c2 fe ff ff       	call   c0110f4e <__intr_restore>

                schedule();
c011108c:	e8 cc d4 ff ff       	call   c010e55d <schedule>

                local_intr_save(intr_flag);
c0111091:	e8 8e fe ff ff       	call   c0110f24 <__intr_save>
c0111096:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c0111099:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011109c:	89 04 24             	mov    %eax,(%esp)
c011109f:	e8 ac 8e ff ff       	call   c0109f50 <wait_in_queue>
c01110a4:	85 c0                	test   %eax,%eax
c01110a6:	74 14                	je     c01110bc <dev_stdin_read+0xc3>
c01110a8:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01110ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01110b0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01110b4:	89 04 24             	mov    %eax,(%esp)
c01110b7:	e8 8f 8c ff ff       	call   c0109d4b <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c01110bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110bf:	8b 40 04             	mov    0x4(%eax),%eax
c01110c2:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c01110c7:	75 11                	jne    c01110da <dev_stdin_read+0xe1>
c01110c9:	e9 45 ff ff ff       	jmp    c0111013 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c01110ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01110d1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01110d4:	0f 82 39 ff ff ff    	jb     c0111013 <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c01110da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110dd:	89 04 24             	mov    %eax,(%esp)
c01110e0:	e8 69 fe ff ff       	call   c0110f4e <__intr_restore>
    return ret;
c01110e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01110e8:	c9                   	leave  
c01110e9:	c3                   	ret    

c01110ea <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c01110ea:	55                   	push   %ebp
c01110eb:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c01110ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01110f1:	74 07                	je     c01110fa <stdin_open+0x10>
        return -E_INVAL;
c01110f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01110f8:	eb 05                	jmp    c01110ff <stdin_open+0x15>
    }
    return 0;
c01110fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01110ff:	5d                   	pop    %ebp
c0111100:	c3                   	ret    

c0111101 <stdin_close>:

static int
stdin_close(struct device *dev) {
c0111101:	55                   	push   %ebp
c0111102:	89 e5                	mov    %esp,%ebp
    return 0;
c0111104:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111109:	5d                   	pop    %ebp
c011110a:	c3                   	ret    

c011110b <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c011110b:	55                   	push   %ebp
c011110c:	89 e5                	mov    %esp,%ebp
c011110e:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c0111111:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111115:	75 36                	jne    c011114d <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c0111117:	8b 45 0c             	mov    0xc(%ebp),%eax
c011111a:	8b 50 0c             	mov    0xc(%eax),%edx
c011111d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111120:	8b 00                	mov    (%eax),%eax
c0111122:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111126:	89 04 24             	mov    %eax,(%esp)
c0111129:	e8 cb fe ff ff       	call   c0110ff9 <dev_stdin_read>
c011112e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111131:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111135:	7e 11                	jle    c0111148 <stdin_io+0x3d>
            iob->io_resid -= ret;
c0111137:	8b 45 0c             	mov    0xc(%ebp),%eax
c011113a:	8b 50 0c             	mov    0xc(%eax),%edx
c011113d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111140:	29 c2                	sub    %eax,%edx
c0111142:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111145:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c0111148:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011114b:	eb 05                	jmp    c0111152 <stdin_io+0x47>
    }
    return -E_INVAL;
c011114d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111152:	c9                   	leave  
c0111153:	c3                   	ret    

c0111154 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0111154:	55                   	push   %ebp
c0111155:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0111157:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011115c:	5d                   	pop    %ebp
c011115d:	c3                   	ret    

c011115e <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c011115e:	55                   	push   %ebp
c011115f:	89 e5                	mov    %esp,%ebp
c0111161:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c0111164:	8b 45 08             	mov    0x8(%ebp),%eax
c0111167:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011116d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111170:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c0111177:	8b 45 08             	mov    0x8(%ebp),%eax
c011117a:	c7 40 08 ea 10 11 c0 	movl   $0xc01110ea,0x8(%eax)
    dev->d_close = stdin_close;
c0111181:	8b 45 08             	mov    0x8(%ebp),%eax
c0111184:	c7 40 0c 01 11 11 c0 	movl   $0xc0111101,0xc(%eax)
    dev->d_io = stdin_io;
c011118b:	8b 45 08             	mov    0x8(%ebp),%eax
c011118e:	c7 40 10 0b 11 11 c0 	movl   $0xc011110b,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c0111195:	8b 45 08             	mov    0x8(%ebp),%eax
c0111198:	c7 40 14 54 11 11 c0 	movl   $0xc0111154,0x14(%eax)

    p_rpos = p_wpos = 0;
c011119f:	c7 05 04 30 15 c0 00 	movl   $0x0,0xc0153004
c01111a6:	00 00 00 
c01111a9:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c01111ae:	a3 00 30 15 c0       	mov    %eax,0xc0153000
    wait_queue_init(wait_queue);
c01111b3:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01111b8:	89 04 24             	mov    %eax,(%esp)
c01111bb:	e8 c8 8a ff ff       	call   c0109c88 <wait_queue_init>
}
c01111c0:	c9                   	leave  
c01111c1:	c3                   	ret    

c01111c2 <dev_init_stdin>:

void
dev_init_stdin(void) {
c01111c2:	55                   	push   %ebp
c01111c3:	89 e5                	mov    %esp,%ebp
c01111c5:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c01111c8:	e8 72 f8 ff ff       	call   c0110a3f <dev_create_inode>
c01111cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01111d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01111d4:	75 1c                	jne    c01111f2 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c01111d6:	c7 44 24 08 9c 8e 11 	movl   $0xc0118e9c,0x8(%esp)
c01111dd:	c0 
c01111de:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01111e5:	00 
c01111e6:	c7 04 24 b5 8e 11 c0 	movl   $0xc0118eb5,(%esp)
c01111ed:	e8 d6 fc fe ff       	call   c0100ec8 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c01111f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01111f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01111fc:	74 0d                	je     c011120b <dev_init_stdin+0x49>
c01111fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111201:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111204:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111209:	74 24                	je     c011122f <dev_init_stdin+0x6d>
c011120b:	c7 44 24 0c d0 8e 11 	movl   $0xc0118ed0,0xc(%esp)
c0111212:	c0 
c0111213:	c7 44 24 08 03 8f 11 	movl   $0xc0118f03,0x8(%esp)
c011121a:	c0 
c011121b:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0111222:	00 
c0111223:	c7 04 24 b5 8e 11 c0 	movl   $0xc0118eb5,(%esp)
c011122a:	e8 99 fc fe ff       	call   c0100ec8 <__panic>
c011122f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111232:	89 04 24             	mov    %eax,(%esp)
c0111235:	e8 24 ff ff ff       	call   c011115e <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c011123a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111241:	00 
c0111242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111245:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111249:	c7 04 24 18 8f 11 c0 	movl   $0xc0118f18,(%esp)
c0111250:	e8 6c e6 ff ff       	call   c010f8c1 <vfs_add_dev>
c0111255:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111258:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011125c:	74 23                	je     c0111281 <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c011125e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111261:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111265:	c7 44 24 08 1e 8f 11 	movl   $0xc0118f1e,0x8(%esp)
c011126c:	c0 
c011126d:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c0111274:	00 
c0111275:	c7 04 24 b5 8e 11 c0 	movl   $0xc0118eb5,(%esp)
c011127c:	e8 47 fc fe ff       	call   c0100ec8 <__panic>
    }
}
c0111281:	c9                   	leave  
c0111282:	c3                   	ret    

c0111283 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c0111283:	55                   	push   %ebp
c0111284:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c0111286:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011128a:	74 07                	je     c0111293 <stdout_open+0x10>
        return -E_INVAL;
c011128c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111291:	eb 05                	jmp    c0111298 <stdout_open+0x15>
    }
    return 0;
c0111293:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111298:	5d                   	pop    %ebp
c0111299:	c3                   	ret    

c011129a <stdout_close>:

static int
stdout_close(struct device *dev) {
c011129a:	55                   	push   %ebp
c011129b:	89 e5                	mov    %esp,%ebp
    return 0;
c011129d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01112a2:	5d                   	pop    %ebp
c01112a3:	c3                   	ret    

c01112a4 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c01112a4:	55                   	push   %ebp
c01112a5:	89 e5                	mov    %esp,%ebp
c01112a7:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c01112aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01112ae:	74 41                	je     c01112f1 <stdout_io+0x4d>
        char *data = iob->io_base;
c01112b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112b3:	8b 00                	mov    (%eax),%eax
c01112b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c01112b8:	eb 26                	jmp    c01112e0 <stdout_io+0x3c>
            cputchar(*data ++);
c01112ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112bd:	8d 50 01             	lea    0x1(%eax),%edx
c01112c0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01112c3:	0f b6 00             	movzbl (%eax),%eax
c01112c6:	0f be c0             	movsbl %al,%eax
c01112c9:	89 04 24             	mov    %eax,(%esp)
c01112cc:	e8 ba f0 fe ff       	call   c010038b <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c01112d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112d4:	8b 40 0c             	mov    0xc(%eax),%eax
c01112d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01112da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112dd:	89 50 0c             	mov    %edx,0xc(%eax)
c01112e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112e3:	8b 40 0c             	mov    0xc(%eax),%eax
c01112e6:	85 c0                	test   %eax,%eax
c01112e8:	75 d0                	jne    c01112ba <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c01112ea:	b8 00 00 00 00       	mov    $0x0,%eax
c01112ef:	eb 05                	jmp    c01112f6 <stdout_io+0x52>
    }
    return -E_INVAL;
c01112f1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01112f6:	c9                   	leave  
c01112f7:	c3                   	ret    

c01112f8 <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c01112f8:	55                   	push   %ebp
c01112f9:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c01112fb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111300:	5d                   	pop    %ebp
c0111301:	c3                   	ret    

c0111302 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0111302:	55                   	push   %ebp
c0111303:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0111305:	8b 45 08             	mov    0x8(%ebp),%eax
c0111308:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111311:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c0111318:	8b 45 08             	mov    0x8(%ebp),%eax
c011131b:	c7 40 08 83 12 11 c0 	movl   $0xc0111283,0x8(%eax)
    dev->d_close = stdout_close;
c0111322:	8b 45 08             	mov    0x8(%ebp),%eax
c0111325:	c7 40 0c 9a 12 11 c0 	movl   $0xc011129a,0xc(%eax)
    dev->d_io = stdout_io;
c011132c:	8b 45 08             	mov    0x8(%ebp),%eax
c011132f:	c7 40 10 a4 12 11 c0 	movl   $0xc01112a4,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c0111336:	8b 45 08             	mov    0x8(%ebp),%eax
c0111339:	c7 40 14 f8 12 11 c0 	movl   $0xc01112f8,0x14(%eax)
}
c0111340:	5d                   	pop    %ebp
c0111341:	c3                   	ret    

c0111342 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111342:	55                   	push   %ebp
c0111343:	89 e5                	mov    %esp,%ebp
c0111345:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0111348:	e8 f2 f6 ff ff       	call   c0110a3f <dev_create_inode>
c011134d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111350:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111354:	75 1c                	jne    c0111372 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c0111356:	c7 44 24 08 38 8f 11 	movl   $0xc0118f38,0x8(%esp)
c011135d:	c0 
c011135e:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111365:	00 
c0111366:	c7 04 24 52 8f 11 c0 	movl   $0xc0118f52,(%esp)
c011136d:	e8 56 fb fe ff       	call   c0100ec8 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c0111372:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111375:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111378:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011137c:	74 0d                	je     c011138b <dev_init_stdout+0x49>
c011137e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111381:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111384:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111389:	74 24                	je     c01113af <dev_init_stdout+0x6d>
c011138b:	c7 44 24 0c 6c 8f 11 	movl   $0xc0118f6c,0xc(%esp)
c0111392:	c0 
c0111393:	c7 44 24 08 9f 8f 11 	movl   $0xc0118f9f,0x8(%esp)
c011139a:	c0 
c011139b:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c01113a2:	00 
c01113a3:	c7 04 24 52 8f 11 c0 	movl   $0xc0118f52,(%esp)
c01113aa:	e8 19 fb fe ff       	call   c0100ec8 <__panic>
c01113af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113b2:	89 04 24             	mov    %eax,(%esp)
c01113b5:	e8 48 ff ff ff       	call   c0111302 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c01113ba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01113c1:	00 
c01113c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01113c9:	c7 04 24 b4 8f 11 c0 	movl   $0xc0118fb4,(%esp)
c01113d0:	e8 ec e4 ff ff       	call   c010f8c1 <vfs_add_dev>
c01113d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01113d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01113dc:	74 23                	je     c0111401 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c01113de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01113e5:	c7 44 24 08 bb 8f 11 	movl   $0xc0118fbb,0x8(%esp)
c01113ec:	c0 
c01113ed:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c01113f4:	00 
c01113f5:	c7 04 24 52 8f 11 c0 	movl   $0xc0118f52,(%esp)
c01113fc:	e8 c7 fa fe ff       	call   c0100ec8 <__panic>
    }
}
c0111401:	c9                   	leave  
c0111402:	c3                   	ret    

c0111403 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0111403:	55                   	push   %ebp
c0111404:	89 e5                	mov    %esp,%ebp
c0111406:	56                   	push   %esi
c0111407:	53                   	push   %ebx
c0111408:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c011140b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011140f:	74 0b                	je     c011141c <bitmap_create+0x19>
c0111411:	8b 45 08             	mov    0x8(%ebp),%eax
c0111414:	83 c0 20             	add    $0x20,%eax
c0111417:	3b 45 08             	cmp    0x8(%ebp),%eax
c011141a:	77 24                	ja     c0111440 <bitmap_create+0x3d>
c011141c:	c7 44 24 0c d8 8f 11 	movl   $0xc0118fd8,0xc(%esp)
c0111423:	c0 
c0111424:	c7 44 24 08 00 90 11 	movl   $0xc0119000,0x8(%esp)
c011142b:	c0 
c011142c:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111433:	00 
c0111434:	c7 04 24 15 90 11 c0 	movl   $0xc0119015,(%esp)
c011143b:	e8 88 fa fe ff       	call   c0100ec8 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0111440:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0111447:	e8 0e 38 ff ff       	call   c0104c5a <kmalloc>
c011144c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011144f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111453:	75 0a                	jne    c011145f <bitmap_create+0x5c>
        return NULL;
c0111455:	b8 00 00 00 00       	mov    $0x0,%eax
c011145a:	e9 43 01 00 00       	jmp    c01115a2 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c011145f:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c0111466:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111469:	8b 55 08             	mov    0x8(%ebp),%edx
c011146c:	01 d0                	add    %edx,%eax
c011146e:	83 e8 01             	sub    $0x1,%eax
c0111471:	ba 00 00 00 00       	mov    $0x0,%edx
c0111476:	f7 75 ec             	divl   -0x14(%ebp)
c0111479:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c011147c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011147f:	c1 e0 02             	shl    $0x2,%eax
c0111482:	89 04 24             	mov    %eax,(%esp)
c0111485:	e8 d0 37 ff ff       	call   c0104c5a <kmalloc>
c011148a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011148d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111491:	75 15                	jne    c01114a8 <bitmap_create+0xa5>
        kfree(bitmap);
c0111493:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111496:	89 04 24             	mov    %eax,(%esp)
c0111499:	e8 d7 37 ff ff       	call   c0104c75 <kfree>
        return NULL;
c011149e:	b8 00 00 00 00       	mov    $0x0,%eax
c01114a3:	e9 fa 00 00 00       	jmp    c01115a2 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c01114a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114ab:	8b 55 08             	mov    0x8(%ebp),%edx
c01114ae:	89 10                	mov    %edx,(%eax)
c01114b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01114b6:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c01114b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114bc:	c1 e0 02             	shl    $0x2,%eax
c01114bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01114c3:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c01114ca:	ff 
c01114cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01114ce:	89 04 24             	mov    %eax,(%esp)
c01114d1:	e8 5c 3f 00 00       	call   c0115432 <memset>
c01114d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01114d9:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c01114dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114df:	c1 e0 05             	shl    $0x5,%eax
c01114e2:	3b 45 08             	cmp    0x8(%ebp),%eax
c01114e5:	0f 84 b4 00 00 00    	je     c011159f <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c01114eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114ee:	83 e8 01             	sub    $0x1,%eax
c01114f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01114f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01114f7:	c1 e0 05             	shl    $0x5,%eax
c01114fa:	89 c2                	mov    %eax,%edx
c01114fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01114ff:	29 d0                	sub    %edx,%eax
c0111501:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0111504:	8b 45 08             	mov    0x8(%ebp),%eax
c0111507:	c1 e8 05             	shr    $0x5,%eax
c011150a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c011150d:	74 24                	je     c0111533 <bitmap_create+0x130>
c011150f:	c7 44 24 0c 2a 90 11 	movl   $0xc011902a,0xc(%esp)
c0111516:	c0 
c0111517:	c7 44 24 08 00 90 11 	movl   $0xc0119000,0x8(%esp)
c011151e:	c0 
c011151f:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c0111526:	00 
c0111527:	c7 04 24 15 90 11 c0 	movl   $0xc0119015,(%esp)
c011152e:	e8 95 f9 fe ff       	call   c0100ec8 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111533:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111537:	74 06                	je     c011153f <bitmap_create+0x13c>
c0111539:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011153d:	76 24                	jbe    c0111563 <bitmap_create+0x160>
c011153f:	c7 44 24 0c 44 90 11 	movl   $0xc0119044,0xc(%esp)
c0111546:	c0 
c0111547:	c7 44 24 08 00 90 11 	movl   $0xc0119000,0x8(%esp)
c011154e:	c0 
c011154f:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c0111556:	00 
c0111557:	c7 04 24 15 90 11 c0 	movl   $0xc0119015,(%esp)
c011155e:	e8 65 f9 fe ff       	call   c0100ec8 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c0111563:	eb 34                	jmp    c0111599 <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c0111565:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111568:	8b 40 08             	mov    0x8(%eax),%eax
c011156b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011156e:	c1 e2 02             	shl    $0x2,%edx
c0111571:	01 c2                	add    %eax,%edx
c0111573:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111576:	8b 40 08             	mov    0x8(%eax),%eax
c0111579:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c011157c:	c1 e1 02             	shl    $0x2,%ecx
c011157f:	01 c8                	add    %ecx,%eax
c0111581:	8b 18                	mov    (%eax),%ebx
c0111583:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111586:	be 01 00 00 00       	mov    $0x1,%esi
c011158b:	89 c1                	mov    %eax,%ecx
c011158d:	d3 e6                	shl    %cl,%esi
c011158f:	89 f0                	mov    %esi,%eax
c0111591:	31 d8                	xor    %ebx,%eax
c0111593:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c0111595:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111599:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011159d:	76 c6                	jbe    c0111565 <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c011159f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01115a2:	83 c4 30             	add    $0x30,%esp
c01115a5:	5b                   	pop    %ebx
c01115a6:	5e                   	pop    %esi
c01115a7:	5d                   	pop    %ebp
c01115a8:	c3                   	ret    

c01115a9 <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01115a9:	55                   	push   %ebp
c01115aa:	89 e5                	mov    %esp,%ebp
c01115ac:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c01115af:	8b 45 08             	mov    0x8(%ebp),%eax
c01115b2:	8b 40 08             	mov    0x8(%eax),%eax
c01115b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c01115b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01115bb:	8b 40 04             	mov    0x4(%eax),%eax
c01115be:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c01115c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01115c8:	e9 bb 00 00 00       	jmp    c0111688 <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c01115cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01115d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01115da:	01 d0                	add    %edx,%eax
c01115dc:	8b 00                	mov    (%eax),%eax
c01115de:	85 c0                	test   %eax,%eax
c01115e0:	0f 84 9e 00 00 00    	je     c0111684 <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c01115e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01115ed:	eb 6b                	jmp    c011165a <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c01115ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115f2:	ba 01 00 00 00       	mov    $0x1,%edx
c01115f7:	89 c1                	mov    %eax,%ecx
c01115f9:	d3 e2                	shl    %cl,%edx
c01115fb:	89 d0                	mov    %edx,%eax
c01115fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c0111600:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111603:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011160a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011160d:	01 d0                	add    %edx,%eax
c011160f:	8b 00                	mov    (%eax),%eax
c0111611:	23 45 e4             	and    -0x1c(%ebp),%eax
c0111614:	85 c0                	test   %eax,%eax
c0111616:	74 3e                	je     c0111656 <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c0111618:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011161b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111622:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111625:	01 c2                	add    %eax,%edx
c0111627:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011162a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0111631:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111634:	01 c8                	add    %ecx,%eax
c0111636:	8b 00                	mov    (%eax),%eax
c0111638:	33 45 e4             	xor    -0x1c(%ebp),%eax
c011163b:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c011163d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111640:	c1 e0 05             	shl    $0x5,%eax
c0111643:	89 c2                	mov    %eax,%edx
c0111645:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111648:	01 c2                	add    %eax,%edx
c011164a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011164d:	89 10                	mov    %edx,(%eax)
                    return 0;
c011164f:	b8 00 00 00 00       	mov    $0x0,%eax
c0111654:	eb 43                	jmp    c0111699 <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111656:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011165a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c011165e:	76 8f                	jbe    c01115ef <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c0111660:	c7 44 24 0c 69 90 11 	movl   $0xc0119069,0xc(%esp)
c0111667:	c0 
c0111668:	c7 44 24 08 00 90 11 	movl   $0xc0119000,0x8(%esp)
c011166f:	c0 
c0111670:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c0111677:	00 
c0111678:	c7 04 24 15 90 11 c0 	movl   $0xc0119015,(%esp)
c011167f:	e8 44 f8 fe ff       	call   c0100ec8 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c0111684:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011168b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011168e:	0f 82 39 ff ff ff    	jb     c01115cd <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c0111694:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0111699:	c9                   	leave  
c011169a:	c3                   	ret    

c011169b <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c011169b:	55                   	push   %ebp
c011169c:	89 e5                	mov    %esp,%ebp
c011169e:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c01116a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01116a4:	8b 00                	mov    (%eax),%eax
c01116a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01116a9:	77 24                	ja     c01116cf <bitmap_translate+0x34>
c01116ab:	c7 44 24 0c 6b 90 11 	movl   $0xc011906b,0xc(%esp)
c01116b2:	c0 
c01116b3:	c7 44 24 08 00 90 11 	movl   $0xc0119000,0x8(%esp)
c01116ba:	c0 
c01116bb:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c01116c2:	00 
c01116c3:	c7 04 24 15 90 11 c0 	movl   $0xc0119015,(%esp)
c01116ca:	e8 f9 f7 fe ff       	call   c0100ec8 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c01116cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01116d2:	c1 e8 05             	shr    $0x5,%eax
c01116d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01116d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01116db:	83 e0 1f             	and    $0x1f,%eax
c01116de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c01116e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01116e4:	8b 40 08             	mov    0x8(%eax),%eax
c01116e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01116ea:	c1 e2 02             	shl    $0x2,%edx
c01116ed:	01 c2                	add    %eax,%edx
c01116ef:	8b 45 10             	mov    0x10(%ebp),%eax
c01116f2:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c01116f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116f7:	ba 01 00 00 00       	mov    $0x1,%edx
c01116fc:	89 c1                	mov    %eax,%ecx
c01116fe:	d3 e2                	shl    %cl,%edx
c0111700:	89 d0                	mov    %edx,%eax
c0111702:	89 c2                	mov    %eax,%edx
c0111704:	8b 45 14             	mov    0x14(%ebp),%eax
c0111707:	89 10                	mov    %edx,(%eax)
}
c0111709:	c9                   	leave  
c011170a:	c3                   	ret    

c011170b <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c011170b:	55                   	push   %ebp
c011170c:	89 e5                	mov    %esp,%ebp
c011170e:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111711:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111714:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111718:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011171b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011171f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111722:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111726:	8b 45 08             	mov    0x8(%ebp),%eax
c0111729:	89 04 24             	mov    %eax,(%esp)
c011172c:	e8 6a ff ff ff       	call   c011169b <bitmap_translate>
    return (*word & mask);
c0111731:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111734:	8b 10                	mov    (%eax),%edx
c0111736:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111739:	21 d0                	and    %edx,%eax
}
c011173b:	c9                   	leave  
c011173c:	c3                   	ret    

c011173d <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c011173d:	55                   	push   %ebp
c011173e:	89 e5                	mov    %esp,%ebp
c0111740:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111743:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111746:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011174a:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011174d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111751:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111754:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111758:	8b 45 08             	mov    0x8(%ebp),%eax
c011175b:	89 04 24             	mov    %eax,(%esp)
c011175e:	e8 38 ff ff ff       	call   c011169b <bitmap_translate>
    assert(!(*word & mask));
c0111763:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111766:	8b 10                	mov    (%eax),%edx
c0111768:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011176b:	21 d0                	and    %edx,%eax
c011176d:	85 c0                	test   %eax,%eax
c011176f:	74 24                	je     c0111795 <bitmap_free+0x58>
c0111771:	c7 44 24 0c 81 90 11 	movl   $0xc0119081,0xc(%esp)
c0111778:	c0 
c0111779:	c7 44 24 08 00 90 11 	movl   $0xc0119000,0x8(%esp)
c0111780:	c0 
c0111781:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111788:	00 
c0111789:	c7 04 24 15 90 11 c0 	movl   $0xc0119015,(%esp)
c0111790:	e8 33 f7 fe ff       	call   c0100ec8 <__panic>
    *word |= mask;
c0111795:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111798:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011179b:	8b 0a                	mov    (%edx),%ecx
c011179d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01117a0:	09 ca                	or     %ecx,%edx
c01117a2:	89 10                	mov    %edx,(%eax)
}
c01117a4:	c9                   	leave  
c01117a5:	c3                   	ret    

c01117a6 <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c01117a6:	55                   	push   %ebp
c01117a7:	89 e5                	mov    %esp,%ebp
c01117a9:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c01117ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01117af:	8b 40 08             	mov    0x8(%eax),%eax
c01117b2:	89 04 24             	mov    %eax,(%esp)
c01117b5:	e8 bb 34 ff ff       	call   c0104c75 <kfree>
    kfree(bitmap);
c01117ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01117bd:	89 04 24             	mov    %eax,(%esp)
c01117c0:	e8 b0 34 ff ff       	call   c0104c75 <kfree>
}
c01117c5:	c9                   	leave  
c01117c6:	c3                   	ret    

c01117c7 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c01117c7:	55                   	push   %ebp
c01117c8:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c01117ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01117ce:	74 12                	je     c01117e2 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c01117d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01117d3:	8b 40 04             	mov    0x4(%eax),%eax
c01117d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01117dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117e0:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c01117e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01117e5:	8b 40 08             	mov    0x8(%eax),%eax
}
c01117e8:	5d                   	pop    %ebp
c01117e9:	c3                   	ret    

c01117ea <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c01117ea:	55                   	push   %ebp
c01117eb:	89 e5                	mov    %esp,%ebp
c01117ed:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c01117f0:	c7 04 24 91 90 11 c0 	movl   $0xc0119091,(%esp)
c01117f7:	e8 d6 08 00 00       	call   c01120d2 <sfs_mount>
c01117fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01117ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111803:	74 23                	je     c0111828 <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111805:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111808:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011180c:	c7 44 24 08 97 90 11 	movl   $0xc0119097,0x8(%esp)
c0111813:	c0 
c0111814:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c011181b:	00 
c011181c:	c7 04 24 b4 90 11 c0 	movl   $0xc01190b4,(%esp)
c0111823:	e8 a0 f6 fe ff       	call   c0100ec8 <__panic>
    }
}
c0111828:	c9                   	leave  
c0111829:	c3                   	ret    

c011182a <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c011182a:	55                   	push   %ebp
c011182b:	89 e5                	mov    %esp,%ebp
c011182d:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111830:	8b 45 08             	mov    0x8(%ebp),%eax
c0111833:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111836:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011183a:	74 0a                	je     c0111846 <sfs_sync+0x1c>
c011183c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011183f:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111842:	85 c0                	test   %eax,%eax
c0111844:	74 24                	je     c011186a <sfs_sync+0x40>
c0111846:	c7 44 24 0c c8 90 11 	movl   $0xc01190c8,0xc(%esp)
c011184d:	c0 
c011184e:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c0111855:	c0 
c0111856:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011185d:	00 
c011185e:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111865:	e8 5e f6 fe ff       	call   c0100ec8 <__panic>
c011186a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011186d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111870:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111873:	89 04 24             	mov    %eax,(%esp)
c0111876:	e8 05 30 00 00       	call   c0114880 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c011187b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011187e:	83 c0 60             	add    $0x60,%eax
c0111881:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111884:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111887:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c011188a:	eb 74                	jmp    c0111900 <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c011188c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011188f:	83 e8 1c             	sub    $0x1c,%eax
c0111892:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0111895:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111898:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011189b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011189f:	74 17                	je     c01118b8 <sfs_sync+0x8e>
c01118a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118a4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01118a7:	85 c0                	test   %eax,%eax
c01118a9:	74 0d                	je     c01118b8 <sfs_sync+0x8e>
c01118ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118ae:	8b 40 3c             	mov    0x3c(%eax),%eax
c01118b1:	8b 40 18             	mov    0x18(%eax),%eax
c01118b4:	85 c0                	test   %eax,%eax
c01118b6:	75 24                	jne    c01118dc <sfs_sync+0xb2>
c01118b8:	c7 44 24 0c 1c 91 11 	movl   $0xc011911c,0xc(%esp)
c01118bf:	c0 
c01118c0:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c01118c7:	c0 
c01118c8:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c01118cf:	00 
c01118d0:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c01118d7:	e8 ec f5 fe ff       	call   c0100ec8 <__panic>
c01118dc:	c7 44 24 04 6a 91 11 	movl   $0xc011916a,0x4(%esp)
c01118e3:	c0 
c01118e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118e7:	89 04 24             	mov    %eax,(%esp)
c01118ea:	e8 db d8 ff ff       	call   c010f1ca <inode_check>
c01118ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118f2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01118f5:	8b 40 18             	mov    0x18(%eax),%eax
c01118f8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01118fb:	89 14 24             	mov    %edx,(%esp)
c01118fe:	ff d0                	call   *%eax
c0111900:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111903:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111906:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111909:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c011190c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011190f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111912:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111915:	0f 85 71 ff ff ff    	jne    c011188c <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c011191b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011191e:	89 04 24             	mov    %eax,(%esp)
c0111921:	e8 86 2f 00 00       	call   c01148ac <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0111926:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111929:	8b 40 34             	mov    0x34(%eax),%eax
c011192c:	85 c0                	test   %eax,%eax
c011192e:	74 50                	je     c0111980 <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111930:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111933:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c011193a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011193d:	89 04 24             	mov    %eax,(%esp)
c0111940:	e8 cd 2d 00 00       	call   c0114712 <sfs_sync_super>
c0111945:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111948:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011194c:	74 0f                	je     c011195d <sfs_sync+0x133>
            sfs->super_dirty = 1;
c011194e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111951:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111958:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011195b:	eb 28                	jmp    c0111985 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c011195d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111960:	89 04 24             	mov    %eax,(%esp)
c0111963:	e8 36 2e 00 00       	call   c011479e <sfs_sync_freemap>
c0111968:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011196b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011196f:	74 0f                	je     c0111980 <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0111971:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111974:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c011197b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011197e:	eb 05                	jmp    c0111985 <sfs_sync+0x15b>
        }
    }
    return 0;
c0111980:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111985:	c9                   	leave  
c0111986:	c3                   	ret    

c0111987 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0111987:	55                   	push   %ebp
c0111988:	89 e5                	mov    %esp,%ebp
c011198a:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c011198d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111990:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111993:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111997:	74 0a                	je     c01119a3 <sfs_get_root+0x1c>
c0111999:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011199c:	8b 40 6c             	mov    0x6c(%eax),%eax
c011199f:	85 c0                	test   %eax,%eax
c01119a1:	74 24                	je     c01119c7 <sfs_get_root+0x40>
c01119a3:	c7 44 24 0c c8 90 11 	movl   $0xc01190c8,0xc(%esp)
c01119aa:	c0 
c01119ab:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c01119b2:	c0 
c01119b3:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c01119ba:	00 
c01119bb:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c01119c2:	e8 01 f5 fe ff       	call   c0100ec8 <__panic>
c01119c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119ca:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01119d1:	00 
c01119d2:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01119d5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01119d9:	89 04 24             	mov    %eax,(%esp)
c01119dc:	e8 e1 0b 00 00       	call   c01125c2 <sfs_load_inode>
c01119e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01119e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01119e8:	74 23                	je     c0111a0d <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c01119ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01119ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01119f1:	c7 44 24 08 70 91 11 	movl   $0xc0119170,0x8(%esp)
c01119f8:	c0 
c01119f9:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111a00:	00 
c0111a01:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111a08:	e8 bb f4 fe ff       	call   c0100ec8 <__panic>
    }
    return node;
c0111a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0111a10:	c9                   	leave  
c0111a11:	c3                   	ret    

c0111a12 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111a12:	55                   	push   %ebp
c0111a13:	89 e5                	mov    %esp,%ebp
c0111a15:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111a18:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111a1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111a22:	74 0a                	je     c0111a2e <sfs_unmount+0x1c>
c0111a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a27:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111a2a:	85 c0                	test   %eax,%eax
c0111a2c:	74 24                	je     c0111a52 <sfs_unmount+0x40>
c0111a2e:	c7 44 24 0c c8 90 11 	movl   $0xc01190c8,0xc(%esp)
c0111a35:	c0 
c0111a36:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c0111a3d:	c0 
c0111a3e:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111a45:	00 
c0111a46:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111a4d:	e8 76 f4 fe ff       	call   c0100ec8 <__panic>
c0111a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111a58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a5b:	83 c0 60             	add    $0x60,%eax
c0111a5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111a61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a64:	8b 40 04             	mov    0x4(%eax),%eax
c0111a67:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111a6a:	0f 94 c0             	sete   %al
c0111a6d:	0f b6 c0             	movzbl %al,%eax
c0111a70:	85 c0                	test   %eax,%eax
c0111a72:	75 07                	jne    c0111a7b <sfs_unmount+0x69>
        return -E_BUSY;
c0111a74:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111a79:	eb 68                	jmp    c0111ae3 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111a7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a7e:	8b 40 34             	mov    0x34(%eax),%eax
c0111a81:	85 c0                	test   %eax,%eax
c0111a83:	74 24                	je     c0111aa9 <sfs_unmount+0x97>
c0111a85:	c7 44 24 0c 89 91 11 	movl   $0xc0119189,0xc(%esp)
c0111a8c:	c0 
c0111a8d:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c0111a94:	c0 
c0111a95:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111a9c:	00 
c0111a9d:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111aa4:	e8 1f f4 fe ff       	call   c0100ec8 <__panic>
    bitmap_destroy(sfs->freemap);
c0111aa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111aac:	8b 40 30             	mov    0x30(%eax),%eax
c0111aaf:	89 04 24             	mov    %eax,(%esp)
c0111ab2:	e8 ef fc ff ff       	call   c01117a6 <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111ab7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111aba:	8b 40 38             	mov    0x38(%eax),%eax
c0111abd:	89 04 24             	mov    %eax,(%esp)
c0111ac0:	e8 b0 31 ff ff       	call   c0104c75 <kfree>
    kfree(sfs->hash_list);
c0111ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ac8:	8b 40 68             	mov    0x68(%eax),%eax
c0111acb:	89 04 24             	mov    %eax,(%esp)
c0111ace:	e8 a2 31 ff ff       	call   c0104c75 <kfree>
    kfree(sfs);
c0111ad3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ad6:	89 04 24             	mov    %eax,(%esp)
c0111ad9:	e8 97 31 ff ff       	call   c0104c75 <kfree>
    return 0;
c0111ade:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111ae3:	c9                   	leave  
c0111ae4:	c3                   	ret    

c0111ae5 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111ae5:	55                   	push   %ebp
c0111ae6:	89 e5                	mov    %esp,%ebp
c0111ae8:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0111aee:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111af1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111af5:	74 0a                	je     c0111b01 <sfs_cleanup+0x1c>
c0111af7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111afa:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111afd:	85 c0                	test   %eax,%eax
c0111aff:	74 24                	je     c0111b25 <sfs_cleanup+0x40>
c0111b01:	c7 44 24 0c c8 90 11 	movl   $0xc01190c8,0xc(%esp)
c0111b08:	c0 
c0111b09:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c0111b10:	c0 
c0111b11:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111b18:	00 
c0111b19:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111b20:	e8 a3 f3 fe ff       	call   c0100ec8 <__panic>
c0111b25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b28:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111b2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b2e:	8b 40 04             	mov    0x4(%eax),%eax
c0111b31:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111b34:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b37:	8b 40 08             	mov    0x8(%eax),%eax
c0111b3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111b3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111b43:	89 d1                	mov    %edx,%ecx
c0111b45:	29 c1                	sub    %eax,%ecx
c0111b47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b4a:	8d 50 0c             	lea    0xc(%eax),%edx
c0111b4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111b50:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111b54:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b57:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111b5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111b5f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111b63:	c7 04 24 9c 91 11 c0 	movl   $0xc011919c,(%esp)
c0111b6a:	e8 f6 e7 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111b6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111b76:	eb 1d                	jmp    c0111b95 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111b78:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b7b:	8b 40 70             	mov    0x70(%eax),%eax
c0111b7e:	8b 55 08             	mov    0x8(%ebp),%edx
c0111b81:	89 14 24             	mov    %edx,(%esp)
c0111b84:	ff d0                	call   *%eax
c0111b86:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111b89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b8d:	75 02                	jne    c0111b91 <sfs_cleanup+0xac>
            break;
c0111b8f:	eb 0a                	jmp    c0111b9b <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111b91:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111b95:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111b99:	7e dd                	jle    c0111b78 <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111b9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b9f:	74 2d                	je     c0111bce <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111ba1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111ba4:	8d 50 0c             	lea    0xc(%eax),%edx
c0111ba7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111baa:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111bae:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111bb2:	c7 44 24 08 bb 91 11 	movl   $0xc01191bb,0x8(%esp)
c0111bb9:	c0 
c0111bba:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111bc1:	00 
c0111bc2:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111bc9:	e8 66 f3 fe ff       	call   c0100f34 <__warn>
    }
}
c0111bce:	c9                   	leave  
c0111bcf:	c3                   	ret    

c0111bd0 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111bd0:	55                   	push   %ebp
c0111bd1:	89 e5                	mov    %esp,%ebp
c0111bd3:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111bd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111bd9:	c1 e0 0c             	shl    $0xc,%eax
c0111bdc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111be0:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111be7:	00 
c0111be8:	8b 45 10             	mov    0x10(%ebp),%eax
c0111beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111bef:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111bf2:	89 04 24             	mov    %eax,(%esp)
c0111bf5:	e8 14 96 ff ff       	call   c010b20e <iobuf_init>
c0111bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111bfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c00:	8b 40 10             	mov    0x10(%eax),%eax
c0111c03:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111c0a:	00 
c0111c0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111c0e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111c12:	8b 55 08             	mov    0x8(%ebp),%edx
c0111c15:	89 14 24             	mov    %edx,(%esp)
c0111c18:	ff d0                	call   *%eax
}
c0111c1a:	c9                   	leave  
c0111c1b:	c3                   	ret    

c0111c1c <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111c1c:	55                   	push   %ebp
c0111c1d:	89 e5                	mov    %esp,%ebp
c0111c1f:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111c22:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111c25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111c29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c2c:	89 04 24             	mov    %eax,(%esp)
c0111c2f:	e8 93 fb ff ff       	call   c01117c7 <bitmap_getdata>
c0111c34:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111c37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111c3b:	74 0f                	je     c0111c4c <sfs_init_freemap+0x30>
c0111c3d:	8b 45 14             	mov    0x14(%ebp),%eax
c0111c40:	c1 e0 0c             	shl    $0xc,%eax
c0111c43:	89 c2                	mov    %eax,%edx
c0111c45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c48:	39 c2                	cmp    %eax,%edx
c0111c4a:	74 24                	je     c0111c70 <sfs_init_freemap+0x54>
c0111c4c:	c7 44 24 0c d8 91 11 	movl   $0xc01191d8,0xc(%esp)
c0111c53:	c0 
c0111c54:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c0111c5b:	c0 
c0111c5c:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111c63:	00 
c0111c64:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111c6b:	e8 58 f2 fe ff       	call   c0100ec8 <__panic>
    while (nblks != 0) {
c0111c70:	eb 36                	jmp    c0111ca8 <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111c72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c75:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111c79:	8b 45 10             	mov    0x10(%ebp),%eax
c0111c7c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111c80:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c83:	89 04 24             	mov    %eax,(%esp)
c0111c86:	e8 45 ff ff ff       	call   c0111bd0 <sfs_init_read>
c0111c8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111c8e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111c92:	74 05                	je     c0111c99 <sfs_init_freemap+0x7d>
            return ret;
c0111c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111c97:	eb 1a                	jmp    c0111cb3 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111c99:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111c9d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111ca1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111ca8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111cac:	75 c4                	jne    c0111c72 <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111cae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111cb3:	c9                   	leave  
c0111cb4:	c3                   	ret    

c0111cb5 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111cb5:	55                   	push   %ebp
c0111cb6:	89 e5                	mov    %esp,%ebp
c0111cb8:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cbe:	8b 40 04             	mov    0x4(%eax),%eax
c0111cc1:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111cc6:	74 0a                	je     c0111cd2 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111cc8:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111ccd:	e9 fe 03 00 00       	jmp    c01120d0 <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0111cd2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111cd9:	e8 df d5 ff ff       	call   c010f2bd <__alloc_fs>
c0111cde:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111ce1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111ce5:	75 0a                	jne    c0111cf1 <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0111ce7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111cec:	e9 df 03 00 00       	jmp    c01120d0 <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111cf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111cf7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111cfb:	74 0a                	je     c0111d07 <sfs_do_mount+0x52>
c0111cfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111d00:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111d03:	85 c0                	test   %eax,%eax
c0111d05:	74 24                	je     c0111d2b <sfs_do_mount+0x76>
c0111d07:	c7 44 24 0c c8 90 11 	movl   $0xc01190c8,0xc(%esp)
c0111d0e:	c0 
c0111d0f:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c0111d16:	c0 
c0111d17:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0111d1e:	00 
c0111d1f:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111d26:	e8 9d f1 fe ff       	call   c0100ec8 <__panic>
c0111d2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111d2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0111d31:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d34:	8b 55 08             	mov    0x8(%ebp),%edx
c0111d37:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0111d3a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0111d41:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0111d48:	e8 0d 2f ff ff       	call   c0104c5a <kmalloc>
c0111d4d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111d50:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d53:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111d56:	89 50 38             	mov    %edx,0x38(%eax)
c0111d59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d5c:	8b 40 38             	mov    0x38(%eax),%eax
c0111d5f:	85 c0                	test   %eax,%eax
c0111d61:	75 05                	jne    c0111d68 <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c0111d63:	e9 5a 03 00 00       	jmp    c01120c2 <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0111d68:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111d6b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111d6f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111d76:	00 
c0111d77:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d7a:	89 04 24             	mov    %eax,(%esp)
c0111d7d:	e8 4e fe ff ff       	call   c0111bd0 <sfs_init_read>
c0111d82:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111d89:	74 05                	je     c0111d90 <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c0111d8b:	e9 27 03 00 00       	jmp    c01120b7 <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c0111d90:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0111d97:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111d9a:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0111d9d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111da0:	8b 00                	mov    (%eax),%eax
c0111da2:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0111da7:	74 22                	je     c0111dcb <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0111da9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111dac:	8b 00                	mov    (%eax),%eax
c0111dae:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0111db5:	2f 
c0111db6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111dba:	c7 04 24 04 92 11 c0 	movl   $0xc0119204,(%esp)
c0111dc1:	e8 9f e5 fe ff       	call   c0100365 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0111dc6:	e9 ec 02 00 00       	jmp    c01120b7 <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c0111dcb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111dce:	8b 50 04             	mov    0x4(%eax),%edx
c0111dd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0111dd4:	8b 00                	mov    (%eax),%eax
c0111dd6:	39 c2                	cmp    %eax,%edx
c0111dd8:	76 24                	jbe    c0111dfe <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0111dda:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ddd:	8b 10                	mov    (%eax),%edx
c0111ddf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111de2:	8b 40 04             	mov    0x4(%eax),%eax
c0111de5:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111de9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111ded:	c7 04 24 3c 92 11 c0 	movl   $0xc011923c,(%esp)
c0111df4:	e8 6c e5 fe ff       	call   c0100365 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0111df9:	e9 b9 02 00 00       	jmp    c01120b7 <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0111dfe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111e01:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0111e05:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e08:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0111e0b:	8b 0a                	mov    (%edx),%ecx
c0111e0d:	89 08                	mov    %ecx,(%eax)
c0111e0f:	8b 4a 04             	mov    0x4(%edx),%ecx
c0111e12:	89 48 04             	mov    %ecx,0x4(%eax)
c0111e15:	8b 4a 08             	mov    0x8(%edx),%ecx
c0111e18:	89 48 08             	mov    %ecx,0x8(%eax)
c0111e1b:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0111e1e:	89 48 0c             	mov    %ecx,0xc(%eax)
c0111e21:	8b 4a 10             	mov    0x10(%edx),%ecx
c0111e24:	89 48 10             	mov    %ecx,0x10(%eax)
c0111e27:	8b 4a 14             	mov    0x14(%edx),%ecx
c0111e2a:	89 48 14             	mov    %ecx,0x14(%eax)
c0111e2d:	8b 4a 18             	mov    0x18(%edx),%ecx
c0111e30:	89 48 18             	mov    %ecx,0x18(%eax)
c0111e33:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0111e36:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0111e39:	8b 4a 20             	mov    0x20(%edx),%ecx
c0111e3c:	89 48 20             	mov    %ecx,0x20(%eax)
c0111e3f:	8b 4a 24             	mov    0x24(%edx),%ecx
c0111e42:	89 48 24             	mov    %ecx,0x24(%eax)
c0111e45:	8b 52 28             	mov    0x28(%edx),%edx
c0111e48:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0111e4b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0111e52:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c0111e59:	e8 fc 2d ff ff       	call   c0104c5a <kmalloc>
c0111e5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0111e61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e64:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0111e67:	89 50 68             	mov    %edx,0x68(%eax)
c0111e6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e6d:	8b 40 68             	mov    0x68(%eax),%eax
c0111e70:	85 c0                	test   %eax,%eax
c0111e72:	75 05                	jne    c0111e79 <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c0111e74:	e9 3e 02 00 00       	jmp    c01120b7 <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111e79:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111e80:	eb 2a                	jmp    c0111eac <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c0111e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111e85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0111e8c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111e8f:	01 d0                	add    %edx,%eax
c0111e91:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0111e94:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111e97:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0111e9a:	89 50 04             	mov    %edx,0x4(%eax)
c0111e9d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111ea0:	8b 50 04             	mov    0x4(%eax),%edx
c0111ea3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111ea6:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111ea8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111eac:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0111eb3:	76 cd                	jbe    c0111e82 <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0111eb5:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0111ebc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ebf:	8b 50 04             	mov    0x4(%eax),%edx
c0111ec2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111ec5:	01 d0                	add    %edx,%eax
c0111ec7:	83 e8 01             	sub    $0x1,%eax
c0111eca:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0111ecd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111ed0:	ba 00 00 00 00       	mov    $0x0,%edx
c0111ed5:	f7 75 d0             	divl   -0x30(%ebp)
c0111ed8:	89 d0                	mov    %edx,%eax
c0111eda:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0111edd:	29 c2                	sub    %eax,%edx
c0111edf:	89 d0                	mov    %edx,%eax
c0111ee1:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0111ee4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111ee7:	89 04 24             	mov    %eax,(%esp)
c0111eea:	e8 14 f5 ff ff       	call   c0111403 <bitmap_create>
c0111eef:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0111ef2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ef5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0111ef8:	89 50 30             	mov    %edx,0x30(%eax)
c0111efb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111efe:	8b 40 30             	mov    0x30(%eax),%eax
c0111f01:	85 c0                	test   %eax,%eax
c0111f03:	75 05                	jne    c0111f0a <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0111f05:	e9 a2 01 00 00       	jmp    c01120ac <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0111f0a:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c0111f11:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f14:	8b 50 04             	mov    0x4(%eax),%edx
c0111f17:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111f1a:	01 d0                	add    %edx,%eax
c0111f1c:	83 e8 01             	sub    $0x1,%eax
c0111f1f:	ba 00 00 00 00       	mov    $0x0,%edx
c0111f24:	f7 75 c0             	divl   -0x40(%ebp)
c0111f27:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0111f2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111f2d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111f31:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0111f34:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111f38:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0111f3f:	00 
c0111f40:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111f43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f4a:	89 04 24             	mov    %eax,(%esp)
c0111f4d:	e8 ca fc ff ff       	call   c0111c1c <sfs_init_freemap>
c0111f52:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111f55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f59:	74 11                	je     c0111f6c <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c0111f5b:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0111f5c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111f5f:	89 04 24             	mov    %eax,(%esp)
c0111f62:	e8 3f f8 ff ff       	call   c01117a6 <bitmap_destroy>
c0111f67:	e9 40 01 00 00       	jmp    c01120ac <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0111f6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f6f:	8b 40 04             	mov    0x4(%eax),%eax
c0111f72:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0111f75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111f7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111f83:	eb 1e                	jmp    c0111fa3 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c0111f85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111f88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f8c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111f8f:	89 04 24             	mov    %eax,(%esp)
c0111f92:	e8 74 f7 ff ff       	call   c011170b <bitmap_test>
c0111f97:	85 c0                	test   %eax,%eax
c0111f99:	74 04                	je     c0111f9f <sfs_do_mount+0x2ea>
            unused_blocks ++;
c0111f9b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111f9f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111fa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111fa6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0111fa9:	72 da                	jb     c0111f85 <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c0111fab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fae:	8b 40 08             	mov    0x8(%eax),%eax
c0111fb1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0111fb4:	74 24                	je     c0111fda <sfs_do_mount+0x325>
c0111fb6:	c7 44 24 0c 6c 92 11 	movl   $0xc011926c,0xc(%esp)
c0111fbd:	c0 
c0111fbe:	c7 44 24 08 f1 90 11 	movl   $0xc01190f1,0x8(%esp)
c0111fc5:	c0 
c0111fc6:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0111fcd:	00 
c0111fce:	c7 04 24 06 91 11 c0 	movl   $0xc0119106,(%esp)
c0111fd5:	e8 ee ee fe ff       	call   c0100ec8 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c0111fda:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fdd:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0111fe4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fe7:	83 c0 3c             	add    $0x3c,%eax
c0111fea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111ff1:	00 
c0111ff2:	89 04 24             	mov    %eax,(%esp)
c0111ff5:	e8 3f 7a ff ff       	call   c0109a39 <sem_init>
    sem_init(&(sfs->io_sem), 1);
c0111ffa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ffd:	83 c0 48             	add    $0x48,%eax
c0112000:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112007:	00 
c0112008:	89 04 24             	mov    %eax,(%esp)
c011200b:	e8 29 7a ff ff       	call   c0109a39 <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c0112010:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112013:	83 c0 54             	add    $0x54,%eax
c0112016:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011201d:	00 
c011201e:	89 04 24             	mov    %eax,(%esp)
c0112021:	e8 13 7a ff ff       	call   c0109a39 <sem_init>
    list_init(&(sfs->inode_list));
c0112026:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112029:	83 c0 60             	add    $0x60,%eax
c011202c:	89 45 b0             	mov    %eax,-0x50(%ebp)
c011202f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112032:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0112035:	89 50 04             	mov    %edx,0x4(%eax)
c0112038:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011203b:	8b 50 04             	mov    0x4(%eax),%edx
c011203e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112041:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112043:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112046:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0112049:	89 d1                	mov    %edx,%ecx
c011204b:	29 c1                	sub    %eax,%ecx
c011204d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112050:	8d 50 0c             	lea    0xc(%eax),%edx
c0112053:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0112056:	89 44 24 10          	mov    %eax,0x10(%esp)
c011205a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011205d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112061:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0112065:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112069:	c7 04 24 96 92 11 c0 	movl   $0xc0119296,(%esp)
c0112070:	e8 f0 e2 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c0112075:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112078:	c7 40 70 2a 18 11 c0 	movl   $0xc011182a,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c011207f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112082:	c7 40 74 87 19 11 c0 	movl   $0xc0111987,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c0112089:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011208c:	c7 40 78 12 1a 11 c0 	movl   $0xc0111a12,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c0112093:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112096:	c7 40 7c e5 1a 11 c0 	movl   $0xc0111ae5,0x7c(%eax)
    *fs_store = fs;
c011209d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01120a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01120a3:	89 10                	mov    %edx,(%eax)
    return 0;
c01120a5:	b8 00 00 00 00       	mov    $0x0,%eax
c01120aa:	eb 24                	jmp    c01120d0 <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c01120ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01120af:	89 04 24             	mov    %eax,(%esp)
c01120b2:	e8 be 2b ff ff       	call   c0104c75 <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c01120b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01120ba:	89 04 24             	mov    %eax,(%esp)
c01120bd:	e8 b3 2b ff ff       	call   c0104c75 <kfree>
failed_cleanup_fs:
    kfree(fs);
c01120c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01120c5:	89 04 24             	mov    %eax,(%esp)
c01120c8:	e8 a8 2b ff ff       	call   c0104c75 <kfree>
    return ret;
c01120cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01120d0:	c9                   	leave  
c01120d1:	c3                   	ret    

c01120d2 <sfs_mount>:

int
sfs_mount(const char *devname) {
c01120d2:	55                   	push   %ebp
c01120d3:	89 e5                	mov    %esp,%ebp
c01120d5:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c01120d8:	c7 44 24 04 b5 1c 11 	movl   $0xc0111cb5,0x4(%esp)
c01120df:	c0 
c01120e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01120e3:	89 04 24             	mov    %eax,(%esp)
c01120e6:	e8 96 d8 ff ff       	call   c010f981 <vfs_mount>
}
c01120eb:	c9                   	leave  
c01120ec:	c3                   	ret    

c01120ed <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c01120ed:	55                   	push   %ebp
c01120ee:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c01120f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01120f3:	8b 40 30             	mov    0x30(%eax),%eax
}
c01120f6:	5d                   	pop    %ebp
c01120f7:	c3                   	ret    

c01120f8 <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c01120f8:	55                   	push   %ebp
c01120f9:	89 e5                	mov    %esp,%ebp
c01120fb:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c01120fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0112101:	83 c0 10             	add    $0x10,%eax
c0112104:	89 04 24             	mov    %eax,(%esp)
c0112107:	e8 bb 7a ff ff       	call   c0109bc7 <down>
}
c011210c:	c9                   	leave  
c011210d:	c3                   	ret    

c011210e <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c011210e:	55                   	push   %ebp
c011210f:	89 e5                	mov    %esp,%ebp
c0112111:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0112114:	8b 45 08             	mov    0x8(%ebp),%eax
c0112117:	83 c0 10             	add    $0x10,%eax
c011211a:	89 04 24             	mov    %eax,(%esp)
c011211d:	e8 8a 7a ff ff       	call   c0109bac <up>
}
c0112122:	c9                   	leave  
c0112123:	c3                   	ret    

c0112124 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0112124:	55                   	push   %ebp
c0112125:	89 e5                	mov    %esp,%ebp
c0112127:	83 ec 28             	sub    $0x28,%esp
c011212a:	8b 45 08             	mov    0x8(%ebp),%eax
c011212d:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0112131:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112135:	83 f8 01             	cmp    $0x1,%eax
c0112138:	74 0c                	je     c0112146 <sfs_get_ops+0x22>
c011213a:	83 f8 02             	cmp    $0x2,%eax
c011213d:	75 0e                	jne    c011214d <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c011213f:	b8 c0 92 11 c0       	mov    $0xc01192c0,%eax
c0112144:	eb 2b                	jmp    c0112171 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0112146:	b8 00 93 11 c0       	mov    $0xc0119300,%eax
c011214b:	eb 24                	jmp    c0112171 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c011214d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112151:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112155:	c7 44 24 08 40 93 11 	movl   $0xc0119340,0x8(%esp)
c011215c:	c0 
c011215d:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0112164:	00 
c0112165:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c011216c:	e8 57 ed fe ff       	call   c0100ec8 <__panic>
}
c0112171:	c9                   	leave  
c0112172:	c3                   	ret    

c0112173 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0112173:	55                   	push   %ebp
c0112174:	89 e5                	mov    %esp,%ebp
c0112176:	53                   	push   %ebx
c0112177:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c011217a:	8b 45 08             	mov    0x8(%ebp),%eax
c011217d:	8b 58 68             	mov    0x68(%eax),%ebx
c0112180:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0112187:	00 
c0112188:	8b 45 0c             	mov    0xc(%ebp),%eax
c011218b:	89 04 24             	mov    %eax,(%esp)
c011218e:	e8 45 27 00 00       	call   c01148d8 <hash32>
c0112193:	c1 e0 03             	shl    $0x3,%eax
c0112196:	01 d8                	add    %ebx,%eax
}
c0112198:	83 c4 14             	add    $0x14,%esp
c011219b:	5b                   	pop    %ebx
c011219c:	5d                   	pop    %ebp
c011219d:	c3                   	ret    

c011219e <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c011219e:	55                   	push   %ebp
c011219f:	89 e5                	mov    %esp,%ebp
c01121a1:	53                   	push   %ebx
c01121a2:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c01121a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121a8:	83 c0 1c             	add    $0x1c,%eax
c01121ab:	8b 55 08             	mov    0x8(%ebp),%edx
c01121ae:	83 c2 60             	add    $0x60,%edx
c01121b1:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01121b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01121b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01121ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01121bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01121c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01121c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01121c6:	8b 40 04             	mov    0x4(%eax),%eax
c01121c9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01121cc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01121cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01121d2:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01121d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01121d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01121db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01121de:	89 10                	mov    %edx,(%eax)
c01121e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01121e3:	8b 10                	mov    (%eax),%edx
c01121e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121e8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01121eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01121ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01121f1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01121f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01121f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01121fa:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c01121fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121ff:	8d 58 24             	lea    0x24(%eax),%ebx
c0112202:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112205:	8b 40 04             	mov    0x4(%eax),%eax
c0112208:	89 44 24 04          	mov    %eax,0x4(%esp)
c011220c:	8b 45 08             	mov    0x8(%ebp),%eax
c011220f:	89 04 24             	mov    %eax,(%esp)
c0112212:	e8 5c ff ff ff       	call   c0112173 <sfs_hash_list>
c0112217:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011221a:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c011221d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112220:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112223:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112226:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0112229:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011222c:	8b 40 04             	mov    0x4(%eax),%eax
c011222f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112232:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0112235:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0112238:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c011223b:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011223e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112241:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0112244:	89 10                	mov    %edx,(%eax)
c0112246:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112249:	8b 10                	mov    (%eax),%edx
c011224b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011224e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112251:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112254:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0112257:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011225a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011225d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0112260:	89 10                	mov    %edx,(%eax)
}
c0112262:	83 c4 54             	add    $0x54,%esp
c0112265:	5b                   	pop    %ebx
c0112266:	5d                   	pop    %ebp
c0112267:	c3                   	ret    

c0112268 <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c0112268:	55                   	push   %ebp
c0112269:	89 e5                	mov    %esp,%ebp
c011226b:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c011226e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112271:	83 c0 1c             	add    $0x1c,%eax
c0112274:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0112277:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011227a:	8b 40 04             	mov    0x4(%eax),%eax
c011227d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0112280:	8b 12                	mov    (%edx),%edx
c0112282:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0112285:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0112288:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011228b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011228e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0112291:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112294:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0112297:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c0112299:	8b 45 08             	mov    0x8(%ebp),%eax
c011229c:	83 c0 24             	add    $0x24,%eax
c011229f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01122a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122a5:	8b 40 04             	mov    0x4(%eax),%eax
c01122a8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01122ab:	8b 12                	mov    (%edx),%edx
c01122ad:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01122b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01122b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01122b9:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01122bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01122bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01122c2:	89 10                	mov    %edx,(%eax)
}
c01122c4:	c9                   	leave  
c01122c5:	c3                   	ret    

c01122c6 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c01122c6:	55                   	push   %ebp
c01122c7:	89 e5                	mov    %esp,%ebp
c01122c9:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c01122cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01122d0:	74 2a                	je     c01122fc <sfs_block_inuse+0x36>
c01122d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01122d5:	8b 40 04             	mov    0x4(%eax),%eax
c01122d8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01122db:	76 1f                	jbe    c01122fc <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c01122dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01122e0:	8b 40 30             	mov    0x30(%eax),%eax
c01122e3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01122e6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01122ea:	89 04 24             	mov    %eax,(%esp)
c01122ed:	e8 19 f4 ff ff       	call   c011170b <bitmap_test>
c01122f2:	85 c0                	test   %eax,%eax
c01122f4:	0f 94 c0             	sete   %al
c01122f7:	0f b6 c0             	movzbl %al,%eax
c01122fa:	eb 2d                	jmp    c0112329 <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c01122fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01122ff:	8b 40 04             	mov    0x4(%eax),%eax
c0112302:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112305:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112309:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011230d:	c7 44 24 08 70 93 11 	movl   $0xc0119370,0x8(%esp)
c0112314:	c0 
c0112315:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c011231c:	00 
c011231d:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112324:	e8 9f eb fe ff       	call   c0100ec8 <__panic>
}
c0112329:	c9                   	leave  
c011232a:	c3                   	ret    

c011232b <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c011232b:	55                   	push   %ebp
c011232c:	89 e5                	mov    %esp,%ebp
c011232e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0112331:	8b 45 08             	mov    0x8(%ebp),%eax
c0112334:	8b 40 30             	mov    0x30(%eax),%eax
c0112337:	8b 55 0c             	mov    0xc(%ebp),%edx
c011233a:	89 54 24 04          	mov    %edx,0x4(%esp)
c011233e:	89 04 24             	mov    %eax,(%esp)
c0112341:	e8 63 f2 ff ff       	call   c01115a9 <bitmap_alloc>
c0112346:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112349:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011234d:	74 08                	je     c0112357 <sfs_block_alloc+0x2c>
        return ret;
c011234f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112352:	e9 9f 00 00 00       	jmp    c01123f6 <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c0112357:	8b 45 08             	mov    0x8(%ebp),%eax
c011235a:	8b 40 08             	mov    0x8(%eax),%eax
c011235d:	85 c0                	test   %eax,%eax
c011235f:	75 24                	jne    c0112385 <sfs_block_alloc+0x5a>
c0112361:	c7 44 24 0c a2 93 11 	movl   $0xc01193a2,0xc(%esp)
c0112368:	c0 
c0112369:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112370:	c0 
c0112371:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0112378:	00 
c0112379:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112380:	e8 43 eb fe ff       	call   c0100ec8 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c0112385:	8b 45 08             	mov    0x8(%ebp),%eax
c0112388:	8b 40 08             	mov    0x8(%eax),%eax
c011238b:	8d 50 ff             	lea    -0x1(%eax),%edx
c011238e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112391:	89 50 08             	mov    %edx,0x8(%eax)
c0112394:	8b 45 08             	mov    0x8(%ebp),%eax
c0112397:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c011239e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123a1:	8b 00                	mov    (%eax),%eax
c01123a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01123aa:	89 04 24             	mov    %eax,(%esp)
c01123ad:	e8 14 ff ff ff       	call   c01122c6 <sfs_block_inuse>
c01123b2:	85 c0                	test   %eax,%eax
c01123b4:	75 24                	jne    c01123da <sfs_block_alloc+0xaf>
c01123b6:	c7 44 24 0c d4 93 11 	movl   $0xc01193d4,0xc(%esp)
c01123bd:	c0 
c01123be:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01123c5:	c0 
c01123c6:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01123cd:	00 
c01123ce:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01123d5:	e8 ee ea fe ff       	call   c0100ec8 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c01123da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123dd:	8b 00                	mov    (%eax),%eax
c01123df:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01123e6:	00 
c01123e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01123ee:	89 04 24             	mov    %eax,(%esp)
c01123f1:	e8 04 24 00 00       	call   c01147fa <sfs_clear_block>
}
c01123f6:	c9                   	leave  
c01123f7:	c3                   	ret    

c01123f8 <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c01123f8:	55                   	push   %ebp
c01123f9:	89 e5                	mov    %esp,%ebp
c01123fb:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c01123fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112401:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112405:	8b 45 08             	mov    0x8(%ebp),%eax
c0112408:	89 04 24             	mov    %eax,(%esp)
c011240b:	e8 b6 fe ff ff       	call   c01122c6 <sfs_block_inuse>
c0112410:	85 c0                	test   %eax,%eax
c0112412:	75 24                	jne    c0112438 <sfs_block_free+0x40>
c0112414:	c7 44 24 0c f5 93 11 	movl   $0xc01193f5,0xc(%esp)
c011241b:	c0 
c011241c:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112423:	c0 
c0112424:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c011242b:	00 
c011242c:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112433:	e8 90 ea fe ff       	call   c0100ec8 <__panic>
    bitmap_free(sfs->freemap, ino);
c0112438:	8b 45 08             	mov    0x8(%ebp),%eax
c011243b:	8b 40 30             	mov    0x30(%eax),%eax
c011243e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112441:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112445:	89 04 24             	mov    %eax,(%esp)
c0112448:	e8 f0 f2 ff ff       	call   c011173d <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c011244d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112450:	8b 40 08             	mov    0x8(%eax),%eax
c0112453:	8d 50 01             	lea    0x1(%eax),%edx
c0112456:	8b 45 08             	mov    0x8(%ebp),%eax
c0112459:	89 50 08             	mov    %edx,0x8(%eax)
c011245c:	8b 45 08             	mov    0x8(%ebp),%eax
c011245f:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0112466:	c9                   	leave  
c0112467:	c3                   	ret    

c0112468 <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c0112468:	55                   	push   %ebp
c0112469:	89 e5                	mov    %esp,%ebp
c011246b:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c011246e:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c0112475:	e8 6d ca ff ff       	call   c010eee7 <__alloc_inode>
c011247a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011247d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112481:	0f 84 b5 00 00 00    	je     c011253c <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c0112487:	8b 45 0c             	mov    0xc(%ebp),%eax
c011248a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011248e:	0f b7 c0             	movzwl %ax,%eax
c0112491:	89 04 24             	mov    %eax,(%esp)
c0112494:	e8 8b fc ff ff       	call   c0112124 <sfs_get_ops>
c0112499:	8b 55 08             	mov    0x8(%ebp),%edx
c011249c:	89 54 24 08          	mov    %edx,0x8(%esp)
c01124a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01124a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124a7:	89 04 24             	mov    %eax,(%esp)
c01124aa:	e8 61 ca ff ff       	call   c010ef10 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c01124af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01124b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01124b9:	74 0d                	je     c01124c8 <sfs_create_inode+0x60>
c01124bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124be:	8b 40 2c             	mov    0x2c(%eax),%eax
c01124c1:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01124c6:	74 24                	je     c01124ec <sfs_create_inode+0x84>
c01124c8:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c01124cf:	c0 
c01124d0:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01124d7:	c0 
c01124d8:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c01124df:	00 
c01124e0:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01124e7:	e8 dc e9 fe ff       	call   c0100ec8 <__panic>
c01124ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c01124f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124f5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01124f8:	89 10                	mov    %edx,(%eax)
c01124fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124fd:	8b 55 10             	mov    0x10(%ebp),%edx
c0112500:	89 50 04             	mov    %edx,0x4(%eax)
c0112503:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112506:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c011250d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112510:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c0112517:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011251a:	83 c0 10             	add    $0x10,%eax
c011251d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112524:	00 
c0112525:	89 04 24             	mov    %eax,(%esp)
c0112528:	e8 0c 75 ff ff       	call   c0109a39 <sem_init>
        *node_store = node;
c011252d:	8b 45 14             	mov    0x14(%ebp),%eax
c0112530:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112533:	89 10                	mov    %edx,(%eax)
        return 0;
c0112535:	b8 00 00 00 00       	mov    $0x0,%eax
c011253a:	eb 05                	jmp    c0112541 <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c011253c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0112541:	c9                   	leave  
c0112542:	c3                   	ret    

c0112543 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112543:	55                   	push   %ebp
c0112544:	89 e5                	mov    %esp,%ebp
c0112546:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c0112549:	8b 45 0c             	mov    0xc(%ebp),%eax
c011254c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112550:	8b 45 08             	mov    0x8(%ebp),%eax
c0112553:	89 04 24             	mov    %eax,(%esp)
c0112556:	e8 18 fc ff ff       	call   c0112173 <sfs_hash_list>
c011255b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011255e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112561:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0112564:	eb 3e                	jmp    c01125a4 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0112566:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112569:	83 e8 24             	sub    $0x24,%eax
c011256c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c011256f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112572:	8b 40 04             	mov    0x4(%eax),%eax
c0112575:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112578:	75 2a                	jne    c01125a4 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c011257a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011257d:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c0112580:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112583:	89 04 24             	mov    %eax,(%esp)
c0112586:	e8 37 ca ff ff       	call   c010efc2 <inode_ref_inc>
c011258b:	83 f8 01             	cmp    $0x1,%eax
c011258e:	75 0f                	jne    c011259f <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c0112590:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112593:	8b 40 0c             	mov    0xc(%eax),%eax
c0112596:	8d 50 01             	lea    0x1(%eax),%edx
c0112599:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011259c:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c011259f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125a2:	eb 1c                	jmp    c01125c0 <lookup_sfs_nolock+0x7d>
c01125a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01125aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01125ad:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c01125b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01125b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01125b9:	75 ab                	jne    c0112566 <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c01125bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01125c0:	c9                   	leave  
c01125c1:	c3                   	ret    

c01125c2 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c01125c2:	55                   	push   %ebp
c01125c3:	89 e5                	mov    %esp,%ebp
c01125c5:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c01125c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01125cb:	89 04 24             	mov    %eax,(%esp)
c01125ce:	e8 ad 22 00 00       	call   c0114880 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c01125d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01125d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125da:	8b 45 08             	mov    0x8(%ebp),%eax
c01125dd:	89 04 24             	mov    %eax,(%esp)
c01125e0:	e8 5e ff ff ff       	call   c0112543 <lookup_sfs_nolock>
c01125e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01125e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125eb:	85 c0                	test   %eax,%eax
c01125ed:	74 05                	je     c01125f4 <sfs_load_inode+0x32>
        goto out_unlock;
c01125ef:	e9 3c 01 00 00       	jmp    c0112730 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c01125f4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c01125fb:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0112602:	e8 53 26 ff ff       	call   c0104c5a <kmalloc>
c0112607:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011260a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011260e:	75 05                	jne    c0112615 <sfs_load_inode+0x53>
        goto failed_unlock;
c0112610:	e9 40 01 00 00       	jmp    c0112755 <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c0112615:	8b 45 10             	mov    0x10(%ebp),%eax
c0112618:	89 44 24 04          	mov    %eax,0x4(%esp)
c011261c:	8b 45 08             	mov    0x8(%ebp),%eax
c011261f:	89 04 24             	mov    %eax,(%esp)
c0112622:	e8 9f fc ff ff       	call   c01122c6 <sfs_block_inuse>
c0112627:	85 c0                	test   %eax,%eax
c0112629:	75 24                	jne    c011264f <sfs_load_inode+0x8d>
c011262b:	c7 44 24 0c f5 93 11 	movl   $0xc01193f5,0xc(%esp)
c0112632:	c0 
c0112633:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c011263a:	c0 
c011263b:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0112642:	00 
c0112643:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c011264a:	e8 79 e8 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c011264f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112656:	00 
c0112657:	8b 45 10             	mov    0x10(%ebp),%eax
c011265a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011265e:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0112665:	00 
c0112666:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112669:	89 44 24 04          	mov    %eax,0x4(%esp)
c011266d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112670:	89 04 24             	mov    %eax,(%esp)
c0112673:	e8 f9 1e 00 00       	call   c0114571 <sfs_rbuf>
c0112678:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011267b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011267f:	74 05                	je     c0112686 <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c0112681:	e9 c4 00 00 00       	jmp    c011274a <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c0112686:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112689:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011268d:	66 85 c0             	test   %ax,%ax
c0112690:	75 24                	jne    c01126b6 <sfs_load_inode+0xf4>
c0112692:	c7 44 24 0c 46 94 11 	movl   $0xc0119446,0xc(%esp)
c0112699:	c0 
c011269a:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01126a1:	c0 
c01126a2:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c01126a9:	00 
c01126aa:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01126b1:	e8 12 e8 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c01126b6:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01126b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01126bd:	8b 45 10             	mov    0x10(%ebp),%eax
c01126c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01126c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01126c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01126ce:	89 04 24             	mov    %eax,(%esp)
c01126d1:	e8 92 fd ff ff       	call   c0112468 <sfs_create_inode>
c01126d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01126d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01126dd:	74 02                	je     c01126e1 <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c01126df:	eb 69                	jmp    c011274a <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c01126e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01126e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01126e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01126eb:	74 0d                	je     c01126fa <sfs_load_inode+0x138>
c01126ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126f0:	8b 40 2c             	mov    0x2c(%eax),%eax
c01126f3:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01126f8:	74 24                	je     c011271e <sfs_load_inode+0x15c>
c01126fa:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c0112701:	c0 
c0112702:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112709:	c0 
c011270a:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0112711:	00 
c0112712:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112719:	e8 aa e7 fe ff       	call   c0100ec8 <__panic>
c011271e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112721:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112725:	8b 45 08             	mov    0x8(%ebp),%eax
c0112728:	89 04 24             	mov    %eax,(%esp)
c011272b:	e8 6e fa ff ff       	call   c011219e <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c0112730:	8b 45 08             	mov    0x8(%ebp),%eax
c0112733:	89 04 24             	mov    %eax,(%esp)
c0112736:	e8 71 21 00 00       	call   c01148ac <unlock_sfs_fs>
    *node_store = node;
c011273b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011273e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112741:	89 10                	mov    %edx,(%eax)
    return 0;
c0112743:	b8 00 00 00 00       	mov    $0x0,%eax
c0112748:	eb 19                	jmp    c0112763 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c011274a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011274d:	89 04 24             	mov    %eax,(%esp)
c0112750:	e8 20 25 ff ff       	call   c0104c75 <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c0112755:	8b 45 08             	mov    0x8(%ebp),%eax
c0112758:	89 04 24             	mov    %eax,(%esp)
c011275b:	e8 4c 21 00 00       	call   c01148ac <unlock_sfs_fs>
    return ret;
c0112760:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112763:	c9                   	leave  
c0112764:	c3                   	ret    

c0112765 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c0112765:	55                   	push   %ebp
c0112766:	89 e5                	mov    %esp,%ebp
c0112768:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c011276b:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112772:	76 24                	jbe    c0112798 <sfs_bmap_get_sub_nolock+0x33>
c0112774:	c7 44 24 0c 57 94 11 	movl   $0xc0119457,0xc(%esp)
c011277b:	c0 
c011277c:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112783:	c0 
c0112784:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c011278b:	00 
c011278c:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112793:	e8 30 e7 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c0112798:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c011279f:	8b 45 10             	mov    0x10(%ebp),%eax
c01127a2:	c1 e0 02             	shl    $0x2,%eax
c01127a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c01127a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01127ab:	8b 00                	mov    (%eax),%eax
c01127ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01127b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127b3:	85 c0                	test   %eax,%eax
c01127b5:	74 50                	je     c0112807 <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c01127b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01127bd:	89 54 24 10          	mov    %edx,0x10(%esp)
c01127c1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01127c5:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c01127cc:	00 
c01127cd:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01127d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01127d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01127d7:	89 04 24             	mov    %eax,(%esp)
c01127da:	e8 92 1d 00 00       	call   c0114571 <sfs_rbuf>
c01127df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01127e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01127e6:	74 08                	je     c01127f0 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c01127e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127eb:	e9 eb 00 00 00       	jmp    c01128db <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c01127f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01127f3:	85 c0                	test   %eax,%eax
c01127f5:	0f 85 9c 00 00 00    	jne    c0112897 <sfs_bmap_get_sub_nolock+0x132>
c01127fb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01127ff:	0f 84 92 00 00 00    	je     c0112897 <sfs_bmap_get_sub_nolock+0x132>
c0112805:	eb 2e                	jmp    c0112835 <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c0112807:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011280b:	75 05                	jne    c0112812 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c011280d:	e9 85 00 00 00       	jmp    c0112897 <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112812:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112815:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112819:	8b 45 08             	mov    0x8(%ebp),%eax
c011281c:	89 04 24             	mov    %eax,(%esp)
c011281f:	e8 07 fb ff ff       	call   c011232b <sfs_block_alloc>
c0112824:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112827:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011282b:	74 08                	je     c0112835 <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c011282d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112830:	e9 a6 00 00 00       	jmp    c01128db <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112835:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112838:	89 44 24 04          	mov    %eax,0x4(%esp)
c011283c:	8b 45 08             	mov    0x8(%ebp),%eax
c011283f:	89 04 24             	mov    %eax,(%esp)
c0112842:	e8 e4 fa ff ff       	call   c011232b <sfs_block_alloc>
c0112847:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011284a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011284e:	74 02                	je     c0112852 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c0112850:	eb 68                	jmp    c01128ba <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112852:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112855:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112858:	89 54 24 10          	mov    %edx,0x10(%esp)
c011285c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112860:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112867:	00 
c0112868:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011286b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011286f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112872:	89 04 24             	mov    %eax,(%esp)
c0112875:	e8 b0 1d 00 00       	call   c011462a <sfs_wbuf>
c011287a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011287d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112881:	74 14                	je     c0112897 <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c0112883:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112886:	89 44 24 04          	mov    %eax,0x4(%esp)
c011288a:	8b 45 08             	mov    0x8(%ebp),%eax
c011288d:	89 04 24             	mov    %eax,(%esp)
c0112890:	e8 63 fb ff ff       	call   c01123f8 <sfs_block_free>
        goto failed_cleanup;
c0112895:	eb 23                	jmp    c01128ba <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c0112897:	8b 45 0c             	mov    0xc(%ebp),%eax
c011289a:	8b 10                	mov    (%eax),%edx
c011289c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011289f:	39 c2                	cmp    %eax,%edx
c01128a1:	74 08                	je     c01128ab <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c01128a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01128a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128a9:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c01128ab:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01128ae:	8b 45 18             	mov    0x18(%ebp),%eax
c01128b1:	89 10                	mov    %edx,(%eax)
    return 0;
c01128b3:	b8 00 00 00 00       	mov    $0x0,%eax
c01128b8:	eb 21                	jmp    c01128db <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c01128ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128bd:	8b 10                	mov    (%eax),%edx
c01128bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128c2:	39 c2                	cmp    %eax,%edx
c01128c4:	74 12                	je     c01128d8 <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c01128c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01128d0:	89 04 24             	mov    %eax,(%esp)
c01128d3:	e8 20 fb ff ff       	call   c01123f8 <sfs_block_free>
    }
    return ret;
c01128d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01128db:	c9                   	leave  
c01128dc:	c3                   	ret    

c01128dd <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c01128dd:	55                   	push   %ebp
c01128de:	89 e5                	mov    %esp,%ebp
c01128e0:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c01128e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128e6:	8b 00                	mov    (%eax),%eax
c01128e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c01128eb:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c01128ef:	77 5e                	ja     c011294f <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c01128f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128f4:	8b 55 10             	mov    0x10(%ebp),%edx
c01128f7:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c01128fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01128fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112901:	85 c0                	test   %eax,%eax
c0112903:	75 45                	jne    c011294a <sfs_bmap_get_nolock+0x6d>
c0112905:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112909:	74 3f                	je     c011294a <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c011290b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011290e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112912:	8b 45 08             	mov    0x8(%ebp),%eax
c0112915:	89 04 24             	mov    %eax,(%esp)
c0112918:	e8 0e fa ff ff       	call   c011232b <sfs_block_alloc>
c011291d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112920:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112924:	74 08                	je     c011292e <sfs_bmap_get_nolock+0x51>
                return ret;
c0112926:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112929:	e9 2f 01 00 00       	jmp    c0112a5d <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c011292e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112931:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112934:	8b 55 10             	mov    0x10(%ebp),%edx
c0112937:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c011293b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011293e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112945:	e9 c5 00 00 00       	jmp    c0112a0f <sfs_bmap_get_nolock+0x132>
c011294a:	e9 c0 00 00 00       	jmp    c0112a0f <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c011294f:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112953:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011295a:	0f 87 93 00 00 00    	ja     c01129f3 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c0112960:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112963:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112966:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0112969:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011296c:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112970:	8b 45 14             	mov    0x14(%ebp),%eax
c0112973:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112977:	8b 45 10             	mov    0x10(%ebp),%eax
c011297a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011297e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112981:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112985:	8b 45 08             	mov    0x8(%ebp),%eax
c0112988:	89 04 24             	mov    %eax,(%esp)
c011298b:	e8 d5 fd ff ff       	call   c0112765 <sfs_bmap_get_sub_nolock>
c0112990:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112993:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112997:	74 08                	je     c01129a1 <sfs_bmap_get_nolock+0xc4>
            return ret;
c0112999:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011299c:	e9 bc 00 00 00       	jmp    c0112a5d <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c01129a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01129a4:	8b 50 3c             	mov    0x3c(%eax),%edx
c01129a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129aa:	39 c2                	cmp    %eax,%edx
c01129ac:	74 43                	je     c01129f1 <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c01129ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01129b1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01129b4:	85 c0                	test   %eax,%eax
c01129b6:	74 24                	je     c01129dc <sfs_bmap_get_nolock+0xff>
c01129b8:	c7 44 24 0c 6e 94 11 	movl   $0xc011946e,0xc(%esp)
c01129bf:	c0 
c01129c0:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01129c7:	c0 
c01129c8:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01129cf:	00 
c01129d0:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01129d7:	e8 ec e4 fe ff       	call   c0100ec8 <__panic>
            din->indirect = ent;
c01129dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01129df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01129e2:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c01129e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01129e8:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c01129ef:	eb 1e                	jmp    c0112a0f <sfs_bmap_get_nolock+0x132>
c01129f1:	eb 1c                	jmp    c0112a0f <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c01129f3:	c7 44 24 08 84 94 11 	movl   $0xc0119484,0x8(%esp)
c01129fa:	c0 
c01129fb:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112a02:	00 
c0112a03:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112a0a:	e8 b9 e4 fe ff       	call   c0100ec8 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112a0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a12:	85 c0                	test   %eax,%eax
c0112a14:	74 3a                	je     c0112a50 <sfs_bmap_get_nolock+0x173>
c0112a16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a20:	89 04 24             	mov    %eax,(%esp)
c0112a23:	e8 9e f8 ff ff       	call   c01122c6 <sfs_block_inuse>
c0112a28:	85 c0                	test   %eax,%eax
c0112a2a:	75 24                	jne    c0112a50 <sfs_bmap_get_nolock+0x173>
c0112a2c:	c7 44 24 0c b0 94 11 	movl   $0xc01194b0,0xc(%esp)
c0112a33:	c0 
c0112a34:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112a3b:	c0 
c0112a3c:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112a43:	00 
c0112a44:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112a4b:	e8 78 e4 fe ff       	call   c0100ec8 <__panic>
    *ino_store = ino;
c0112a50:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112a53:	8b 45 18             	mov    0x18(%ebp),%eax
c0112a56:	89 10                	mov    %edx,(%eax)
    return 0;
c0112a58:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112a5d:	c9                   	leave  
c0112a5e:	c3                   	ret    

c0112a5f <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112a5f:	55                   	push   %ebp
c0112a60:	89 e5                	mov    %esp,%ebp
c0112a62:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112a65:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a6f:	89 04 24             	mov    %eax,(%esp)
c0112a72:	e8 4f f8 ff ff       	call   c01122c6 <sfs_block_inuse>
c0112a77:	85 c0                	test   %eax,%eax
c0112a79:	74 09                	je     c0112a84 <sfs_bmap_free_sub_nolock+0x25>
c0112a7b:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112a82:	76 24                	jbe    c0112aa8 <sfs_bmap_free_sub_nolock+0x49>
c0112a84:	c7 44 24 0c d8 94 11 	movl   $0xc01194d8,0xc(%esp)
c0112a8b:	c0 
c0112a8c:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112a93:	c0 
c0112a94:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112a9b:	00 
c0112a9c:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112aa3:	e8 20 e4 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112aa8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112aaf:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ab2:	c1 e0 02             	shl    $0x2,%eax
c0112ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112abb:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112abf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ac2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ac6:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112acd:	00 
c0112ace:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112ad1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ad8:	89 04 24             	mov    %eax,(%esp)
c0112adb:	e8 91 1a 00 00       	call   c0114571 <sfs_rbuf>
c0112ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112ae3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112ae7:	74 05                	je     c0112aee <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112ae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112aec:	eb 54                	jmp    c0112b42 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112aee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112af1:	85 c0                	test   %eax,%eax
c0112af3:	74 48                	je     c0112b3d <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112af8:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112afc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112aff:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112b03:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112b0a:	00 
c0112b0b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b12:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b15:	89 04 24             	mov    %eax,(%esp)
c0112b18:	e8 0d 1b 00 00       	call   c011462a <sfs_wbuf>
c0112b1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b20:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112b24:	74 05                	je     c0112b2b <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b29:	eb 17                	jmp    c0112b42 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112b2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b32:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b35:	89 04 24             	mov    %eax,(%esp)
c0112b38:	e8 bb f8 ff ff       	call   c01123f8 <sfs_block_free>
    }
    return 0;
c0112b3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112b42:	c9                   	leave  
c0112b43:	c3                   	ret    

c0112b44 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112b44:	55                   	push   %ebp
c0112b45:	89 e5                	mov    %esp,%ebp
c0112b47:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112b4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b4d:	8b 00                	mov    (%eax),%eax
c0112b4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112b52:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112b56:	77 44                	ja     c0112b9c <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b5b:	8b 55 10             	mov    0x10(%ebp),%edx
c0112b5e:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112b62:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112b69:	74 2a                	je     c0112b95 <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112b6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b75:	89 04 24             	mov    %eax,(%esp)
c0112b78:	e8 7b f8 ff ff       	call   c01123f8 <sfs_block_free>
            din->direct[index] = 0;
c0112b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b80:	8b 55 10             	mov    0x10(%ebp),%edx
c0112b83:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112b8a:	00 
            sin->dirty = 1;
c0112b8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b8e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112b95:	b8 00 00 00 00       	mov    $0x0,%eax
c0112b9a:	eb 4f                	jmp    c0112beb <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112b9c:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112ba0:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112ba7:	77 3d                	ja     c0112be6 <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112ba9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bac:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112baf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112bb2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112bb6:	74 27                	je     c0112bdf <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112bb8:	8b 45 10             	mov    0x10(%ebp),%eax
c0112bbb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112bbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bc2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bc9:	89 04 24             	mov    %eax,(%esp)
c0112bcc:	e8 8e fe ff ff       	call   c0112a5f <sfs_bmap_free_sub_nolock>
c0112bd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112bd4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112bd8:	74 05                	je     c0112bdf <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112bda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112bdd:	eb 0c                	jmp    c0112beb <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112bdf:	b8 00 00 00 00       	mov    $0x0,%eax
c0112be4:	eb 05                	jmp    c0112beb <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112be6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112beb:	c9                   	leave  
c0112bec:	c3                   	ret    

c0112bed <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112bed:	55                   	push   %ebp
c0112bee:	89 e5                	mov    %esp,%ebp
c0112bf0:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112bf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bf6:	8b 00                	mov    (%eax),%eax
c0112bf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bfe:	8b 40 08             	mov    0x8(%eax),%eax
c0112c01:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112c04:	73 24                	jae    c0112c2a <sfs_bmap_load_nolock+0x3d>
c0112c06:	c7 44 24 0c 0c 95 11 	movl   $0xc011950c,0xc(%esp)
c0112c0d:	c0 
c0112c0e:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112c15:	c0 
c0112c16:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112c1d:	00 
c0112c1e:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112c25:	e8 9e e2 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c2d:	8b 40 08             	mov    0x8(%eax),%eax
c0112c30:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112c33:	0f 94 c0             	sete   %al
c0112c36:	0f b6 c0             	movzbl %al,%eax
c0112c39:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112c3c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c3f:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112c43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c46:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112c4a:	8b 45 10             	mov    0x10(%ebp),%eax
c0112c4d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112c51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c58:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c5b:	89 04 24             	mov    %eax,(%esp)
c0112c5e:	e8 7a fc ff ff       	call   c01128dd <sfs_bmap_get_nolock>
c0112c63:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112c66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112c6a:	74 05                	je     c0112c71 <sfs_bmap_load_nolock+0x84>
        return ret;
c0112c6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c6f:	eb 62                	jmp    c0112cd3 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112c71:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c74:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c78:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c7b:	89 04 24             	mov    %eax,(%esp)
c0112c7e:	e8 43 f6 ff ff       	call   c01122c6 <sfs_block_inuse>
c0112c83:	85 c0                	test   %eax,%eax
c0112c85:	75 24                	jne    c0112cab <sfs_bmap_load_nolock+0xbe>
c0112c87:	c7 44 24 0c f5 93 11 	movl   $0xc01193f5,0xc(%esp)
c0112c8e:	c0 
c0112c8f:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112c96:	c0 
c0112c97:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112c9e:	00 
c0112c9f:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112ca6:	e8 1d e2 fe ff       	call   c0100ec8 <__panic>
    if (create) {
c0112cab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112caf:	74 0f                	je     c0112cc0 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112cb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cb4:	8b 40 08             	mov    0x8(%eax),%eax
c0112cb7:	8d 50 01             	lea    0x1(%eax),%edx
c0112cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cbd:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112cc0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112cc4:	74 08                	je     c0112cce <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112cc6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112cc9:	8b 45 14             	mov    0x14(%ebp),%eax
c0112ccc:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112cce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112cd3:	c9                   	leave  
c0112cd4:	c3                   	ret    

c0112cd5 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112cd5:	55                   	push   %ebp
c0112cd6:	89 e5                	mov    %esp,%ebp
c0112cd8:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cde:	8b 00                	mov    (%eax),%eax
c0112ce0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ce6:	8b 40 08             	mov    0x8(%eax),%eax
c0112ce9:	85 c0                	test   %eax,%eax
c0112ceb:	75 24                	jne    c0112d11 <sfs_bmap_truncate_nolock+0x3c>
c0112ced:	c7 44 24 0c 21 95 11 	movl   $0xc0119521,0xc(%esp)
c0112cf4:	c0 
c0112cf5:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112cfc:	c0 
c0112cfd:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0112d04:	00 
c0112d05:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112d0c:	e8 b7 e1 fe ff       	call   c0100ec8 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0112d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d14:	8b 40 08             	mov    0x8(%eax),%eax
c0112d17:	83 e8 01             	sub    $0x1,%eax
c0112d1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d25:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d28:	89 04 24             	mov    %eax,(%esp)
c0112d2b:	e8 14 fe ff ff       	call   c0112b44 <sfs_bmap_free_nolock>
c0112d30:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112d33:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112d37:	74 05                	je     c0112d3e <sfs_bmap_truncate_nolock+0x69>
        return ret;
c0112d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d3c:	eb 1e                	jmp    c0112d5c <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c0112d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d41:	8b 40 08             	mov    0x8(%eax),%eax
c0112d44:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112d47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d4a:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0112d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d50:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0112d57:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d5c:	c9                   	leave  
c0112d5d:	c3                   	ret    

c0112d5e <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0112d5e:	55                   	push   %ebp
c0112d5f:	89 e5                	mov    %esp,%ebp
c0112d61:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0112d64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d67:	8b 00                	mov    (%eax),%eax
c0112d69:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112d6d:	66 83 f8 02          	cmp    $0x2,%ax
c0112d71:	75 15                	jne    c0112d88 <sfs_dirent_read_nolock+0x2a>
c0112d73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112d77:	78 0f                	js     c0112d88 <sfs_dirent_read_nolock+0x2a>
c0112d79:	8b 55 10             	mov    0x10(%ebp),%edx
c0112d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d7f:	8b 00                	mov    (%eax),%eax
c0112d81:	8b 40 08             	mov    0x8(%eax),%eax
c0112d84:	39 c2                	cmp    %eax,%edx
c0112d86:	72 24                	jb     c0112dac <sfs_dirent_read_nolock+0x4e>
c0112d88:	c7 44 24 0c 34 95 11 	movl   $0xc0119534,0xc(%esp)
c0112d8f:	c0 
c0112d90:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112d97:	c0 
c0112d98:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0112d9f:	00 
c0112da0:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112da7:	e8 1c e1 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0112dac:	8b 45 10             	mov    0x10(%ebp),%eax
c0112daf:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0112db2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112db6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112dba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112dbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112dc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0112dc4:	89 04 24             	mov    %eax,(%esp)
c0112dc7:	e8 21 fe ff ff       	call   c0112bed <sfs_bmap_load_nolock>
c0112dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112dd3:	74 08                	je     c0112ddd <sfs_dirent_read_nolock+0x7f>
        return ret;
c0112dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dd8:	e9 80 00 00 00       	jmp    c0112e5d <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112ddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112de0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112de4:	8b 45 08             	mov    0x8(%ebp),%eax
c0112de7:	89 04 24             	mov    %eax,(%esp)
c0112dea:	e8 d7 f4 ff ff       	call   c01122c6 <sfs_block_inuse>
c0112def:	85 c0                	test   %eax,%eax
c0112df1:	75 24                	jne    c0112e17 <sfs_dirent_read_nolock+0xb9>
c0112df3:	c7 44 24 0c f5 93 11 	movl   $0xc01193f5,0xc(%esp)
c0112dfa:	c0 
c0112dfb:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112e02:	c0 
c0112e03:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c0112e0a:	00 
c0112e0b:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112e12:	e8 b1 e0 fe ff       	call   c0100ec8 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0112e17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e1a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112e21:	00 
c0112e22:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e26:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c0112e2d:	00 
c0112e2e:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e35:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e38:	89 04 24             	mov    %eax,(%esp)
c0112e3b:	e8 31 17 00 00       	call   c0114571 <sfs_rbuf>
c0112e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112e43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112e47:	74 05                	je     c0112e4e <sfs_dirent_read_nolock+0xf0>
        return ret;
c0112e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e4c:	eb 0f                	jmp    c0112e5d <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0112e4e:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e51:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c0112e58:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e5d:	c9                   	leave  
c0112e5e:	c3                   	ret    

c0112e5f <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0112e5f:	55                   	push   %ebp
c0112e60:	89 e5                	mov    %esp,%ebp
c0112e62:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0112e65:	8b 45 10             	mov    0x10(%ebp),%eax
c0112e68:	89 04 24             	mov    %eax,(%esp)
c0112e6b:	e8 6c 22 00 00       	call   c01150dc <strlen>
c0112e70:	3d ff 00 00 00       	cmp    $0xff,%eax
c0112e75:	76 24                	jbe    c0112e9b <sfs_dirent_search_nolock+0x3c>
c0112e77:	c7 44 24 0c 80 95 11 	movl   $0xc0119580,0xc(%esp)
c0112e7e:	c0 
c0112e7f:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0112e86:	c0 
c0112e87:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0112e8e:	00 
c0112e8f:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0112e96:	e8 2d e0 fe ff       	call   c0100ec8 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0112e9b:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0112ea2:	e8 b3 1d ff ff       	call   c0104c5a <kmalloc>
c0112ea7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112eaa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112eae:	75 0a                	jne    c0112eba <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c0112eb0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112eb5:	e9 cb 00 00 00       	jmp    c0112f85 <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0112eba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ebd:	8b 00                	mov    (%eax),%eax
c0112ebf:	8b 40 08             	mov    0x8(%eax),%eax
c0112ec2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0112ec5:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112ec9:	74 08                	je     c0112ed3 <sfs_dirent_search_nolock+0x74>
c0112ecb:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112ece:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112ed1:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0112ed3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112eda:	e9 85 00 00 00       	jmp    c0112f64 <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112edf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ee2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ee6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112ee9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112eed:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ef0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ef7:	89 04 24             	mov    %eax,(%esp)
c0112efa:	e8 5f fe ff ff       	call   c0112d5e <sfs_dirent_read_nolock>
c0112eff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112f02:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112f06:	74 02                	je     c0112f0a <sfs_dirent_search_nolock+0xab>
            goto out;
c0112f08:	eb 6d                	jmp    c0112f77 <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c0112f0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f0d:	8b 00                	mov    (%eax),%eax
c0112f0f:	85 c0                	test   %eax,%eax
c0112f11:	75 12                	jne    c0112f25 <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0112f13:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112f17:	74 0a                	je     c0112f23 <sfs_dirent_search_nolock+0xc4>
c0112f19:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112f1f:	89 10                	mov    %edx,(%eax)
            continue ;
c0112f21:	eb 3d                	jmp    c0112f60 <sfs_dirent_search_nolock+0x101>
c0112f23:	eb 3b                	jmp    c0112f60 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c0112f25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f28:	83 c0 04             	add    $0x4,%eax
c0112f2b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f2f:	8b 45 10             	mov    0x10(%ebp),%eax
c0112f32:	89 04 24             	mov    %eax,(%esp)
c0112f35:	e8 9a 22 00 00       	call   c01151d4 <strcmp>
c0112f3a:	85 c0                	test   %eax,%eax
c0112f3c:	75 22                	jne    c0112f60 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c0112f3e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0112f42:	74 08                	je     c0112f4c <sfs_dirent_search_nolock+0xed>
c0112f44:	8b 45 18             	mov    0x18(%ebp),%eax
c0112f47:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112f4a:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0112f4c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112f50:	74 0c                	je     c0112f5e <sfs_dirent_search_nolock+0xff>
c0112f52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f55:	8b 10                	mov    (%eax),%edx
c0112f57:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f5a:	89 10                	mov    %edx,(%eax)
            goto out;
c0112f5c:	eb 19                	jmp    c0112f77 <sfs_dirent_search_nolock+0x118>
c0112f5e:	eb 17                	jmp    c0112f77 <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0112f60:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112f64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f67:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0112f6a:	0f 8c 6f ff ff ff    	jl     c0112edf <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0112f70:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c0112f77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f7a:	89 04 24             	mov    %eax,(%esp)
c0112f7d:	e8 f3 1c ff ff       	call   c0104c75 <kfree>
    return ret;
c0112f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112f85:	c9                   	leave  
c0112f86:	c3                   	ret    

c0112f87 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c0112f87:	55                   	push   %ebp
c0112f88:	89 e5                	mov    %esp,%ebp
c0112f8a:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0112f8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f90:	8b 00                	mov    (%eax),%eax
c0112f92:	8b 40 08             	mov    0x8(%eax),%eax
c0112f95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0112f98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112f9f:	eb 43                	jmp    c0112fe4 <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112fa1:	8b 45 14             	mov    0x14(%ebp),%eax
c0112fa4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fab:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112faf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fb9:	89 04 24             	mov    %eax,(%esp)
c0112fbc:	e8 9d fd ff ff       	call   c0112d5e <sfs_dirent_read_nolock>
c0112fc1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112fc4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112fc8:	74 05                	je     c0112fcf <sfs_dirent_findino_nolock+0x48>
            return ret;
c0112fca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112fcd:	eb 22                	jmp    c0112ff1 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c0112fcf:	8b 45 14             	mov    0x14(%ebp),%eax
c0112fd2:	8b 00                	mov    (%eax),%eax
c0112fd4:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112fd7:	75 07                	jne    c0112fe0 <sfs_dirent_findino_nolock+0x59>
            return 0;
c0112fd9:	b8 00 00 00 00       	mov    $0x0,%eax
c0112fde:	eb 11                	jmp    c0112ff1 <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0112fe0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0112fe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fe7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112fea:	7c b5                	jl     c0112fa1 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c0112fec:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0112ff1:	c9                   	leave  
c0112ff2:	c3                   	ret    

c0112ff3 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0112ff3:	55                   	push   %ebp
c0112ff4:	89 e5                	mov    %esp,%ebp
c0112ff6:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0112ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ffc:	89 04 24             	mov    %eax,(%esp)
c0112fff:	e8 f4 f0 ff ff       	call   c01120f8 <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0113004:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c011300b:	00 
c011300c:	8b 45 18             	mov    0x18(%ebp),%eax
c011300f:	89 44 24 10          	mov    %eax,0x10(%esp)
c0113013:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113016:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011301a:	8b 45 10             	mov    0x10(%ebp),%eax
c011301d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113021:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113024:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113028:	8b 45 08             	mov    0x8(%ebp),%eax
c011302b:	89 04 24             	mov    %eax,(%esp)
c011302e:	e8 2c fe ff ff       	call   c0112e5f <sfs_dirent_search_nolock>
c0113033:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0113036:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113039:	89 04 24             	mov    %eax,(%esp)
c011303c:	e8 cd f0 ff ff       	call   c011210e <unlock_sin>
    if (ret == 0) {
c0113041:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113045:	75 1c                	jne    c0113063 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c0113047:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011304a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011304e:	8b 45 14             	mov    0x14(%ebp),%eax
c0113051:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113055:	8b 45 08             	mov    0x8(%ebp),%eax
c0113058:	89 04 24             	mov    %eax,(%esp)
c011305b:	e8 62 f5 ff ff       	call   c01125c2 <sfs_load_inode>
c0113060:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0113063:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113066:	c9                   	leave  
c0113067:	c3                   	ret    

c0113068 <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c0113068:	55                   	push   %ebp
c0113069:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c011306b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011306e:	83 e0 03             	and    $0x3,%eax
c0113071:	85 c0                	test   %eax,%eax
c0113073:	74 07                	je     c011307c <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0113075:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011307a:	eb 17                	jmp    c0113093 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c011307c:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c011307d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113080:	83 e0 20             	and    $0x20,%eax
c0113083:	85 c0                	test   %eax,%eax
c0113085:	74 07                	je     c011308e <sfs_opendir+0x26>
        return -E_ISDIR;
c0113087:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011308c:	eb 05                	jmp    c0113093 <sfs_opendir+0x2b>
    }
    return 0;
c011308e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113093:	5d                   	pop    %ebp
c0113094:	c3                   	ret    

c0113095 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c0113095:	55                   	push   %ebp
c0113096:	89 e5                	mov    %esp,%ebp
    return 0;
c0113098:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011309d:	5d                   	pop    %ebp
c011309e:	c3                   	ret    

c011309f <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c011309f:	55                   	push   %ebp
c01130a0:	89 e5                	mov    %esp,%ebp
c01130a2:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c01130a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01130a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01130ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01130af:	74 17                	je     c01130c8 <sfs_close+0x29>
c01130b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130b4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01130b7:	85 c0                	test   %eax,%eax
c01130b9:	74 0d                	je     c01130c8 <sfs_close+0x29>
c01130bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130be:	8b 40 3c             	mov    0x3c(%eax),%eax
c01130c1:	8b 40 18             	mov    0x18(%eax),%eax
c01130c4:	85 c0                	test   %eax,%eax
c01130c6:	75 24                	jne    c01130ec <sfs_close+0x4d>
c01130c8:	c7 44 24 0c a4 95 11 	movl   $0xc01195a4,0xc(%esp)
c01130cf:	c0 
c01130d0:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01130d7:	c0 
c01130d8:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c01130df:	00 
c01130e0:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01130e7:	e8 dc dd fe ff       	call   c0100ec8 <__panic>
c01130ec:	c7 44 24 04 f2 95 11 	movl   $0xc01195f2,0x4(%esp)
c01130f3:	c0 
c01130f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130f7:	89 04 24             	mov    %eax,(%esp)
c01130fa:	e8 cb c0 ff ff       	call   c010f1ca <inode_check>
c01130ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113102:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113105:	8b 40 18             	mov    0x18(%eax),%eax
c0113108:	8b 55 08             	mov    0x8(%ebp),%edx
c011310b:	89 14 24             	mov    %edx,(%esp)
c011310e:	ff d0                	call   *%eax
}
c0113110:	c9                   	leave  
c0113111:	c3                   	ret    

c0113112 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0113112:	55                   	push   %ebp
c0113113:	89 e5                	mov    %esp,%ebp
c0113115:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c0113118:	8b 45 0c             	mov    0xc(%ebp),%eax
c011311b:	8b 00                	mov    (%eax),%eax
c011311d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0113120:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113123:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113127:	66 83 f8 02          	cmp    $0x2,%ax
c011312b:	75 24                	jne    c0113151 <sfs_io_nolock+0x3f>
c011312d:	c7 44 24 0c f8 95 11 	movl   $0xc01195f8,0xc(%esp)
c0113134:	c0 
c0113135:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c011313c:	c0 
c011313d:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0113144:	00 
c0113145:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c011314c:	e8 77 dd fe ff       	call   c0100ec8 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0113151:	8b 45 18             	mov    0x18(%ebp),%eax
c0113154:	8b 10                	mov    (%eax),%edx
c0113156:	8b 45 14             	mov    0x14(%ebp),%eax
c0113159:	01 d0                	add    %edx,%eax
c011315b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c011315e:	8b 45 18             	mov    0x18(%ebp),%eax
c0113161:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c0113167:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011316b:	78 12                	js     c011317f <sfs_io_nolock+0x6d>
c011316d:	8b 45 14             	mov    0x14(%ebp),%eax
c0113170:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0113175:	77 08                	ja     c011317f <sfs_io_nolock+0x6d>
c0113177:	8b 45 14             	mov    0x14(%ebp),%eax
c011317a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011317d:	7e 0a                	jle    c0113189 <sfs_io_nolock+0x77>
        return -E_INVAL;
c011317f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113184:	e9 b0 02 00 00       	jmp    c0113439 <sfs_io_nolock+0x327>
    }
    if (offset == endpos) {
c0113189:	8b 45 14             	mov    0x14(%ebp),%eax
c011318c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011318f:	75 0a                	jne    c011319b <sfs_io_nolock+0x89>
        return 0;
c0113191:	b8 00 00 00 00       	mov    $0x0,%eax
c0113196:	e9 9e 02 00 00       	jmp    c0113439 <sfs_io_nolock+0x327>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c011319b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011319e:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01131a3:	76 07                	jbe    c01131ac <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c01131a5:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c01131ac:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01131b0:	75 2a                	jne    c01131dc <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c01131b2:	8b 55 14             	mov    0x14(%ebp),%edx
c01131b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01131b8:	8b 00                	mov    (%eax),%eax
c01131ba:	39 c2                	cmp    %eax,%edx
c01131bc:	72 0a                	jb     c01131c8 <sfs_io_nolock+0xb6>
            return 0;
c01131be:	b8 00 00 00 00       	mov    $0x0,%eax
c01131c3:	e9 71 02 00 00       	jmp    c0113439 <sfs_io_nolock+0x327>
        }
        if (endpos > din->size) {
c01131c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01131cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01131ce:	8b 00                	mov    (%eax),%eax
c01131d0:	39 c2                	cmp    %eax,%edx
c01131d2:	76 08                	jbe    c01131dc <sfs_io_nolock+0xca>
            endpos = din->size;
c01131d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01131d7:	8b 00                	mov    (%eax),%eax
c01131d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c01131dc:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01131e0:	74 10                	je     c01131f2 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c01131e2:	c7 45 f0 2a 46 11 c0 	movl   $0xc011462a,-0x10(%ebp)
c01131e9:	c7 45 ec 41 45 11 c0 	movl   $0xc0114541,-0x14(%ebp)
c01131f0:	eb 0e                	jmp    c0113200 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c01131f2:	c7 45 f0 71 45 11 c0 	movl   $0xc0114571,-0x10(%ebp)
c01131f9:	c7 45 ec 11 45 11 c0 	movl   $0xc0114511,-0x14(%ebp)
    }

    int ret = 0;
c0113200:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c0113207:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c011320e:	8b 45 14             	mov    0x14(%ebp),%eax
c0113211:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0113217:	85 c0                	test   %eax,%eax
c0113219:	0f 48 c2             	cmovs  %edx,%eax
c011321c:	c1 f8 0c             	sar    $0xc,%eax
c011321f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0113222:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113225:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011322b:	85 c0                	test   %eax,%eax
c011322d:	0f 48 c2             	cmovs  %edx,%eax
c0113230:	c1 f8 0c             	sar    $0xc,%eax
c0113233:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0113236:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if((blkoff = offset % SFS_BLKSIZE) != 0){
c0113239:	8b 45 14             	mov    0x14(%ebp),%eax
c011323c:	99                   	cltd   
c011323d:	c1 ea 14             	shr    $0x14,%edx
c0113240:	01 d0                	add    %edx,%eax
c0113242:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113247:	29 d0                	sub    %edx,%eax
c0113249:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011324c:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0113250:	0f 84 9f 00 00 00    	je     c01132f5 <sfs_io_nolock+0x1e3>
    	size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c0113256:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011325a:	74 0a                	je     c0113266 <sfs_io_nolock+0x154>
c011325c:	b8 00 10 00 00       	mov    $0x1000,%eax
c0113261:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0113264:	eb 0a                	jmp    c0113270 <sfs_io_nolock+0x15e>
c0113266:	8b 45 14             	mov    0x14(%ebp),%eax
c0113269:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011326c:	29 c2                	sub    %eax,%edx
c011326e:	89 d0                	mov    %edx,%eax
c0113270:	89 45 cc             	mov    %eax,-0x34(%ebp)
    	if((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0){
c0113273:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113276:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011327a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011327d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113281:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113284:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113288:	8b 45 08             	mov    0x8(%ebp),%eax
c011328b:	89 04 24             	mov    %eax,(%esp)
c011328e:	e8 5a f9 ff ff       	call   c0112bed <sfs_bmap_load_nolock>
c0113293:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113296:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011329a:	74 05                	je     c01132a1 <sfs_io_nolock+0x18f>
    		goto out;
c011329c:	e9 61 01 00 00       	jmp    c0113402 <sfs_io_nolock+0x2f0>
    	}
    	if((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0){
c01132a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01132a4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01132a7:	89 54 24 10          	mov    %edx,0x10(%esp)
c01132ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132af:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01132b2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01132b6:	8b 45 10             	mov    0x10(%ebp),%eax
c01132b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01132bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01132c0:	89 04 24             	mov    %eax,(%esp)
c01132c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01132c6:	ff d0                	call   *%eax
c01132c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01132cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01132cf:	74 05                	je     c01132d6 <sfs_io_nolock+0x1c4>
    		goto out;
c01132d1:	e9 2c 01 00 00       	jmp    c0113402 <sfs_io_nolock+0x2f0>
    	}
    	alen += size;
c01132d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01132d9:	01 45 e4             	add    %eax,-0x1c(%ebp)
    	if(nblks == 0){
c01132dc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01132e0:	75 05                	jne    c01132e7 <sfs_io_nolock+0x1d5>
    		goto out;
c01132e2:	e9 1b 01 00 00       	jmp    c0113402 <sfs_io_nolock+0x2f0>
    	}
    	blkno++;
c01132e7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
    	nblks--;
c01132eb:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    	buf += size;
c01132ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01132f2:	01 45 10             	add    %eax,0x10(%ebp)
    }
    uint32_t i;
    for(i = 0; i < nblks; i++){
c01132f5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c01132fc:	eb 74                	jmp    c0113372 <sfs_io_nolock+0x260>
    	if((ret = sfs_bmap_load_nolock(sfs, sin, blkno + i, &ino)) != 0){
c01132fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113301:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0113304:	01 c2                	add    %eax,%edx
c0113306:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113309:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011330d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113311:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113314:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113318:	8b 45 08             	mov    0x8(%ebp),%eax
c011331b:	89 04 24             	mov    %eax,(%esp)
c011331e:	e8 ca f8 ff ff       	call   c0112bed <sfs_bmap_load_nolock>
c0113323:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113326:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011332a:	74 05                	je     c0113331 <sfs_io_nolock+0x21f>
    	    goto out;
c011332c:	e9 d1 00 00 00       	jmp    c0113402 <sfs_io_nolock+0x2f0>
    	}
    	if((ret = sfs_block_op(sfs, buf, ino, 1)) != 0){
c0113331:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113334:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011333b:	00 
c011333c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113340:	8b 45 10             	mov    0x10(%ebp),%eax
c0113343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113347:	8b 45 08             	mov    0x8(%ebp),%eax
c011334a:	89 04 24             	mov    %eax,(%esp)
c011334d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113350:	ff d0                	call   *%eax
c0113352:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113355:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113359:	74 05                	je     c0113360 <sfs_io_nolock+0x24e>
    		goto out;
c011335b:	e9 a2 00 00 00       	jmp    c0113402 <sfs_io_nolock+0x2f0>
    	}
    	alen += SFS_BLKSIZE;
c0113360:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
    	buf += SFS_BLKSIZE;
c0113367:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    	blkno++;
    	nblks--;
    	buf += size;
    }
    uint32_t i;
    for(i = 0; i < nblks; i++){
c011336e:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
c0113372:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113375:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0113378:	72 84                	jb     c01132fe <sfs_io_nolock+0x1ec>
    		goto out;
    	}
    	alen += SFS_BLKSIZE;
    	buf += SFS_BLKSIZE;
    }
    if(endpos % SFS_BLKSIZE != 0){
c011337a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011337d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113382:	85 c0                	test   %eax,%eax
c0113384:	74 7c                	je     c0113402 <sfs_io_nolock+0x2f0>
    	size = endpos % SFS_BLKSIZE;
c0113386:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113389:	99                   	cltd   
c011338a:	c1 ea 14             	shr    $0x14,%edx
c011338d:	01 d0                	add    %edx,%eax
c011338f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113394:	29 d0                	sub    %edx,%eax
c0113396:	89 45 cc             	mov    %eax,-0x34(%ebp)
    	blkno = blkno + nblks;
c0113399:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011339c:	01 45 e0             	add    %eax,-0x20(%ebp)
    	alen += size;
c011339f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01133a2:	01 45 e4             	add    %eax,-0x1c(%ebp)
    	if((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0){
c01133a5:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01133a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01133ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01133af:	89 44 24 08          	mov    %eax,0x8(%esp)
c01133b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01133ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01133bd:	89 04 24             	mov    %eax,(%esp)
c01133c0:	e8 28 f8 ff ff       	call   c0112bed <sfs_bmap_load_nolock>
c01133c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01133c8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01133cc:	74 02                	je     c01133d0 <sfs_io_nolock+0x2be>
    	   goto out;
c01133ce:	eb 32                	jmp    c0113402 <sfs_io_nolock+0x2f0>
    	}
    	if((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0){
c01133d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01133d3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01133da:	00 
c01133db:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01133df:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01133e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01133e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01133e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01133ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01133f0:	89 04 24             	mov    %eax,(%esp)
c01133f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01133f6:	ff d0                	call   *%eax
c01133f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01133fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01133ff:	74 01                	je     c0113402 <sfs_io_nolock+0x2f0>
    		goto out;
c0113401:	90                   	nop
    	}
    }
out:
    *alenp = alen;
c0113402:	8b 45 18             	mov    0x18(%ebp),%eax
c0113405:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113408:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c011340a:	8b 55 14             	mov    0x14(%ebp),%edx
c011340d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113410:	01 c2                	add    %eax,%edx
c0113412:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113415:	8b 00                	mov    (%eax),%eax
c0113417:	8b 00                	mov    (%eax),%eax
c0113419:	39 c2                	cmp    %eax,%edx
c011341b:	76 19                	jbe    c0113436 <sfs_io_nolock+0x324>
        sin->din->size = offset + alen;
c011341d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113420:	8b 00                	mov    (%eax),%eax
c0113422:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0113425:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113428:	01 ca                	add    %ecx,%edx
c011342a:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c011342c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011342f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c0113436:	8b 45 e8             	mov    -0x18(%ebp),%eax

}
c0113439:	c9                   	leave  
c011343a:	c3                   	ret    

c011343b <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c011343b:	55                   	push   %ebp
c011343c:	89 e5                	mov    %esp,%ebp
c011343e:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113441:	8b 45 08             	mov    0x8(%ebp),%eax
c0113444:	8b 40 38             	mov    0x38(%eax),%eax
c0113447:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011344a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011344e:	74 0a                	je     c011345a <sfs_io+0x1f>
c0113450:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113453:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113456:	85 c0                	test   %eax,%eax
c0113458:	74 24                	je     c011347e <sfs_io+0x43>
c011345a:	c7 44 24 0c 14 96 11 	movl   $0xc0119614,0xc(%esp)
c0113461:	c0 
c0113462:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113469:	c0 
c011346a:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0113471:	00 
c0113472:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113479:	e8 4a da fe ff       	call   c0100ec8 <__panic>
c011347e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113481:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113484:	8b 45 08             	mov    0x8(%ebp),%eax
c0113487:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011348a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011348e:	74 0d                	je     c011349d <sfs_io+0x62>
c0113490:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113493:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113496:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011349b:	74 24                	je     c01134c1 <sfs_io+0x86>
c011349d:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c01134a4:	c0 
c01134a5:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01134ac:	c0 
c01134ad:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c01134b4:	00 
c01134b5:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01134bc:	e8 07 da fe ff       	call   c0100ec8 <__panic>
c01134c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01134c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c01134c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01134ca:	89 04 24             	mov    %eax,(%esp)
c01134cd:	e8 26 ec ff ff       	call   c01120f8 <lock_sin>
    {
        size_t alen = iob->io_resid;
c01134d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134d5:	8b 40 0c             	mov    0xc(%eax),%eax
c01134d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c01134db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134de:	8b 50 04             	mov    0x4(%eax),%edx
c01134e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01134e4:	8b 00                	mov    (%eax),%eax
c01134e6:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01134e9:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c01134ed:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c01134f0:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01134f4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01134f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01134fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01134ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113503:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113506:	89 04 24             	mov    %eax,(%esp)
c0113509:	e8 04 fc ff ff       	call   c0113112 <sfs_io_nolock>
c011350e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c0113511:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113514:	85 c0                	test   %eax,%eax
c0113516:	74 12                	je     c011352a <sfs_io+0xef>
            iobuf_skip(iob, alen);
c0113518:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011351b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011351f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113522:	89 04 24             	mov    %eax,(%esp)
c0113525:	e8 27 7e ff ff       	call   c010b351 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c011352a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011352d:	89 04 24             	mov    %eax,(%esp)
c0113530:	e8 d9 eb ff ff       	call   c011210e <unlock_sin>
    return ret;
c0113535:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0113538:	c9                   	leave  
c0113539:	c3                   	ret    

c011353a <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c011353a:	55                   	push   %ebp
c011353b:	89 e5                	mov    %esp,%ebp
c011353d:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c0113540:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0113547:	00 
c0113548:	8b 45 0c             	mov    0xc(%ebp),%eax
c011354b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011354f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113552:	89 04 24             	mov    %eax,(%esp)
c0113555:	e8 e1 fe ff ff       	call   c011343b <sfs_io>
}
c011355a:	c9                   	leave  
c011355b:	c3                   	ret    

c011355c <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c011355c:	55                   	push   %ebp
c011355d:	89 e5                	mov    %esp,%ebp
c011355f:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0113562:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0113569:	00 
c011356a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011356d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113571:	8b 45 08             	mov    0x8(%ebp),%eax
c0113574:	89 04 24             	mov    %eax,(%esp)
c0113577:	e8 bf fe ff ff       	call   c011343b <sfs_io>
}
c011357c:	c9                   	leave  
c011357d:	c3                   	ret    

c011357e <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c011357e:	55                   	push   %ebp
c011357f:	89 e5                	mov    %esp,%ebp
c0113581:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0113584:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c011358b:	00 
c011358c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113593:	00 
c0113594:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113597:	89 04 24             	mov    %eax,(%esp)
c011359a:	e8 93 1e 00 00       	call   c0115432 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011359f:	8b 45 08             	mov    0x8(%ebp),%eax
c01135a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01135a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01135a9:	74 17                	je     c01135c2 <sfs_fstat+0x44>
c01135ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135ae:	8b 40 3c             	mov    0x3c(%eax),%eax
c01135b1:	85 c0                	test   %eax,%eax
c01135b3:	74 0d                	je     c01135c2 <sfs_fstat+0x44>
c01135b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135b8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01135bb:	8b 40 28             	mov    0x28(%eax),%eax
c01135be:	85 c0                	test   %eax,%eax
c01135c0:	75 24                	jne    c01135e6 <sfs_fstat+0x68>
c01135c2:	c7 44 24 0c 40 96 11 	movl   $0xc0119640,0xc(%esp)
c01135c9:	c0 
c01135ca:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01135d1:	c0 
c01135d2:	c7 44 24 04 b2 02 00 	movl   $0x2b2,0x4(%esp)
c01135d9:	00 
c01135da:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01135e1:	e8 e2 d8 fe ff       	call   c0100ec8 <__panic>
c01135e6:	c7 44 24 04 90 96 11 	movl   $0xc0119690,0x4(%esp)
c01135ed:	c0 
c01135ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135f1:	89 04 24             	mov    %eax,(%esp)
c01135f4:	e8 d1 bb ff ff       	call   c010f1ca <inode_check>
c01135f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135fc:	8b 40 3c             	mov    0x3c(%eax),%eax
c01135ff:	8b 40 28             	mov    0x28(%eax),%eax
c0113602:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113605:	89 54 24 04          	mov    %edx,0x4(%esp)
c0113609:	8b 55 08             	mov    0x8(%ebp),%edx
c011360c:	89 14 24             	mov    %edx,(%esp)
c011360f:	ff d0                	call   *%eax
c0113611:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113614:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113618:	74 05                	je     c011361f <sfs_fstat+0xa1>
        return ret;
c011361a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011361d:	eb 71                	jmp    c0113690 <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c011361f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113622:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113625:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113629:	74 0d                	je     c0113638 <sfs_fstat+0xba>
c011362b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011362e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113631:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113636:	74 24                	je     c011365c <sfs_fstat+0xde>
c0113638:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c011363f:	c0 
c0113640:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113647:	c0 
c0113648:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c011364f:	00 
c0113650:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113657:	e8 6c d8 fe ff       	call   c0100ec8 <__panic>
c011365c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011365f:	8b 00                	mov    (%eax),%eax
c0113661:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0113664:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113667:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011366b:	0f b7 d0             	movzwl %ax,%edx
c011366e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113671:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c0113674:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113677:	8b 50 08             	mov    0x8(%eax),%edx
c011367a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011367d:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c0113680:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113683:	8b 10                	mov    (%eax),%edx
c0113685:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113688:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c011368b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113690:	c9                   	leave  
c0113691:	c3                   	ret    

c0113692 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c0113692:	55                   	push   %ebp
c0113693:	89 e5                	mov    %esp,%ebp
c0113695:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113698:	8b 45 08             	mov    0x8(%ebp),%eax
c011369b:	8b 40 38             	mov    0x38(%eax),%eax
c011369e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01136a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01136a5:	74 0a                	je     c01136b1 <sfs_fsync+0x1f>
c01136a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136aa:	8b 40 6c             	mov    0x6c(%eax),%eax
c01136ad:	85 c0                	test   %eax,%eax
c01136af:	74 24                	je     c01136d5 <sfs_fsync+0x43>
c01136b1:	c7 44 24 0c 14 96 11 	movl   $0xc0119614,0xc(%esp)
c01136b8:	c0 
c01136b9:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01136c0:	c0 
c01136c1:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c01136c8:	00 
c01136c9:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01136d0:	e8 f3 d7 fe ff       	call   c0100ec8 <__panic>
c01136d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01136db:	8b 45 08             	mov    0x8(%ebp),%eax
c01136de:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01136e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01136e5:	74 0d                	je     c01136f4 <sfs_fsync+0x62>
c01136e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01136ea:	8b 40 2c             	mov    0x2c(%eax),%eax
c01136ed:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01136f2:	74 24                	je     c0113718 <sfs_fsync+0x86>
c01136f4:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c01136fb:	c0 
c01136fc:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113703:	c0 
c0113704:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c011370b:	00 
c011370c:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113713:	e8 b0 d7 fe ff       	call   c0100ec8 <__panic>
c0113718:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011371b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c011371e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0113725:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113728:	8b 40 08             	mov    0x8(%eax),%eax
c011372b:	85 c0                	test   %eax,%eax
c011372d:	74 6b                	je     c011379a <sfs_fsync+0x108>
        lock_sin(sin);
c011372f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113732:	89 04 24             	mov    %eax,(%esp)
c0113735:	e8 be e9 ff ff       	call   c01120f8 <lock_sin>
        {
            if (sin->dirty) {
c011373a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011373d:	8b 40 08             	mov    0x8(%eax),%eax
c0113740:	85 c0                	test   %eax,%eax
c0113742:	74 4b                	je     c011378f <sfs_fsync+0xfd>
                sin->dirty = 0;
c0113744:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113747:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c011374e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113751:	8b 50 04             	mov    0x4(%eax),%edx
c0113754:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113757:	8b 00                	mov    (%eax),%eax
c0113759:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113760:	00 
c0113761:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0113765:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c011376c:	00 
c011376d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113771:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113774:	89 04 24             	mov    %eax,(%esp)
c0113777:	e8 ae 0e 00 00       	call   c011462a <sfs_wbuf>
c011377c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011377f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113783:	74 0a                	je     c011378f <sfs_fsync+0xfd>
                    sin->dirty = 1;
c0113785:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113788:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c011378f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113792:	89 04 24             	mov    %eax,(%esp)
c0113795:	e8 74 e9 ff ff       	call   c011210e <unlock_sin>
    }
    return ret;
c011379a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011379d:	c9                   	leave  
c011379e:	c3                   	ret    

c011379f <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c011379f:	55                   	push   %ebp
c01137a0:	89 e5                	mov    %esp,%ebp
c01137a2:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01137a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137a8:	8b 40 0c             	mov    0xc(%eax),%eax
c01137ab:	83 f8 02             	cmp    $0x2,%eax
c01137ae:	76 15                	jbe    c01137c5 <sfs_namefile+0x26>
c01137b0:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01137b7:	e8 9e 14 ff ff       	call   c0104c5a <kmalloc>
c01137bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01137bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01137c3:	75 0a                	jne    c01137cf <sfs_namefile+0x30>
        return -E_NO_MEM;
c01137c5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01137ca:	e9 bd 02 00 00       	jmp    c0113a8c <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01137cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01137d2:	8b 40 38             	mov    0x38(%eax),%eax
c01137d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01137d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01137dc:	74 0a                	je     c01137e8 <sfs_namefile+0x49>
c01137de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137e1:	8b 40 6c             	mov    0x6c(%eax),%eax
c01137e4:	85 c0                	test   %eax,%eax
c01137e6:	74 24                	je     c011380c <sfs_namefile+0x6d>
c01137e8:	c7 44 24 0c 14 96 11 	movl   $0xc0119614,0xc(%esp)
c01137ef:	c0 
c01137f0:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01137f7:	c0 
c01137f8:	c7 44 24 04 de 02 00 	movl   $0x2de,0x4(%esp)
c01137ff:	00 
c0113800:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113807:	e8 bc d6 fe ff       	call   c0100ec8 <__panic>
c011380c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011380f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113812:	8b 45 08             	mov    0x8(%ebp),%eax
c0113815:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113818:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011381c:	74 0d                	je     c011382b <sfs_namefile+0x8c>
c011381e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113821:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113824:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113829:	74 24                	je     c011384f <sfs_namefile+0xb0>
c011382b:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c0113832:	c0 
c0113833:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c011383a:	c0 
c011383b:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
c0113842:	00 
c0113843:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c011384a:	e8 79 d6 fe ff       	call   c0100ec8 <__panic>
c011384f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113852:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0113855:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113858:	8b 10                	mov    (%eax),%edx
c011385a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011385d:	8b 40 0c             	mov    0xc(%eax),%eax
c0113860:	01 d0                	add    %edx,%eax
c0113862:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0113865:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113868:	8b 40 0c             	mov    0xc(%eax),%eax
c011386b:	83 e8 02             	sub    $0x2,%eax
c011386e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0113871:	8b 45 08             	mov    0x8(%ebp),%eax
c0113874:	89 04 24             	mov    %eax,(%esp)
c0113877:	e8 46 b7 ff ff       	call   c010efc2 <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c011387c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113883:	00 
c0113884:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113887:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011388b:	c7 44 24 08 98 96 11 	movl   $0xc0119698,0x8(%esp)
c0113892:	c0 
c0113893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113896:	89 44 24 04          	mov    %eax,0x4(%esp)
c011389a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011389d:	89 04 24             	mov    %eax,(%esp)
c01138a0:	e8 4e f7 ff ff       	call   c0112ff3 <sfs_lookup_once>
c01138a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01138a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01138ac:	74 05                	je     c01138b3 <sfs_namefile+0x114>
            goto failed;
c01138ae:	e9 c0 01 00 00       	jmp    c0113a73 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c01138b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138b6:	8b 40 04             	mov    0x4(%eax),%eax
c01138b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c01138bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01138bf:	89 04 24             	mov    %eax,(%esp)
c01138c2:	e8 15 b7 ff ff       	call   c010efdc <inode_ref_dec>
        if (node == parent) {
c01138c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01138ca:	39 45 08             	cmp    %eax,0x8(%ebp)
c01138cd:	75 76                	jne    c0113945 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c01138cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01138d2:	89 04 24             	mov    %eax,(%esp)
c01138d5:	e8 02 b7 ff ff       	call   c010efdc <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c01138da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01138e0:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01138e3:	83 e8 02             	sub    $0x2,%eax
c01138e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c01138e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138ec:	8b 00                	mov    (%eax),%eax
c01138ee:	8d 50 01             	lea    0x1(%eax),%edx
c01138f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01138f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01138f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01138fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01138ff:	89 14 24             	mov    %edx,(%esp)
c0113902:	e8 6a 1b 00 00       	call   c0115471 <memmove>
c0113907:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c011390a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011390d:	83 e8 01             	sub    $0x1,%eax
c0113910:	c6 00 2f             	movb   $0x2f,(%eax)
c0113913:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113916:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113919:	01 d0                	add    %edx,%eax
c011391b:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c011391e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113921:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113925:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113928:	89 04 24             	mov    %eax,(%esp)
c011392b:	e8 21 7a ff ff       	call   c010b351 <iobuf_skip>
    kfree(entry);
c0113930:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113933:	89 04 24             	mov    %eax,(%esp)
c0113936:	e8 3a 13 ff ff       	call   c0104c75 <kfree>
    return 0;
c011393b:	b8 00 00 00 00       	mov    $0x0,%eax
c0113940:	e9 47 01 00 00       	jmp    c0113a8c <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0113945:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113948:	89 45 08             	mov    %eax,0x8(%ebp)
c011394b:	8b 45 08             	mov    0x8(%ebp),%eax
c011394e:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113951:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113955:	74 0d                	je     c0113964 <sfs_namefile+0x1c5>
c0113957:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011395a:	8b 40 2c             	mov    0x2c(%eax),%eax
c011395d:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113962:	74 24                	je     c0113988 <sfs_namefile+0x1e9>
c0113964:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c011396b:	c0 
c011396c:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113973:	c0 
c0113974:	c7 44 24 04 f2 02 00 	movl   $0x2f2,0x4(%esp)
c011397b:	00 
c011397c:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113983:	e8 40 d5 fe ff       	call   c0100ec8 <__panic>
c0113988:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011398b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c011398e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113991:	8b 40 04             	mov    0x4(%eax),%eax
c0113994:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113997:	74 0f                	je     c01139a8 <sfs_namefile+0x209>
c0113999:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011399c:	8b 00                	mov    (%eax),%eax
c011399e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01139a2:	66 83 f8 02          	cmp    $0x2,%ax
c01139a6:	74 24                	je     c01139cc <sfs_namefile+0x22d>
c01139a8:	c7 44 24 0c 9c 96 11 	movl   $0xc011969c,0xc(%esp)
c01139af:	c0 
c01139b0:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01139b7:	c0 
c01139b8:	c7 44 24 04 f3 02 00 	movl   $0x2f3,0x4(%esp)
c01139bf:	00 
c01139c0:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01139c7:	e8 fc d4 fe ff       	call   c0100ec8 <__panic>

        lock_sin(sin);
c01139cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139cf:	89 04 24             	mov    %eax,(%esp)
c01139d2:	e8 21 e7 ff ff       	call   c01120f8 <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c01139d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139da:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01139de:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01139e1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01139e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01139ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01139ef:	89 04 24             	mov    %eax,(%esp)
c01139f2:	e8 90 f5 ff ff       	call   c0112f87 <sfs_dirent_findino_nolock>
c01139f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c01139fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139fd:	89 04 24             	mov    %eax,(%esp)
c0113a00:	e8 09 e7 ff ff       	call   c011210e <unlock_sin>

        if (ret != 0) {
c0113a05:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113a09:	74 03                	je     c0113a0e <sfs_namefile+0x26f>
            goto failed;
c0113a0b:	90                   	nop
c0113a0c:	eb 65                	jmp    c0113a73 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0113a0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a11:	83 c0 04             	add    $0x4,%eax
c0113a14:	89 04 24             	mov    %eax,(%esp)
c0113a17:	e8 c0 16 00 00       	call   c01150dc <strlen>
c0113a1c:	83 c0 01             	add    $0x1,%eax
c0113a1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113a22:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a25:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113a28:	76 09                	jbe    c0113a33 <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113a2a:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0113a31:	eb 40                	jmp    c0113a73 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113a33:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a36:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a3c:	f7 d8                	neg    %eax
c0113a3e:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113a41:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a44:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113a47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a4a:	83 c0 04             	add    $0x4,%eax
c0113a4d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113a51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a58:	89 04 24             	mov    %eax,(%esp)
c0113a5b:	e8 b4 1a 00 00       	call   c0115514 <memcpy>
        ptr[alen - 1] = '/';
c0113a60:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a63:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113a66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a69:	01 d0                	add    %edx,%eax
c0113a6b:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113a6e:	e9 09 fe ff ff       	jmp    c011387c <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113a73:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a76:	89 04 24             	mov    %eax,(%esp)
c0113a79:	e8 5e b5 ff ff       	call   c010efdc <inode_ref_dec>
    kfree(entry);
c0113a7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a81:	89 04 24             	mov    %eax,(%esp)
c0113a84:	e8 ec 11 ff ff       	call   c0104c75 <kfree>
    return ret;
c0113a89:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113a8c:	c9                   	leave  
c0113a8d:	c3                   	ret    

c0113a8e <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113a8e:	55                   	push   %ebp
c0113a8f:	89 e5                	mov    %esp,%ebp
c0113a91:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113a94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a97:	8b 00                	mov    (%eax),%eax
c0113a99:	8b 40 08             	mov    0x8(%eax),%eax
c0113a9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113a9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113aa6:	eb 4c                	jmp    c0113af4 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113aa8:	8b 45 14             	mov    0x14(%ebp),%eax
c0113aab:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113ab2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113ab6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ab9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113abd:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ac0:	89 04 24             	mov    %eax,(%esp)
c0113ac3:	e8 96 f2 ff ff       	call   c0112d5e <sfs_dirent_read_nolock>
c0113ac8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113acb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113acf:	74 05                	je     c0113ad6 <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113ad1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ad4:	eb 2b                	jmp    c0113b01 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113ad6:	8b 45 14             	mov    0x14(%ebp),%eax
c0113ad9:	8b 00                	mov    (%eax),%eax
c0113adb:	85 c0                	test   %eax,%eax
c0113add:	74 11                	je     c0113af0 <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113adf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113ae3:	75 07                	jne    c0113aec <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113ae5:	b8 00 00 00 00       	mov    $0x0,%eax
c0113aea:	eb 15                	jmp    c0113b01 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113aec:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113af0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113af7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113afa:	7c ac                	jl     c0113aa8 <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113afc:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113b01:	c9                   	leave  
c0113b02:	c3                   	ret    

c0113b03 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113b03:	55                   	push   %ebp
c0113b04:	89 e5                	mov    %esp,%ebp
c0113b06:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113b09:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113b10:	e8 45 11 ff ff       	call   c0104c5a <kmalloc>
c0113b15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113b18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113b1c:	75 0a                	jne    c0113b28 <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113b1e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113b23:	e9 6b 01 00 00       	jmp    c0113c93 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113b28:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b2b:	8b 40 38             	mov    0x38(%eax),%eax
c0113b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113b31:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113b35:	74 0a                	je     c0113b41 <sfs_getdirentry+0x3e>
c0113b37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b3a:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113b3d:	85 c0                	test   %eax,%eax
c0113b3f:	74 24                	je     c0113b65 <sfs_getdirentry+0x62>
c0113b41:	c7 44 24 0c 14 96 11 	movl   $0xc0119614,0xc(%esp)
c0113b48:	c0 
c0113b49:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113b50:	c0 
c0113b51:	c7 44 24 04 34 03 00 	movl   $0x334,0x4(%esp)
c0113b58:	00 
c0113b59:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113b60:	e8 63 d3 fe ff       	call   c0100ec8 <__panic>
c0113b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b68:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113b6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113b71:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113b75:	74 0d                	je     c0113b84 <sfs_getdirentry+0x81>
c0113b77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b7a:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113b7d:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113b82:	74 24                	je     c0113ba8 <sfs_getdirentry+0xa5>
c0113b84:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c0113b8b:	c0 
c0113b8c:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113b93:	c0 
c0113b94:	c7 44 24 04 35 03 00 	movl   $0x335,0x4(%esp)
c0113b9b:	00 
c0113b9c:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113ba3:	e8 20 d3 fe ff       	call   c0100ec8 <__panic>
c0113ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113bab:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113bae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113bb1:	8b 40 04             	mov    0x4(%eax),%eax
c0113bb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113bb7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113bbb:	78 0a                	js     c0113bc7 <sfs_getdirentry+0xc4>
c0113bbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113bc0:	0f b6 c0             	movzbl %al,%eax
c0113bc3:	85 c0                	test   %eax,%eax
c0113bc5:	74 15                	je     c0113bdc <sfs_getdirentry+0xd9>
        kfree(entry);
c0113bc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113bca:	89 04 24             	mov    %eax,(%esp)
c0113bcd:	e8 a3 10 ff ff       	call   c0104c75 <kfree>
        return -E_INVAL;
c0113bd2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113bd7:	e9 b7 00 00 00       	jmp    c0113c93 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113bdc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113bdf:	c1 e8 08             	shr    $0x8,%eax
c0113be2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113be5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113be8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113beb:	8b 00                	mov    (%eax),%eax
c0113bed:	8b 40 08             	mov    0x8(%eax),%eax
c0113bf0:	39 c2                	cmp    %eax,%edx
c0113bf2:	76 15                	jbe    c0113c09 <sfs_getdirentry+0x106>
        kfree(entry);
c0113bf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113bf7:	89 04 24             	mov    %eax,(%esp)
c0113bfa:	e8 76 10 ff ff       	call   c0104c75 <kfree>
        return -E_NOENT;
c0113bff:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113c04:	e9 8a 00 00 00       	jmp    c0113c93 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113c09:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c0c:	89 04 24             	mov    %eax,(%esp)
c0113c0f:	e8 e4 e4 ff ff       	call   c01120f8 <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113c14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c17:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113c1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113c1e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113c22:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113c2c:	89 04 24             	mov    %eax,(%esp)
c0113c2f:	e8 5a fe ff ff       	call   c0113a8e <sfs_getdirentry_sub_nolock>
c0113c34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113c37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113c3b:	74 0d                	je     c0113c4a <sfs_getdirentry+0x147>
        unlock_sin(sin);
c0113c3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c40:	89 04 24             	mov    %eax,(%esp)
c0113c43:	e8 c6 e4 ff ff       	call   c011210e <unlock_sin>
        goto out;
c0113c48:	eb 3b                	jmp    c0113c85 <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113c4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c4d:	89 04 24             	mov    %eax,(%esp)
c0113c50:	e8 b9 e4 ff ff       	call   c011210e <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113c55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c58:	83 c0 04             	add    $0x4,%eax
c0113c5b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113c62:	00 
c0113c63:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113c6a:	00 
c0113c6b:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113c72:	00 
c0113c73:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113c7a:	89 04 24             	mov    %eax,(%esp)
c0113c7d:	e8 ba 75 ff ff       	call   c010b23c <iobuf_move>
c0113c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113c85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c88:	89 04 24             	mov    %eax,(%esp)
c0113c8b:	e8 e5 0f ff ff       	call   c0104c75 <kfree>
    return ret;
c0113c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113c93:	c9                   	leave  
c0113c94:	c3                   	ret    

c0113c95 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113c95:	55                   	push   %ebp
c0113c96:	89 e5                	mov    %esp,%ebp
c0113c98:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c9e:	8b 40 38             	mov    0x38(%eax),%eax
c0113ca1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113ca4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113ca8:	74 0a                	je     c0113cb4 <sfs_reclaim+0x1f>
c0113caa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113cad:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113cb0:	85 c0                	test   %eax,%eax
c0113cb2:	74 24                	je     c0113cd8 <sfs_reclaim+0x43>
c0113cb4:	c7 44 24 0c 14 96 11 	movl   $0xc0119614,0xc(%esp)
c0113cbb:	c0 
c0113cbc:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113cc3:	c0 
c0113cc4:	c7 44 24 04 52 03 00 	movl   $0x352,0x4(%esp)
c0113ccb:	00 
c0113ccc:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113cd3:	e8 f0 d1 fe ff       	call   c0100ec8 <__panic>
c0113cd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113cdb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113cde:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ce1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113ce4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113ce8:	74 0d                	je     c0113cf7 <sfs_reclaim+0x62>
c0113cea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ced:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113cf0:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113cf5:	74 24                	je     c0113d1b <sfs_reclaim+0x86>
c0113cf7:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c0113cfe:	c0 
c0113cff:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113d06:	c0 
c0113d07:	c7 44 24 04 53 03 00 	movl   $0x353,0x4(%esp)
c0113d0e:	00 
c0113d0f:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113d16:	e8 ad d1 fe ff       	call   c0100ec8 <__panic>
c0113d1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0113d21:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0113d28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d2b:	89 04 24             	mov    %eax,(%esp)
c0113d2e:	e8 4d 0b 00 00       	call   c0114880 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0113d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d36:	8b 40 0c             	mov    0xc(%eax),%eax
c0113d39:	85 c0                	test   %eax,%eax
c0113d3b:	7f 24                	jg     c0113d61 <sfs_reclaim+0xcc>
c0113d3d:	c7 44 24 0c ce 96 11 	movl   $0xc01196ce,0xc(%esp)
c0113d44:	c0 
c0113d45:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113d4c:	c0 
c0113d4d:	c7 44 24 04 58 03 00 	movl   $0x358,0x4(%esp)
c0113d54:	00 
c0113d55:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113d5c:	e8 67 d1 fe ff       	call   c0100ec8 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0113d61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d64:	8b 40 0c             	mov    0xc(%eax),%eax
c0113d67:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113d6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d6d:	89 50 0c             	mov    %edx,0xc(%eax)
c0113d70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d73:	8b 40 0c             	mov    0xc(%eax),%eax
c0113d76:	85 c0                	test   %eax,%eax
c0113d78:	0f 85 a1 01 00 00    	jne    c0113f1f <sfs_reclaim+0x28a>
c0113d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d81:	89 04 24             	mov    %eax,(%esp)
c0113d84:	e8 64 e3 ff ff       	call   c01120ed <inode_ref_count>
c0113d89:	85 c0                	test   %eax,%eax
c0113d8b:	0f 85 8e 01 00 00    	jne    c0113f1f <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0113d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d94:	8b 00                	mov    (%eax),%eax
c0113d96:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113d9a:	66 85 c0             	test   %ax,%ax
c0113d9d:	0f 85 81 00 00 00    	jne    c0113e24 <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0113da3:	8b 45 08             	mov    0x8(%ebp),%eax
c0113da6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113da9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113dad:	74 17                	je     c0113dc6 <sfs_reclaim+0x131>
c0113daf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113db2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113db5:	85 c0                	test   %eax,%eax
c0113db7:	74 0d                	je     c0113dc6 <sfs_reclaim+0x131>
c0113db9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113dbc:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113dbf:	8b 40 30             	mov    0x30(%eax),%eax
c0113dc2:	85 c0                	test   %eax,%eax
c0113dc4:	75 24                	jne    c0113dea <sfs_reclaim+0x155>
c0113dc6:	c7 44 24 0c e8 96 11 	movl   $0xc01196e8,0xc(%esp)
c0113dcd:	c0 
c0113dce:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113dd5:	c0 
c0113dd6:	c7 44 24 04 5d 03 00 	movl   $0x35d,0x4(%esp)
c0113ddd:	00 
c0113dde:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113de5:	e8 de d0 fe ff       	call   c0100ec8 <__panic>
c0113dea:	c7 44 24 04 39 97 11 	movl   $0xc0119739,0x4(%esp)
c0113df1:	c0 
c0113df2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113df5:	89 04 24             	mov    %eax,(%esp)
c0113df8:	e8 cd b3 ff ff       	call   c010f1ca <inode_check>
c0113dfd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e00:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e03:	8b 40 30             	mov    0x30(%eax),%eax
c0113e06:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113e0d:	00 
c0113e0e:	8b 55 08             	mov    0x8(%ebp),%edx
c0113e11:	89 14 24             	mov    %edx,(%esp)
c0113e14:	ff d0                	call   *%eax
c0113e16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113e19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113e1d:	74 05                	je     c0113e24 <sfs_reclaim+0x18f>
            goto failed_unlock;
c0113e1f:	e9 fb 00 00 00       	jmp    c0113f1f <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0113e24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e27:	8b 40 08             	mov    0x8(%eax),%eax
c0113e2a:	85 c0                	test   %eax,%eax
c0113e2c:	74 76                	je     c0113ea4 <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c0113e2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e31:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0113e34:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113e38:	74 17                	je     c0113e51 <sfs_reclaim+0x1bc>
c0113e3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e3d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e40:	85 c0                	test   %eax,%eax
c0113e42:	74 0d                	je     c0113e51 <sfs_reclaim+0x1bc>
c0113e44:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e47:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e4a:	8b 40 18             	mov    0x18(%eax),%eax
c0113e4d:	85 c0                	test   %eax,%eax
c0113e4f:	75 24                	jne    c0113e75 <sfs_reclaim+0x1e0>
c0113e51:	c7 44 24 0c a4 95 11 	movl   $0xc01195a4,0xc(%esp)
c0113e58:	c0 
c0113e59:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113e60:	c0 
c0113e61:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
c0113e68:	00 
c0113e69:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113e70:	e8 53 d0 fe ff       	call   c0100ec8 <__panic>
c0113e75:	c7 44 24 04 f2 95 11 	movl   $0xc01195f2,0x4(%esp)
c0113e7c:	c0 
c0113e7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e80:	89 04 24             	mov    %eax,(%esp)
c0113e83:	e8 42 b3 ff ff       	call   c010f1ca <inode_check>
c0113e88:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e8b:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e8e:	8b 40 18             	mov    0x18(%eax),%eax
c0113e91:	8b 55 08             	mov    0x8(%ebp),%edx
c0113e94:	89 14 24             	mov    %edx,(%esp)
c0113e97:	ff d0                	call   *%eax
c0113e99:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113e9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113ea0:	74 02                	je     c0113ea4 <sfs_reclaim+0x20f>
            goto failed_unlock;
c0113ea2:	eb 7b                	jmp    c0113f1f <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c0113ea4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ea7:	89 04 24             	mov    %eax,(%esp)
c0113eaa:	e8 b9 e3 ff ff       	call   c0112268 <sfs_remove_links>
    unlock_sfs_fs(sfs);
c0113eaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113eb2:	89 04 24             	mov    %eax,(%esp)
c0113eb5:	e8 f2 09 00 00       	call   c01148ac <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c0113eba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ebd:	8b 00                	mov    (%eax),%eax
c0113ebf:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113ec3:	66 85 c0             	test   %ax,%ax
c0113ec6:	75 38                	jne    c0113f00 <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c0113ec8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ecb:	8b 40 04             	mov    0x4(%eax),%eax
c0113ece:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113ed2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ed5:	89 04 24             	mov    %eax,(%esp)
c0113ed8:	e8 1b e5 ff ff       	call   c01123f8 <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c0113edd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ee0:	8b 00                	mov    (%eax),%eax
c0113ee2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ee5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113ee8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113eec:	74 12                	je     c0113f00 <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c0113eee:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113ef1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ef8:	89 04 24             	mov    %eax,(%esp)
c0113efb:	e8 f8 e4 ff ff       	call   c01123f8 <sfs_block_free>
        }
    }
    kfree(sin->din);
c0113f00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f03:	8b 00                	mov    (%eax),%eax
c0113f05:	89 04 24             	mov    %eax,(%esp)
c0113f08:	e8 68 0d ff ff       	call   c0104c75 <kfree>
    vop_kill(node);
c0113f0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f10:	89 04 24             	mov    %eax,(%esp)
c0113f13:	e8 31 b0 ff ff       	call   c010ef49 <inode_kill>
    return 0;
c0113f18:	b8 00 00 00 00       	mov    $0x0,%eax
c0113f1d:	eb 0e                	jmp    c0113f2d <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0113f1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f22:	89 04 24             	mov    %eax,(%esp)
c0113f25:	e8 82 09 00 00       	call   c01148ac <unlock_sfs_fs>
    return ret;
c0113f2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113f2d:	c9                   	leave  
c0113f2e:	c3                   	ret    

c0113f2f <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0113f2f:	55                   	push   %ebp
c0113f30:	89 e5                	mov    %esp,%ebp
c0113f32:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113f35:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113f3f:	74 0d                	je     c0113f4e <sfs_gettype+0x1f>
c0113f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f44:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113f47:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113f4c:	74 24                	je     c0113f72 <sfs_gettype+0x43>
c0113f4e:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c0113f55:	c0 
c0113f56:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0113f5d:	c0 
c0113f5e:	c7 44 24 04 7d 03 00 	movl   $0x37d,0x4(%esp)
c0113f65:	00 
c0113f66:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113f6d:	e8 56 cf fe ff       	call   c0100ec8 <__panic>
c0113f72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f75:	8b 00                	mov    (%eax),%eax
c0113f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c0113f7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f7d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113f81:	0f b7 c0             	movzwl %ax,%eax
c0113f84:	83 f8 02             	cmp    $0x2,%eax
c0113f87:	74 0c                	je     c0113f95 <sfs_gettype+0x66>
c0113f89:	83 f8 03             	cmp    $0x3,%eax
c0113f8c:	74 27                	je     c0113fb5 <sfs_gettype+0x86>
c0113f8e:	83 f8 01             	cmp    $0x1,%eax
c0113f91:	74 12                	je     c0113fa5 <sfs_gettype+0x76>
c0113f93:	eb 30                	jmp    c0113fc5 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0113f95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f98:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0113f9e:	b8 00 00 00 00       	mov    $0x0,%eax
c0113fa3:	eb 4a                	jmp    c0113fef <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0113fa5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113fa8:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0113fae:	b8 00 00 00 00       	mov    $0x0,%eax
c0113fb3:	eb 3a                	jmp    c0113fef <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0113fb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113fb8:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0113fbe:	b8 00 00 00 00       	mov    $0x0,%eax
c0113fc3:	eb 2a                	jmp    c0113fef <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c0113fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113fc8:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113fcc:	0f b7 c0             	movzwl %ax,%eax
c0113fcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113fd3:	c7 44 24 08 40 93 11 	movl   $0xc0119340,0x8(%esp)
c0113fda:	c0 
c0113fdb:	c7 44 24 04 89 03 00 	movl   $0x389,0x4(%esp)
c0113fe2:	00 
c0113fe3:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0113fea:	e8 d9 ce fe ff       	call   c0100ec8 <__panic>
}
c0113fef:	c9                   	leave  
c0113ff0:	c3                   	ret    

c0113ff1 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0113ff1:	55                   	push   %ebp
c0113ff2:	89 e5                	mov    %esp,%ebp
c0113ff4:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c0113ff7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113ffb:	78 0a                	js     c0114007 <sfs_tryseek+0x16>
c0113ffd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114000:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0114005:	76 0a                	jbe    c0114011 <sfs_tryseek+0x20>
        return -E_INVAL;
c0114007:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011400c:	e9 ca 00 00 00       	jmp    c01140db <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114011:	8b 45 08             	mov    0x8(%ebp),%eax
c0114014:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114017:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011401b:	74 0d                	je     c011402a <sfs_tryseek+0x39>
c011401d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114020:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114023:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114028:	74 24                	je     c011404e <sfs_tryseek+0x5d>
c011402a:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c0114031:	c0 
c0114032:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0114039:	c0 
c011403a:	c7 44 24 04 94 03 00 	movl   $0x394,0x4(%esp)
c0114041:	00 
c0114042:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0114049:	e8 7a ce fe ff       	call   c0100ec8 <__panic>
c011404e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114051:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0114054:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114057:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011405a:	8b 00                	mov    (%eax),%eax
c011405c:	8b 00                	mov    (%eax),%eax
c011405e:	39 c2                	cmp    %eax,%edx
c0114060:	76 74                	jbe    c01140d6 <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0114062:	8b 45 08             	mov    0x8(%ebp),%eax
c0114065:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114068:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011406c:	74 17                	je     c0114085 <sfs_tryseek+0x94>
c011406e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114071:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114074:	85 c0                	test   %eax,%eax
c0114076:	74 0d                	je     c0114085 <sfs_tryseek+0x94>
c0114078:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011407b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011407e:	8b 40 30             	mov    0x30(%eax),%eax
c0114081:	85 c0                	test   %eax,%eax
c0114083:	75 24                	jne    c01140a9 <sfs_tryseek+0xb8>
c0114085:	c7 44 24 0c e8 96 11 	movl   $0xc01196e8,0xc(%esp)
c011408c:	c0 
c011408d:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0114094:	c0 
c0114095:	c7 44 24 04 96 03 00 	movl   $0x396,0x4(%esp)
c011409c:	00 
c011409d:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01140a4:	e8 1f ce fe ff       	call   c0100ec8 <__panic>
c01140a9:	c7 44 24 04 39 97 11 	movl   $0xc0119739,0x4(%esp)
c01140b0:	c0 
c01140b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140b4:	89 04 24             	mov    %eax,(%esp)
c01140b7:	e8 0e b1 ff ff       	call   c010f1ca <inode_check>
c01140bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140bf:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140c2:	8b 40 30             	mov    0x30(%eax),%eax
c01140c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01140c8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01140cc:	8b 55 08             	mov    0x8(%ebp),%edx
c01140cf:	89 14 24             	mov    %edx,(%esp)
c01140d2:	ff d0                	call   *%eax
c01140d4:	eb 05                	jmp    c01140db <sfs_tryseek+0xea>
    }
    return 0;
c01140d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01140db:	c9                   	leave  
c01140dc:	c3                   	ret    

c01140dd <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c01140dd:	55                   	push   %ebp
c01140de:	89 e5                	mov    %esp,%ebp
c01140e0:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c01140e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01140e7:	78 0a                	js     c01140f3 <sfs_truncfile+0x16>
c01140e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01140ec:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01140f1:	76 0a                	jbe    c01140fd <sfs_truncfile+0x20>
        return -E_INVAL;
c01140f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01140f8:	e9 d4 01 00 00       	jmp    c01142d1 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01140fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114100:	8b 40 38             	mov    0x38(%eax),%eax
c0114103:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114106:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011410a:	74 0a                	je     c0114116 <sfs_truncfile+0x39>
c011410c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011410f:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114112:	85 c0                	test   %eax,%eax
c0114114:	74 24                	je     c011413a <sfs_truncfile+0x5d>
c0114116:	c7 44 24 0c 14 96 11 	movl   $0xc0119614,0xc(%esp)
c011411d:	c0 
c011411e:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0114125:	c0 
c0114126:	c7 44 24 04 a3 03 00 	movl   $0x3a3,0x4(%esp)
c011412d:	00 
c011412e:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0114135:	e8 8e cd fe ff       	call   c0100ec8 <__panic>
c011413a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011413d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114140:	8b 45 08             	mov    0x8(%ebp),%eax
c0114143:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114146:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011414a:	74 0d                	je     c0114159 <sfs_truncfile+0x7c>
c011414c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011414f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114152:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114157:	74 24                	je     c011417d <sfs_truncfile+0xa0>
c0114159:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c0114160:	c0 
c0114161:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0114168:	c0 
c0114169:	c7 44 24 04 a4 03 00 	movl   $0x3a4,0x4(%esp)
c0114170:	00 
c0114171:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0114178:	e8 4b cd fe ff       	call   c0100ec8 <__panic>
c011417d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114180:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0114183:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114186:	8b 00                	mov    (%eax),%eax
c0114188:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c011418b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0114192:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c0114199:	8b 55 0c             	mov    0xc(%ebp),%edx
c011419c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011419f:	01 d0                	add    %edx,%eax
c01141a1:	83 e8 01             	sub    $0x1,%eax
c01141a4:	ba 00 00 00 00       	mov    $0x0,%edx
c01141a9:	f7 75 d8             	divl   -0x28(%ebp)
c01141ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c01141af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01141b2:	8b 10                	mov    (%eax),%edx
c01141b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141b7:	39 c2                	cmp    %eax,%edx
c01141b9:	75 39                	jne    c01141f4 <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c01141bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01141be:	8b 40 08             	mov    0x8(%eax),%eax
c01141c1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01141c4:	74 24                	je     c01141ea <sfs_truncfile+0x10d>
c01141c6:	c7 44 24 0c 42 97 11 	movl   $0xc0119742,0xc(%esp)
c01141cd:	c0 
c01141ce:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c01141d5:	c0 
c01141d6:	c7 44 24 04 ab 03 00 	movl   $0x3ab,0x4(%esp)
c01141dd:	00 
c01141de:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01141e5:	e8 de cc fe ff       	call   c0100ec8 <__panic>
        return 0;
c01141ea:	b8 00 00 00 00       	mov    $0x0,%eax
c01141ef:	e9 dd 00 00 00       	jmp    c01142d1 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c01141f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01141f7:	89 04 24             	mov    %eax,(%esp)
c01141fa:	e8 f9 de ff ff       	call   c01120f8 <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c01141ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114202:	8b 40 08             	mov    0x8(%eax),%eax
c0114205:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c0114208:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011420b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011420e:	73 3f                	jae    c011424f <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114210:	eb 33                	jmp    c0114245 <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0114212:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114219:	00 
c011421a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011421d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114221:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114224:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114228:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011422b:	89 04 24             	mov    %eax,(%esp)
c011422e:	e8 ba e9 ff ff       	call   c0112bed <sfs_bmap_load_nolock>
c0114233:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114236:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011423a:	74 05                	je     c0114241 <sfs_truncfile+0x164>
                goto out_unlock;
c011423c:	e9 82 00 00 00       	jmp    c01142c3 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0114241:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114245:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114248:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011424b:	75 c5                	jne    c0114212 <sfs_truncfile+0x135>
c011424d:	eb 33                	jmp    c0114282 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c011424f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114252:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114255:	73 2b                	jae    c0114282 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c0114257:	eb 21                	jmp    c011427a <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c0114259:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011425c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114260:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114263:	89 04 24             	mov    %eax,(%esp)
c0114266:	e8 6a ea ff ff       	call   c0112cd5 <sfs_bmap_truncate_nolock>
c011426b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011426e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114272:	74 02                	je     c0114276 <sfs_truncfile+0x199>
                goto out_unlock;
c0114274:	eb 4d                	jmp    c01142c3 <sfs_truncfile+0x1e6>
            }
            nblks --;
c0114276:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c011427a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011427d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114280:	75 d7                	jne    c0114259 <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c0114282:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114285:	8b 40 08             	mov    0x8(%eax),%eax
c0114288:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011428b:	74 24                	je     c01142b1 <sfs_truncfile+0x1d4>
c011428d:	c7 44 24 0c 57 97 11 	movl   $0xc0119757,0xc(%esp)
c0114294:	c0 
c0114295:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c011429c:	c0 
c011429d:	c7 44 24 04 c4 03 00 	movl   $0x3c4,0x4(%esp)
c01142a4:	00 
c01142a5:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c01142ac:	e8 17 cc fe ff       	call   c0100ec8 <__panic>
    din->size = len;
c01142b1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01142b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01142b7:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c01142b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01142bc:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c01142c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01142c6:	89 04 24             	mov    %eax,(%esp)
c01142c9:	e8 40 de ff ff       	call   c011210e <unlock_sin>
    return ret;
c01142ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01142d1:	c9                   	leave  
c01142d2:	c3                   	ret    

c01142d3 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c01142d3:	55                   	push   %ebp
c01142d4:	89 e5                	mov    %esp,%ebp
c01142d6:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01142d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01142dc:	8b 40 38             	mov    0x38(%eax),%eax
c01142df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01142e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01142e6:	74 0a                	je     c01142f2 <sfs_lookup+0x1f>
c01142e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01142eb:	8b 40 6c             	mov    0x6c(%eax),%eax
c01142ee:	85 c0                	test   %eax,%eax
c01142f0:	74 24                	je     c0114316 <sfs_lookup+0x43>
c01142f2:	c7 44 24 0c 14 96 11 	movl   $0xc0119614,0xc(%esp)
c01142f9:	c0 
c01142fa:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0114301:	c0 
c0114302:	c7 44 24 04 d4 03 00 	movl   $0x3d4,0x4(%esp)
c0114309:	00 
c011430a:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0114311:	e8 b2 cb fe ff       	call   c0100ec8 <__panic>
c0114316:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114319:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c011431c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011431f:	0f b6 00             	movzbl (%eax),%eax
c0114322:	84 c0                	test   %al,%al
c0114324:	74 0a                	je     c0114330 <sfs_lookup+0x5d>
c0114326:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114329:	0f b6 00             	movzbl (%eax),%eax
c011432c:	3c 2f                	cmp    $0x2f,%al
c011432e:	75 24                	jne    c0114354 <sfs_lookup+0x81>
c0114330:	c7 44 24 0c 6c 97 11 	movl   $0xc011976c,0xc(%esp)
c0114337:	c0 
c0114338:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c011433f:	c0 
c0114340:	c7 44 24 04 d5 03 00 	movl   $0x3d5,0x4(%esp)
c0114347:	00 
c0114348:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c011434f:	e8 74 cb fe ff       	call   c0100ec8 <__panic>
    vop_ref_inc(node);
c0114354:	8b 45 08             	mov    0x8(%ebp),%eax
c0114357:	89 04 24             	mov    %eax,(%esp)
c011435a:	e8 63 ac ff ff       	call   c010efc2 <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011435f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114362:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114365:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114369:	74 0d                	je     c0114378 <sfs_lookup+0xa5>
c011436b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011436e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114371:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114376:	74 24                	je     c011439c <sfs_lookup+0xc9>
c0114378:	c7 44 24 0c 10 94 11 	movl   $0xc0119410,0xc(%esp)
c011437f:	c0 
c0114380:	c7 44 24 08 bf 93 11 	movl   $0xc01193bf,0x8(%esp)
c0114387:	c0 
c0114388:	c7 44 24 04 d7 03 00 	movl   $0x3d7,0x4(%esp)
c011438f:	00 
c0114390:	c7 04 24 57 93 11 c0 	movl   $0xc0119357,(%esp)
c0114397:	e8 2c cb fe ff       	call   c0100ec8 <__panic>
c011439c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011439f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c01143a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01143a5:	8b 00                	mov    (%eax),%eax
c01143a7:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01143ab:	66 83 f8 02          	cmp    $0x2,%ax
c01143af:	74 12                	je     c01143c3 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c01143b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01143b4:	89 04 24             	mov    %eax,(%esp)
c01143b7:	e8 20 ac ff ff       	call   c010efdc <inode_ref_dec>
        return -E_NOTDIR;
c01143bc:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c01143c1:	eb 4e                	jmp    c0114411 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c01143c3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01143ca:	00 
c01143cb:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01143ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01143d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01143d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01143d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01143dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01143e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01143e3:	89 04 24             	mov    %eax,(%esp)
c01143e6:	e8 08 ec ff ff       	call   c0112ff3 <sfs_lookup_once>
c01143eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c01143ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01143f1:	89 04 24             	mov    %eax,(%esp)
c01143f4:	e8 e3 ab ff ff       	call   c010efdc <inode_ref_dec>
    if (ret != 0) {
c01143f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01143fd:	74 05                	je     c0114404 <sfs_lookup+0x131>
        return ret;
c01143ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114402:	eb 0d                	jmp    c0114411 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c0114404:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0114407:	8b 45 10             	mov    0x10(%ebp),%eax
c011440a:	89 10                	mov    %edx,(%eax)
    return 0;
c011440c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114411:	c9                   	leave  
c0114412:	c3                   	ret    

c0114413 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0114413:	55                   	push   %ebp
c0114414:	89 e5                	mov    %esp,%ebp
c0114416:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c0114419:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011441d:	75 06                	jne    c0114425 <sfs_rwblock_nolock+0x12>
c011441f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114423:	75 0b                	jne    c0114430 <sfs_rwblock_nolock+0x1d>
c0114425:	8b 45 08             	mov    0x8(%ebp),%eax
c0114428:	8b 40 04             	mov    0x4(%eax),%eax
c011442b:	3b 45 10             	cmp    0x10(%ebp),%eax
c011442e:	77 24                	ja     c0114454 <sfs_rwblock_nolock+0x41>
c0114430:	c7 44 24 0c 8c 97 11 	movl   $0xc011978c,0xc(%esp)
c0114437:	c0 
c0114438:	c7 44 24 08 c0 97 11 	movl   $0xc01197c0,0x8(%esp)
c011443f:	c0 
c0114440:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0114447:	00 
c0114448:	c7 04 24 d5 97 11 c0 	movl   $0xc01197d5,(%esp)
c011444f:	e8 74 ca fe ff       	call   c0100ec8 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0114454:	8b 45 10             	mov    0x10(%ebp),%eax
c0114457:	c1 e0 0c             	shl    $0xc,%eax
c011445a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011445e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114465:	00 
c0114466:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114469:	89 44 24 04          	mov    %eax,0x4(%esp)
c011446d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0114470:	89 04 24             	mov    %eax,(%esp)
c0114473:	e8 96 6d ff ff       	call   c010b20e <iobuf_init>
c0114478:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c011447b:	8b 45 08             	mov    0x8(%ebp),%eax
c011447e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114481:	8b 40 10             	mov    0x10(%eax),%eax
c0114484:	8b 55 08             	mov    0x8(%ebp),%edx
c0114487:	8b 52 2c             	mov    0x2c(%edx),%edx
c011448a:	8b 4d 14             	mov    0x14(%ebp),%ecx
c011448d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0114491:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0114494:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0114498:	89 14 24             	mov    %edx,(%esp)
c011449b:	ff d0                	call   *%eax
}
c011449d:	c9                   	leave  
c011449e:	c3                   	ret    

c011449f <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c011449f:	55                   	push   %ebp
c01144a0:	89 e5                	mov    %esp,%ebp
c01144a2:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c01144a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c01144ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01144af:	89 04 24             	mov    %eax,(%esp)
c01144b2:	e8 df 03 00 00       	call   c0114896 <lock_sfs_io>
    {
        while (nblks != 0) {
c01144b7:	eb 42                	jmp    c01144fb <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c01144b9:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01144c0:	00 
c01144c1:	8b 45 18             	mov    0x18(%ebp),%eax
c01144c4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01144c8:	8b 45 10             	mov    0x10(%ebp),%eax
c01144cb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01144cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01144d9:	89 04 24             	mov    %eax,(%esp)
c01144dc:	e8 32 ff ff ff       	call   c0114413 <sfs_rwblock_nolock>
c01144e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01144e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01144e8:	74 02                	je     c01144ec <sfs_rwblock+0x4d>
                break;
c01144ea:	eb 15                	jmp    c0114501 <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c01144ec:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c01144f0:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c01144f4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c01144fb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01144ff:	75 b8                	jne    c01144b9 <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c0114501:	8b 45 08             	mov    0x8(%ebp),%eax
c0114504:	89 04 24             	mov    %eax,(%esp)
c0114507:	e8 b6 03 00 00       	call   c01148c2 <unlock_sfs_io>
    return ret;
c011450c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011450f:	c9                   	leave  
c0114510:	c3                   	ret    

c0114511 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114511:	55                   	push   %ebp
c0114512:	89 e5                	mov    %esp,%ebp
c0114514:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c0114517:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011451e:	00 
c011451f:	8b 45 14             	mov    0x14(%ebp),%eax
c0114522:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114526:	8b 45 10             	mov    0x10(%ebp),%eax
c0114529:	89 44 24 08          	mov    %eax,0x8(%esp)
c011452d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114530:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114534:	8b 45 08             	mov    0x8(%ebp),%eax
c0114537:	89 04 24             	mov    %eax,(%esp)
c011453a:	e8 60 ff ff ff       	call   c011449f <sfs_rwblock>
}
c011453f:	c9                   	leave  
c0114540:	c3                   	ret    

c0114541 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114541:	55                   	push   %ebp
c0114542:	89 e5                	mov    %esp,%ebp
c0114544:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c0114547:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011454e:	00 
c011454f:	8b 45 14             	mov    0x14(%ebp),%eax
c0114552:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114556:	8b 45 10             	mov    0x10(%ebp),%eax
c0114559:	89 44 24 08          	mov    %eax,0x8(%esp)
c011455d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114560:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114564:	8b 45 08             	mov    0x8(%ebp),%eax
c0114567:	89 04 24             	mov    %eax,(%esp)
c011456a:	e8 30 ff ff ff       	call   c011449f <sfs_rwblock>
}
c011456f:	c9                   	leave  
c0114570:	c3                   	ret    

c0114571 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114571:	55                   	push   %ebp
c0114572:	89 e5                	mov    %esp,%ebp
c0114574:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114577:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011457b:	78 18                	js     c0114595 <sfs_rbuf+0x24>
c011457d:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114584:	7f 0f                	jg     c0114595 <sfs_rbuf+0x24>
c0114586:	8b 55 18             	mov    0x18(%ebp),%edx
c0114589:	8b 45 10             	mov    0x10(%ebp),%eax
c011458c:	01 d0                	add    %edx,%eax
c011458e:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114593:	76 24                	jbe    c01145b9 <sfs_rbuf+0x48>
c0114595:	c7 44 24 0c ec 97 11 	movl   $0xc01197ec,0xc(%esp)
c011459c:	c0 
c011459d:	c7 44 24 08 c0 97 11 	movl   $0xc01197c0,0x8(%esp)
c01145a4:	c0 
c01145a5:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01145ac:	00 
c01145ad:	c7 04 24 d5 97 11 c0 	movl   $0xc01197d5,(%esp)
c01145b4:	e8 0f c9 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c01145b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01145bc:	89 04 24             	mov    %eax,(%esp)
c01145bf:	e8 d2 02 00 00       	call   c0114896 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01145c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01145c7:	8b 40 38             	mov    0x38(%eax),%eax
c01145ca:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01145d1:	00 
c01145d2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01145d9:	00 
c01145da:	8b 55 14             	mov    0x14(%ebp),%edx
c01145dd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01145e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01145e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01145e8:	89 04 24             	mov    %eax,(%esp)
c01145eb:	e8 23 fe ff ff       	call   c0114413 <sfs_rwblock_nolock>
c01145f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01145f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01145f7:	75 21                	jne    c011461a <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c01145f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01145fc:	8b 50 38             	mov    0x38(%eax),%edx
c01145ff:	8b 45 18             	mov    0x18(%ebp),%eax
c0114602:	01 c2                	add    %eax,%edx
c0114604:	8b 45 10             	mov    0x10(%ebp),%eax
c0114607:	89 44 24 08          	mov    %eax,0x8(%esp)
c011460b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011460f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114612:	89 04 24             	mov    %eax,(%esp)
c0114615:	e8 fa 0e 00 00       	call   c0115514 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c011461a:	8b 45 08             	mov    0x8(%ebp),%eax
c011461d:	89 04 24             	mov    %eax,(%esp)
c0114620:	e8 9d 02 00 00       	call   c01148c2 <unlock_sfs_io>
    return ret;
c0114625:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114628:	c9                   	leave  
c0114629:	c3                   	ret    

c011462a <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c011462a:	55                   	push   %ebp
c011462b:	89 e5                	mov    %esp,%ebp
c011462d:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114630:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114634:	78 18                	js     c011464e <sfs_wbuf+0x24>
c0114636:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c011463d:	7f 0f                	jg     c011464e <sfs_wbuf+0x24>
c011463f:	8b 55 18             	mov    0x18(%ebp),%edx
c0114642:	8b 45 10             	mov    0x10(%ebp),%eax
c0114645:	01 d0                	add    %edx,%eax
c0114647:	3d 00 10 00 00       	cmp    $0x1000,%eax
c011464c:	76 24                	jbe    c0114672 <sfs_wbuf+0x48>
c011464e:	c7 44 24 0c ec 97 11 	movl   $0xc01197ec,0xc(%esp)
c0114655:	c0 
c0114656:	c7 44 24 08 c0 97 11 	movl   $0xc01197c0,0x8(%esp)
c011465d:	c0 
c011465e:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0114665:	00 
c0114666:	c7 04 24 d5 97 11 c0 	movl   $0xc01197d5,(%esp)
c011466d:	e8 56 c8 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0114672:	8b 45 08             	mov    0x8(%ebp),%eax
c0114675:	89 04 24             	mov    %eax,(%esp)
c0114678:	e8 19 02 00 00       	call   c0114896 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011467d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114680:	8b 40 38             	mov    0x38(%eax),%eax
c0114683:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011468a:	00 
c011468b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114692:	00 
c0114693:	8b 55 14             	mov    0x14(%ebp),%edx
c0114696:	89 54 24 08          	mov    %edx,0x8(%esp)
c011469a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011469e:	8b 45 08             	mov    0x8(%ebp),%eax
c01146a1:	89 04 24             	mov    %eax,(%esp)
c01146a4:	e8 6a fd ff ff       	call   c0114413 <sfs_rwblock_nolock>
c01146a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01146ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01146b0:	75 50                	jne    c0114702 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c01146b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01146b5:	8b 50 38             	mov    0x38(%eax),%edx
c01146b8:	8b 45 18             	mov    0x18(%ebp),%eax
c01146bb:	01 c2                	add    %eax,%edx
c01146bd:	8b 45 10             	mov    0x10(%ebp),%eax
c01146c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01146c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01146c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146cb:	89 14 24             	mov    %edx,(%esp)
c01146ce:	e8 41 0e 00 00       	call   c0115514 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c01146d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01146d6:	8b 40 38             	mov    0x38(%eax),%eax
c01146d9:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01146e0:	00 
c01146e1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01146e8:	00 
c01146e9:	8b 55 14             	mov    0x14(%ebp),%edx
c01146ec:	89 54 24 08          	mov    %edx,0x8(%esp)
c01146f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01146f7:	89 04 24             	mov    %eax,(%esp)
c01146fa:	e8 14 fd ff ff       	call   c0114413 <sfs_rwblock_nolock>
c01146ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0114702:	8b 45 08             	mov    0x8(%ebp),%eax
c0114705:	89 04 24             	mov    %eax,(%esp)
c0114708:	e8 b5 01 00 00       	call   c01148c2 <unlock_sfs_io>
    return ret;
c011470d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114710:	c9                   	leave  
c0114711:	c3                   	ret    

c0114712 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c0114712:	55                   	push   %ebp
c0114713:	89 e5                	mov    %esp,%ebp
c0114715:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114718:	8b 45 08             	mov    0x8(%ebp),%eax
c011471b:	89 04 24             	mov    %eax,(%esp)
c011471e:	e8 73 01 00 00       	call   c0114896 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114723:	8b 45 08             	mov    0x8(%ebp),%eax
c0114726:	8b 40 38             	mov    0x38(%eax),%eax
c0114729:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114730:	00 
c0114731:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114738:	00 
c0114739:	89 04 24             	mov    %eax,(%esp)
c011473c:	e8 f1 0c 00 00       	call   c0115432 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0114741:	8b 55 08             	mov    0x8(%ebp),%edx
c0114744:	8b 45 08             	mov    0x8(%ebp),%eax
c0114747:	8b 40 38             	mov    0x38(%eax),%eax
c011474a:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114751:	00 
c0114752:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114756:	89 04 24             	mov    %eax,(%esp)
c0114759:	e8 b6 0d 00 00       	call   c0115514 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c011475e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114761:	8b 40 38             	mov    0x38(%eax),%eax
c0114764:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011476b:	00 
c011476c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114773:	00 
c0114774:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011477b:	00 
c011477c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114780:	8b 45 08             	mov    0x8(%ebp),%eax
c0114783:	89 04 24             	mov    %eax,(%esp)
c0114786:	e8 88 fc ff ff       	call   c0114413 <sfs_rwblock_nolock>
c011478b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c011478e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114791:	89 04 24             	mov    %eax,(%esp)
c0114794:	e8 29 01 00 00       	call   c01148c2 <unlock_sfs_io>
    return ret;
c0114799:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011479c:	c9                   	leave  
c011479d:	c3                   	ret    

c011479e <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c011479e:	55                   	push   %ebp
c011479f:	89 e5                	mov    %esp,%ebp
c01147a1:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c01147a4:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c01147ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01147ae:	8b 50 04             	mov    0x4(%eax),%edx
c01147b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01147b4:	01 d0                	add    %edx,%eax
c01147b6:	83 e8 01             	sub    $0x1,%eax
c01147b9:	ba 00 00 00 00       	mov    $0x0,%edx
c01147be:	f7 75 f4             	divl   -0xc(%ebp)
c01147c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c01147c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01147c7:	8b 40 30             	mov    0x30(%eax),%eax
c01147ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01147d1:	00 
c01147d2:	89 04 24             	mov    %eax,(%esp)
c01147d5:	e8 ed cf ff ff       	call   c01117c7 <bitmap_getdata>
c01147da:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01147dd:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01147e1:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01147e8:	00 
c01147e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01147f0:	89 04 24             	mov    %eax,(%esp)
c01147f3:	e8 49 fd ff ff       	call   c0114541 <sfs_wblock>
}
c01147f8:	c9                   	leave  
c01147f9:	c3                   	ret    

c01147fa <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c01147fa:	55                   	push   %ebp
c01147fb:	89 e5                	mov    %esp,%ebp
c01147fd:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114800:	8b 45 08             	mov    0x8(%ebp),%eax
c0114803:	89 04 24             	mov    %eax,(%esp)
c0114806:	e8 8b 00 00 00       	call   c0114896 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c011480b:	8b 45 08             	mov    0x8(%ebp),%eax
c011480e:	8b 40 38             	mov    0x38(%eax),%eax
c0114811:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114818:	00 
c0114819:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114820:	00 
c0114821:	89 04 24             	mov    %eax,(%esp)
c0114824:	e8 09 0c 00 00       	call   c0115432 <memset>
        while (nblks != 0) {
c0114829:	eb 3f                	jmp    c011486a <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c011482b:	8b 45 08             	mov    0x8(%ebp),%eax
c011482e:	8b 40 38             	mov    0x38(%eax),%eax
c0114831:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114838:	00 
c0114839:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114840:	00 
c0114841:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114844:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114848:	89 44 24 04          	mov    %eax,0x4(%esp)
c011484c:	8b 45 08             	mov    0x8(%ebp),%eax
c011484f:	89 04 24             	mov    %eax,(%esp)
c0114852:	e8 bc fb ff ff       	call   c0114413 <sfs_rwblock_nolock>
c0114857:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011485a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011485e:	74 02                	je     c0114862 <sfs_clear_block+0x68>
                break;
c0114860:	eb 0e                	jmp    c0114870 <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c0114862:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0114866:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c011486a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011486e:	75 bb                	jne    c011482b <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0114870:	8b 45 08             	mov    0x8(%ebp),%eax
c0114873:	89 04 24             	mov    %eax,(%esp)
c0114876:	e8 47 00 00 00       	call   c01148c2 <unlock_sfs_io>
    return ret;
c011487b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011487e:	c9                   	leave  
c011487f:	c3                   	ret    

c0114880 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0114880:	55                   	push   %ebp
c0114881:	89 e5                	mov    %esp,%ebp
c0114883:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0114886:	8b 45 08             	mov    0x8(%ebp),%eax
c0114889:	83 c0 3c             	add    $0x3c,%eax
c011488c:	89 04 24             	mov    %eax,(%esp)
c011488f:	e8 33 53 ff ff       	call   c0109bc7 <down>
}
c0114894:	c9                   	leave  
c0114895:	c3                   	ret    

c0114896 <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0114896:	55                   	push   %ebp
c0114897:	89 e5                	mov    %esp,%ebp
c0114899:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c011489c:	8b 45 08             	mov    0x8(%ebp),%eax
c011489f:	83 c0 48             	add    $0x48,%eax
c01148a2:	89 04 24             	mov    %eax,(%esp)
c01148a5:	e8 1d 53 ff ff       	call   c0109bc7 <down>
}
c01148aa:	c9                   	leave  
c01148ab:	c3                   	ret    

c01148ac <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c01148ac:	55                   	push   %ebp
c01148ad:	89 e5                	mov    %esp,%ebp
c01148af:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c01148b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01148b5:	83 c0 3c             	add    $0x3c,%eax
c01148b8:	89 04 24             	mov    %eax,(%esp)
c01148bb:	e8 ec 52 ff ff       	call   c0109bac <up>
}
c01148c0:	c9                   	leave  
c01148c1:	c3                   	ret    

c01148c2 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c01148c2:	55                   	push   %ebp
c01148c3:	89 e5                	mov    %esp,%ebp
c01148c5:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c01148c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01148cb:	83 c0 48             	add    $0x48,%eax
c01148ce:	89 04 24             	mov    %eax,(%esp)
c01148d1:	e8 d6 52 ff ff       	call   c0109bac <up>
}
c01148d6:	c9                   	leave  
c01148d7:	c3                   	ret    

c01148d8 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c01148d8:	55                   	push   %ebp
c01148d9:	89 e5                	mov    %esp,%ebp
c01148db:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c01148de:	8b 45 08             	mov    0x8(%ebp),%eax
c01148e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c01148e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c01148ea:	b8 20 00 00 00       	mov    $0x20,%eax
c01148ef:	2b 45 0c             	sub    0xc(%ebp),%eax
c01148f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01148f5:	89 c1                	mov    %eax,%ecx
c01148f7:	d3 ea                	shr    %cl,%edx
c01148f9:	89 d0                	mov    %edx,%eax
}
c01148fb:	c9                   	leave  
c01148fc:	c3                   	ret    

c01148fd <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c01148fd:	55                   	push   %ebp
c01148fe:	89 e5                	mov    %esp,%ebp
c0114900:	83 ec 58             	sub    $0x58,%esp
c0114903:	8b 45 14             	mov    0x14(%ebp),%eax
c0114906:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114909:	8b 45 18             	mov    0x18(%ebp),%eax
c011490c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c011490f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114912:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0114915:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114918:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c011491b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011491e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114921:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114924:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114927:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011492a:	89 55 f0             	mov    %edx,-0x10(%ebp)
c011492d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114930:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114933:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114937:	74 1c                	je     c0114955 <printnum+0x58>
c0114939:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011493c:	ba 00 00 00 00       	mov    $0x0,%edx
c0114941:	f7 75 e4             	divl   -0x1c(%ebp)
c0114944:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0114947:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011494a:	ba 00 00 00 00       	mov    $0x0,%edx
c011494f:	f7 75 e4             	divl   -0x1c(%ebp)
c0114952:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114955:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114958:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011495b:	f7 75 e4             	divl   -0x1c(%ebp)
c011495e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114961:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0114964:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114967:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011496a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011496d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0114970:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114973:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0114976:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114979:	ba 00 00 00 00       	mov    $0x0,%edx
c011497e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114981:	77 64                	ja     c01149e7 <printnum+0xea>
c0114983:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114986:	72 05                	jb     c011498d <printnum+0x90>
c0114988:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c011498b:	77 5a                	ja     c01149e7 <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c011498d:	8b 45 20             	mov    0x20(%ebp),%eax
c0114990:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114993:	8b 45 24             	mov    0x24(%ebp),%eax
c0114996:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c011499a:	89 54 24 18          	mov    %edx,0x18(%esp)
c011499e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01149a1:	89 44 24 14          	mov    %eax,0x14(%esp)
c01149a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01149a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01149ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01149af:	89 54 24 10          	mov    %edx,0x10(%esp)
c01149b3:	8b 45 10             	mov    0x10(%ebp),%eax
c01149b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01149ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01149bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01149c4:	89 04 24             	mov    %eax,(%esp)
c01149c7:	e8 31 ff ff ff       	call   c01148fd <printnum>
c01149cc:	eb 23                	jmp    c01149f1 <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c01149ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01149d1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01149d5:	8b 45 10             	mov    0x10(%ebp),%eax
c01149d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149dc:	8b 45 24             	mov    0x24(%ebp),%eax
c01149df:	89 04 24             	mov    %eax,(%esp)
c01149e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01149e5:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c01149e7:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c01149eb:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c01149ef:	7f dd                	jg     c01149ce <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c01149f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01149f4:	05 44 9a 11 c0       	add    $0xc0119a44,%eax
c01149f9:	0f b6 00             	movzbl (%eax),%eax
c01149fc:	0f be c0             	movsbl %al,%eax
c01149ff:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114a02:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114a06:	8b 55 10             	mov    0x10(%ebp),%edx
c0114a09:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114a0d:	89 04 24             	mov    %eax,(%esp)
c0114a10:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a13:	ff d0                	call   *%eax
}
c0114a15:	c9                   	leave  
c0114a16:	c3                   	ret    

c0114a17 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114a17:	55                   	push   %ebp
c0114a18:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114a1a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114a1e:	7e 14                	jle    c0114a34 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0114a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a23:	8b 00                	mov    (%eax),%eax
c0114a25:	8d 48 08             	lea    0x8(%eax),%ecx
c0114a28:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a2b:	89 0a                	mov    %ecx,(%edx)
c0114a2d:	8b 50 04             	mov    0x4(%eax),%edx
c0114a30:	8b 00                	mov    (%eax),%eax
c0114a32:	eb 30                	jmp    c0114a64 <getuint+0x4d>
    }
    else if (lflag) {
c0114a34:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114a38:	74 16                	je     c0114a50 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114a3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a3d:	8b 00                	mov    (%eax),%eax
c0114a3f:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a42:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a45:	89 0a                	mov    %ecx,(%edx)
c0114a47:	8b 00                	mov    (%eax),%eax
c0114a49:	ba 00 00 00 00       	mov    $0x0,%edx
c0114a4e:	eb 14                	jmp    c0114a64 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114a50:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a53:	8b 00                	mov    (%eax),%eax
c0114a55:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a58:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a5b:	89 0a                	mov    %ecx,(%edx)
c0114a5d:	8b 00                	mov    (%eax),%eax
c0114a5f:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114a64:	5d                   	pop    %ebp
c0114a65:	c3                   	ret    

c0114a66 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114a66:	55                   	push   %ebp
c0114a67:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114a69:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114a6d:	7e 14                	jle    c0114a83 <getint+0x1d>
        return va_arg(*ap, long long);
c0114a6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a72:	8b 00                	mov    (%eax),%eax
c0114a74:	8d 48 08             	lea    0x8(%eax),%ecx
c0114a77:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a7a:	89 0a                	mov    %ecx,(%edx)
c0114a7c:	8b 50 04             	mov    0x4(%eax),%edx
c0114a7f:	8b 00                	mov    (%eax),%eax
c0114a81:	eb 28                	jmp    c0114aab <getint+0x45>
    }
    else if (lflag) {
c0114a83:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114a87:	74 12                	je     c0114a9b <getint+0x35>
        return va_arg(*ap, long);
c0114a89:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a8c:	8b 00                	mov    (%eax),%eax
c0114a8e:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a91:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a94:	89 0a                	mov    %ecx,(%edx)
c0114a96:	8b 00                	mov    (%eax),%eax
c0114a98:	99                   	cltd   
c0114a99:	eb 10                	jmp    c0114aab <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114a9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a9e:	8b 00                	mov    (%eax),%eax
c0114aa0:	8d 48 04             	lea    0x4(%eax),%ecx
c0114aa3:	8b 55 08             	mov    0x8(%ebp),%edx
c0114aa6:	89 0a                	mov    %ecx,(%edx)
c0114aa8:	8b 00                	mov    (%eax),%eax
c0114aaa:	99                   	cltd   
    }
}
c0114aab:	5d                   	pop    %ebp
c0114aac:	c3                   	ret    

c0114aad <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114aad:	55                   	push   %ebp
c0114aae:	89 e5                	mov    %esp,%ebp
c0114ab0:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114ab3:	8d 45 18             	lea    0x18(%ebp),%eax
c0114ab6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114abc:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114ac0:	8b 45 14             	mov    0x14(%ebp),%eax
c0114ac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114ac7:	8b 45 10             	mov    0x10(%ebp),%eax
c0114aca:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ace:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ad1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ad8:	89 04 24             	mov    %eax,(%esp)
c0114adb:	e8 02 00 00 00       	call   c0114ae2 <vprintfmt>
    va_end(ap);
}
c0114ae0:	c9                   	leave  
c0114ae1:	c3                   	ret    

c0114ae2 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114ae2:	55                   	push   %ebp
c0114ae3:	89 e5                	mov    %esp,%ebp
c0114ae5:	56                   	push   %esi
c0114ae6:	53                   	push   %ebx
c0114ae7:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114aea:	eb 1f                	jmp    c0114b0b <vprintfmt+0x29>
            if (ch == '\0') {
c0114aec:	85 db                	test   %ebx,%ebx
c0114aee:	75 05                	jne    c0114af5 <vprintfmt+0x13>
                return;
c0114af0:	e9 33 04 00 00       	jmp    c0114f28 <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0114af5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114af8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114afc:	8b 45 10             	mov    0x10(%ebp),%eax
c0114aff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b03:	89 1c 24             	mov    %ebx,(%esp)
c0114b06:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b09:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114b0b:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b0e:	8d 50 01             	lea    0x1(%eax),%edx
c0114b11:	89 55 14             	mov    %edx,0x14(%ebp)
c0114b14:	0f b6 00             	movzbl (%eax),%eax
c0114b17:	0f b6 d8             	movzbl %al,%ebx
c0114b1a:	83 fb 25             	cmp    $0x25,%ebx
c0114b1d:	75 cd                	jne    c0114aec <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114b1f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114b23:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114b2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114b2d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114b30:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114b37:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114b3a:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114b3d:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b40:	8d 50 01             	lea    0x1(%eax),%edx
c0114b43:	89 55 14             	mov    %edx,0x14(%ebp)
c0114b46:	0f b6 00             	movzbl (%eax),%eax
c0114b49:	0f b6 d8             	movzbl %al,%ebx
c0114b4c:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0114b4f:	83 f8 55             	cmp    $0x55,%eax
c0114b52:	0f 87 98 03 00 00    	ja     c0114ef0 <vprintfmt+0x40e>
c0114b58:	8b 04 85 68 9a 11 c0 	mov    -0x3fee6598(,%eax,4),%eax
c0114b5f:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114b61:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114b65:	eb d6                	jmp    c0114b3d <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114b67:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114b6b:	eb d0                	jmp    c0114b3d <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114b6d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114b74:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114b77:	89 d0                	mov    %edx,%eax
c0114b79:	c1 e0 02             	shl    $0x2,%eax
c0114b7c:	01 d0                	add    %edx,%eax
c0114b7e:	01 c0                	add    %eax,%eax
c0114b80:	01 d8                	add    %ebx,%eax
c0114b82:	83 e8 30             	sub    $0x30,%eax
c0114b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114b88:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b8b:	0f b6 00             	movzbl (%eax),%eax
c0114b8e:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114b91:	83 fb 2f             	cmp    $0x2f,%ebx
c0114b94:	7e 0b                	jle    c0114ba1 <vprintfmt+0xbf>
c0114b96:	83 fb 39             	cmp    $0x39,%ebx
c0114b99:	7f 06                	jg     c0114ba1 <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114b9b:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114b9f:	eb d3                	jmp    c0114b74 <vprintfmt+0x92>
            goto process_precision;
c0114ba1:	eb 33                	jmp    c0114bd6 <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0114ba3:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ba6:	8d 50 04             	lea    0x4(%eax),%edx
c0114ba9:	89 55 18             	mov    %edx,0x18(%ebp)
c0114bac:	8b 00                	mov    (%eax),%eax
c0114bae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114bb1:	eb 23                	jmp    c0114bd6 <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0114bb3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114bb7:	79 0c                	jns    c0114bc5 <vprintfmt+0xe3>
                width = 0;
c0114bb9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114bc0:	e9 78 ff ff ff       	jmp    c0114b3d <vprintfmt+0x5b>
c0114bc5:	e9 73 ff ff ff       	jmp    c0114b3d <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0114bca:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114bd1:	e9 67 ff ff ff       	jmp    c0114b3d <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c0114bd6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114bda:	79 12                	jns    c0114bee <vprintfmt+0x10c>
                width = precision, precision = -1;
c0114bdc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114bdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114be2:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114be9:	e9 4f ff ff ff       	jmp    c0114b3d <vprintfmt+0x5b>
c0114bee:	e9 4a ff ff ff       	jmp    c0114b3d <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114bf3:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114bf7:	e9 41 ff ff ff       	jmp    c0114b3d <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114bfc:	8b 45 18             	mov    0x18(%ebp),%eax
c0114bff:	8d 50 04             	lea    0x4(%eax),%edx
c0114c02:	89 55 18             	mov    %edx,0x18(%ebp)
c0114c05:	8b 00                	mov    (%eax),%eax
c0114c07:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114c0a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114c0e:	8b 55 10             	mov    0x10(%ebp),%edx
c0114c11:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114c15:	89 04 24             	mov    %eax,(%esp)
c0114c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c1b:	ff d0                	call   *%eax
            break;
c0114c1d:	e9 00 03 00 00       	jmp    c0114f22 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114c22:	8b 45 18             	mov    0x18(%ebp),%eax
c0114c25:	8d 50 04             	lea    0x4(%eax),%edx
c0114c28:	89 55 18             	mov    %edx,0x18(%ebp)
c0114c2b:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114c2d:	85 db                	test   %ebx,%ebx
c0114c2f:	79 02                	jns    c0114c33 <vprintfmt+0x151>
                err = -err;
c0114c31:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114c33:	83 fb 18             	cmp    $0x18,%ebx
c0114c36:	7f 0b                	jg     c0114c43 <vprintfmt+0x161>
c0114c38:	8b 34 9d e0 99 11 c0 	mov    -0x3fee6620(,%ebx,4),%esi
c0114c3f:	85 f6                	test   %esi,%esi
c0114c41:	75 2a                	jne    c0114c6d <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114c43:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114c47:	c7 44 24 0c 55 9a 11 	movl   $0xc0119a55,0xc(%esp)
c0114c4e:	c0 
c0114c4f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c52:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114c56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c60:	89 04 24             	mov    %eax,(%esp)
c0114c63:	e8 45 fe ff ff       	call   c0114aad <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114c68:	e9 b5 02 00 00       	jmp    c0114f22 <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114c6d:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114c71:	c7 44 24 0c 5e 9a 11 	movl   $0xc0119a5e,0xc(%esp)
c0114c78:	c0 
c0114c79:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c7c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114c80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c87:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c8a:	89 04 24             	mov    %eax,(%esp)
c0114c8d:	e8 1b fe ff ff       	call   c0114aad <printfmt>
            }
            break;
c0114c92:	e9 8b 02 00 00       	jmp    c0114f22 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114c97:	8b 45 18             	mov    0x18(%ebp),%eax
c0114c9a:	8d 50 04             	lea    0x4(%eax),%edx
c0114c9d:	89 55 18             	mov    %edx,0x18(%ebp)
c0114ca0:	8b 30                	mov    (%eax),%esi
c0114ca2:	85 f6                	test   %esi,%esi
c0114ca4:	75 05                	jne    c0114cab <vprintfmt+0x1c9>
                p = "(null)";
c0114ca6:	be 61 9a 11 c0       	mov    $0xc0119a61,%esi
            }
            if (width > 0 && padc != '-') {
c0114cab:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114caf:	7e 45                	jle    c0114cf6 <vprintfmt+0x214>
c0114cb1:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114cb5:	74 3f                	je     c0114cf6 <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114cb7:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114cba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114cbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cc1:	89 34 24             	mov    %esi,(%esp)
c0114cc4:	e8 3b 04 00 00       	call   c0115104 <strnlen>
c0114cc9:	29 c3                	sub    %eax,%ebx
c0114ccb:	89 d8                	mov    %ebx,%eax
c0114ccd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114cd0:	eb 1e                	jmp    c0114cf0 <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c0114cd2:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114cd6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114cd9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114cdd:	8b 55 10             	mov    0x10(%ebp),%edx
c0114ce0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114ce4:	89 04 24             	mov    %eax,(%esp)
c0114ce7:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cea:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114cec:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114cf0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114cf4:	7f dc                	jg     c0114cd2 <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114cf6:	eb 46                	jmp    c0114d3e <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0114cf8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114cfc:	74 26                	je     c0114d24 <vprintfmt+0x242>
c0114cfe:	83 fb 1f             	cmp    $0x1f,%ebx
c0114d01:	7e 05                	jle    c0114d08 <vprintfmt+0x226>
c0114d03:	83 fb 7e             	cmp    $0x7e,%ebx
c0114d06:	7e 1c                	jle    c0114d24 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0114d08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d0b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d0f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d16:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c0114d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d20:	ff d0                	call   *%eax
c0114d22:	eb 16                	jmp    c0114d3a <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0114d24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d27:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d2b:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d32:	89 1c 24             	mov    %ebx,(%esp)
c0114d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d38:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114d3a:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114d3e:	89 f0                	mov    %esi,%eax
c0114d40:	8d 70 01             	lea    0x1(%eax),%esi
c0114d43:	0f b6 00             	movzbl (%eax),%eax
c0114d46:	0f be d8             	movsbl %al,%ebx
c0114d49:	85 db                	test   %ebx,%ebx
c0114d4b:	74 10                	je     c0114d5d <vprintfmt+0x27b>
c0114d4d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114d51:	78 a5                	js     c0114cf8 <vprintfmt+0x216>
c0114d53:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0114d57:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114d5b:	79 9b                	jns    c0114cf8 <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114d5d:	eb 1e                	jmp    c0114d7d <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0114d5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d62:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d66:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d6d:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0114d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d77:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114d79:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114d7d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114d81:	7f dc                	jg     c0114d5f <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0114d83:	e9 9a 01 00 00       	jmp    c0114f22 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0114d88:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114d8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d8f:	8d 45 18             	lea    0x18(%ebp),%eax
c0114d92:	89 04 24             	mov    %eax,(%esp)
c0114d95:	e8 cc fc ff ff       	call   c0114a66 <getint>
c0114d9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114d9d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0114da0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114da3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114da6:	85 d2                	test   %edx,%edx
c0114da8:	79 2d                	jns    c0114dd7 <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c0114daa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114dad:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114db1:	8b 45 10             	mov    0x10(%ebp),%eax
c0114db4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114db8:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c0114dbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dc2:	ff d0                	call   *%eax
                num = -(long long)num;
c0114dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114dc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114dca:	f7 d8                	neg    %eax
c0114dcc:	83 d2 00             	adc    $0x0,%edx
c0114dcf:	f7 da                	neg    %edx
c0114dd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114dd4:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0114dd7:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114dde:	e9 b6 00 00 00       	jmp    c0114e99 <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0114de3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114de6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dea:	8d 45 18             	lea    0x18(%ebp),%eax
c0114ded:	89 04 24             	mov    %eax,(%esp)
c0114df0:	e8 22 fc ff ff       	call   c0114a17 <getuint>
c0114df5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114df8:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0114dfb:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114e02:	e9 92 00 00 00       	jmp    c0114e99 <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0114e07:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114e0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e0e:	8d 45 18             	lea    0x18(%ebp),%eax
c0114e11:	89 04 24             	mov    %eax,(%esp)
c0114e14:	e8 fe fb ff ff       	call   c0114a17 <getuint>
c0114e19:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e1c:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0114e1f:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0114e26:	eb 71                	jmp    c0114e99 <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0114e28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e2b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e2f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e36:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0114e3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e40:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0114e42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e45:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e49:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e50:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0114e57:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e5a:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0114e5c:	8b 45 18             	mov    0x18(%ebp),%eax
c0114e5f:	8d 50 04             	lea    0x4(%eax),%edx
c0114e62:	89 55 18             	mov    %edx,0x18(%ebp)
c0114e65:	8b 00                	mov    (%eax),%eax
c0114e67:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0114e71:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0114e78:	eb 1f                	jmp    c0114e99 <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0114e7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114e7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e81:	8d 45 18             	lea    0x18(%ebp),%eax
c0114e84:	89 04 24             	mov    %eax,(%esp)
c0114e87:	e8 8b fb ff ff       	call   c0114a17 <getuint>
c0114e8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e8f:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0114e92:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c0114e99:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c0114e9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114ea0:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0114ea4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0114ea7:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114eab:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114eaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114eb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114eb5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114eb9:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114ebd:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ec0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ec7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ecb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ece:	89 04 24             	mov    %eax,(%esp)
c0114ed1:	e8 27 fa ff ff       	call   c01148fd <printnum>
            break;
c0114ed6:	eb 4a                	jmp    c0114f22 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c0114ed8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114edb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114edf:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ee2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ee6:	89 1c 24             	mov    %ebx,(%esp)
c0114ee9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114eec:	ff d0                	call   *%eax
            break;
c0114eee:	eb 32                	jmp    c0114f22 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0114ef0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ef3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ef7:	8b 45 10             	mov    0x10(%ebp),%eax
c0114efa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114efe:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0114f05:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f08:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0114f0a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114f0e:	eb 04                	jmp    c0114f14 <vprintfmt+0x432>
c0114f10:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114f14:	8b 45 14             	mov    0x14(%ebp),%eax
c0114f17:	83 e8 01             	sub    $0x1,%eax
c0114f1a:	0f b6 00             	movzbl (%eax),%eax
c0114f1d:	3c 25                	cmp    $0x25,%al
c0114f1f:	75 ef                	jne    c0114f10 <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0114f21:	90                   	nop
        }
    }
c0114f22:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114f23:	e9 e3 fb ff ff       	jmp    c0114b0b <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0114f28:	83 c4 40             	add    $0x40,%esp
c0114f2b:	5b                   	pop    %ebx
c0114f2c:	5e                   	pop    %esi
c0114f2d:	5d                   	pop    %ebp
c0114f2e:	c3                   	ret    

c0114f2f <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0114f2f:	55                   	push   %ebp
c0114f30:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0114f32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f35:	8b 40 08             	mov    0x8(%eax),%eax
c0114f38:	8d 50 01             	lea    0x1(%eax),%edx
c0114f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f3e:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0114f41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f44:	8b 10                	mov    (%eax),%edx
c0114f46:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f49:	8b 40 04             	mov    0x4(%eax),%eax
c0114f4c:	39 c2                	cmp    %eax,%edx
c0114f4e:	73 12                	jae    c0114f62 <sprintputch+0x33>
        *b->buf ++ = ch;
c0114f50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f53:	8b 00                	mov    (%eax),%eax
c0114f55:	8d 48 01             	lea    0x1(%eax),%ecx
c0114f58:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114f5b:	89 0a                	mov    %ecx,(%edx)
c0114f5d:	8b 55 08             	mov    0x8(%ebp),%edx
c0114f60:	88 10                	mov    %dl,(%eax)
    }
}
c0114f62:	5d                   	pop    %ebp
c0114f63:	c3                   	ret    

c0114f64 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0114f64:	55                   	push   %ebp
c0114f65:	89 e5                	mov    %esp,%ebp
c0114f67:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0114f6a:	8d 45 14             	lea    0x14(%ebp),%eax
c0114f6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0114f70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114f73:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114f77:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f7a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f85:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f88:	89 04 24             	mov    %eax,(%esp)
c0114f8b:	e8 08 00 00 00       	call   c0114f98 <vsnprintf>
c0114f90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0114f93:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114f96:	c9                   	leave  
c0114f97:	c3                   	ret    

c0114f98 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0114f98:	55                   	push   %ebp
c0114f99:	89 e5                	mov    %esp,%ebp
c0114f9b:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0114f9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fa7:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114faa:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fad:	01 d0                	add    %edx,%eax
c0114faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114fb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c0114fb9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0114fbd:	74 0a                	je     c0114fc9 <vsnprintf+0x31>
c0114fbf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114fc5:	39 c2                	cmp    %eax,%edx
c0114fc7:	76 07                	jbe    c0114fd0 <vsnprintf+0x38>
        return -E_INVAL;
c0114fc9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114fce:	eb 32                	jmp    c0115002 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0114fd0:	8b 45 14             	mov    0x14(%ebp),%eax
c0114fd3:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114fd7:	8b 45 10             	mov    0x10(%ebp),%eax
c0114fda:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114fde:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0114fe1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114fe5:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0114fec:	ff 
c0114fed:	c7 04 24 2f 4f 11 c0 	movl   $0xc0114f2f,(%esp)
c0114ff4:	e8 e9 fa ff ff       	call   c0114ae2 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0114ff9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114ffc:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0114fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0115002:	c9                   	leave  
c0115003:	c3                   	ret    

c0115004 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0115004:	55                   	push   %ebp
c0115005:	89 e5                	mov    %esp,%ebp
c0115007:	57                   	push   %edi
c0115008:	56                   	push   %esi
c0115009:	53                   	push   %ebx
c011500a:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c011500d:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0115012:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c0115018:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c011501e:	6b f0 05             	imul   $0x5,%eax,%esi
c0115021:	01 f7                	add    %esi,%edi
c0115023:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c0115028:	f7 e6                	mul    %esi
c011502a:	8d 34 17             	lea    (%edi,%edx,1),%esi
c011502d:	89 f2                	mov    %esi,%edx
c011502f:	83 c0 0b             	add    $0xb,%eax
c0115032:	83 d2 00             	adc    $0x0,%edx
c0115035:	89 c7                	mov    %eax,%edi
c0115037:	83 e7 ff             	and    $0xffffffff,%edi
c011503a:	89 f9                	mov    %edi,%ecx
c011503c:	0f b7 da             	movzwl %dx,%ebx
c011503f:	89 0d c8 ee 14 c0    	mov    %ecx,0xc014eec8
c0115045:	89 1d cc ee 14 c0    	mov    %ebx,0xc014eecc
    unsigned long long result = (next >> 12);
c011504b:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0115050:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c0115056:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c011505a:	c1 ea 0c             	shr    $0xc,%edx
c011505d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115060:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0115063:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c011506a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011506d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0115070:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0115073:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0115076:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115079:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011507c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115080:	74 1c                	je     c011509e <rand+0x9a>
c0115082:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115085:	ba 00 00 00 00       	mov    $0x0,%edx
c011508a:	f7 75 dc             	divl   -0x24(%ebp)
c011508d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0115090:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115093:	ba 00 00 00 00       	mov    $0x0,%edx
c0115098:	f7 75 dc             	divl   -0x24(%ebp)
c011509b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011509e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01150a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01150a4:	f7 75 dc             	divl   -0x24(%ebp)
c01150a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01150aa:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01150ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01150b0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01150b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01150b6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01150b9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01150bc:	83 c4 24             	add    $0x24,%esp
c01150bf:	5b                   	pop    %ebx
c01150c0:	5e                   	pop    %esi
c01150c1:	5f                   	pop    %edi
c01150c2:	5d                   	pop    %ebp
c01150c3:	c3                   	ret    

c01150c4 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01150c4:	55                   	push   %ebp
c01150c5:	89 e5                	mov    %esp,%ebp
    next = seed;
c01150c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01150ca:	ba 00 00 00 00       	mov    $0x0,%edx
c01150cf:	a3 c8 ee 14 c0       	mov    %eax,0xc014eec8
c01150d4:	89 15 cc ee 14 c0    	mov    %edx,0xc014eecc
}
c01150da:	5d                   	pop    %ebp
c01150db:	c3                   	ret    

c01150dc <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c01150dc:	55                   	push   %ebp
c01150dd:	89 e5                	mov    %esp,%ebp
c01150df:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01150e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c01150e9:	eb 04                	jmp    c01150ef <strlen+0x13>
        cnt ++;
c01150eb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c01150ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01150f2:	8d 50 01             	lea    0x1(%eax),%edx
c01150f5:	89 55 08             	mov    %edx,0x8(%ebp)
c01150f8:	0f b6 00             	movzbl (%eax),%eax
c01150fb:	84 c0                	test   %al,%al
c01150fd:	75 ec                	jne    c01150eb <strlen+0xf>
        cnt ++;
    }
    return cnt;
c01150ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115102:	c9                   	leave  
c0115103:	c3                   	ret    

c0115104 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0115104:	55                   	push   %ebp
c0115105:	89 e5                	mov    %esp,%ebp
c0115107:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c011510a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0115111:	eb 04                	jmp    c0115117 <strnlen+0x13>
        cnt ++;
c0115113:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c0115117:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011511a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011511d:	73 10                	jae    c011512f <strnlen+0x2b>
c011511f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115122:	8d 50 01             	lea    0x1(%eax),%edx
c0115125:	89 55 08             	mov    %edx,0x8(%ebp)
c0115128:	0f b6 00             	movzbl (%eax),%eax
c011512b:	84 c0                	test   %al,%al
c011512d:	75 e4                	jne    c0115113 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c011512f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115132:	c9                   	leave  
c0115133:	c3                   	ret    

c0115134 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0115134:	55                   	push   %ebp
c0115135:	89 e5                	mov    %esp,%ebp
c0115137:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c011513a:	8b 45 08             	mov    0x8(%ebp),%eax
c011513d:	89 04 24             	mov    %eax,(%esp)
c0115140:	e8 97 ff ff ff       	call   c01150dc <strlen>
c0115145:	8b 55 08             	mov    0x8(%ebp),%edx
c0115148:	01 c2                	add    %eax,%edx
c011514a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011514d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115151:	89 14 24             	mov    %edx,(%esp)
c0115154:	e8 02 00 00 00       	call   c011515b <strcpy>
}
c0115159:	c9                   	leave  
c011515a:	c3                   	ret    

c011515b <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c011515b:	55                   	push   %ebp
c011515c:	89 e5                	mov    %esp,%ebp
c011515e:	57                   	push   %edi
c011515f:	56                   	push   %esi
c0115160:	83 ec 20             	sub    $0x20,%esp
c0115163:	8b 45 08             	mov    0x8(%ebp),%eax
c0115166:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115169:	8b 45 0c             	mov    0xc(%ebp),%eax
c011516c:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c011516f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115175:	89 d1                	mov    %edx,%ecx
c0115177:	89 c2                	mov    %eax,%edx
c0115179:	89 ce                	mov    %ecx,%esi
c011517b:	89 d7                	mov    %edx,%edi
c011517d:	ac                   	lods   %ds:(%esi),%al
c011517e:	aa                   	stos   %al,%es:(%edi)
c011517f:	84 c0                	test   %al,%al
c0115181:	75 fa                	jne    c011517d <strcpy+0x22>
c0115183:	89 fa                	mov    %edi,%edx
c0115185:	89 f1                	mov    %esi,%ecx
c0115187:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c011518a:	89 55 e8             	mov    %edx,-0x18(%ebp)
c011518d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c0115190:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0115193:	83 c4 20             	add    $0x20,%esp
c0115196:	5e                   	pop    %esi
c0115197:	5f                   	pop    %edi
c0115198:	5d                   	pop    %ebp
c0115199:	c3                   	ret    

c011519a <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c011519a:	55                   	push   %ebp
c011519b:	89 e5                	mov    %esp,%ebp
c011519d:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c01151a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01151a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c01151a6:	eb 21                	jmp    c01151c9 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c01151a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151ab:	0f b6 10             	movzbl (%eax),%edx
c01151ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01151b1:	88 10                	mov    %dl,(%eax)
c01151b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01151b6:	0f b6 00             	movzbl (%eax),%eax
c01151b9:	84 c0                	test   %al,%al
c01151bb:	74 04                	je     c01151c1 <strncpy+0x27>
            src ++;
c01151bd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c01151c1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01151c5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c01151c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01151cd:	75 d9                	jne    c01151a8 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c01151cf:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01151d2:	c9                   	leave  
c01151d3:	c3                   	ret    

c01151d4 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c01151d4:	55                   	push   %ebp
c01151d5:	89 e5                	mov    %esp,%ebp
c01151d7:	57                   	push   %edi
c01151d8:	56                   	push   %esi
c01151d9:	83 ec 20             	sub    $0x20,%esp
c01151dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01151df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01151e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c01151e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01151eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151ee:	89 d1                	mov    %edx,%ecx
c01151f0:	89 c2                	mov    %eax,%edx
c01151f2:	89 ce                	mov    %ecx,%esi
c01151f4:	89 d7                	mov    %edx,%edi
c01151f6:	ac                   	lods   %ds:(%esi),%al
c01151f7:	ae                   	scas   %es:(%edi),%al
c01151f8:	75 08                	jne    c0115202 <strcmp+0x2e>
c01151fa:	84 c0                	test   %al,%al
c01151fc:	75 f8                	jne    c01151f6 <strcmp+0x22>
c01151fe:	31 c0                	xor    %eax,%eax
c0115200:	eb 04                	jmp    c0115206 <strcmp+0x32>
c0115202:	19 c0                	sbb    %eax,%eax
c0115204:	0c 01                	or     $0x1,%al
c0115206:	89 fa                	mov    %edi,%edx
c0115208:	89 f1                	mov    %esi,%ecx
c011520a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011520d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115210:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0115213:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0115216:	83 c4 20             	add    $0x20,%esp
c0115219:	5e                   	pop    %esi
c011521a:	5f                   	pop    %edi
c011521b:	5d                   	pop    %ebp
c011521c:	c3                   	ret    

c011521d <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c011521d:	55                   	push   %ebp
c011521e:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115220:	eb 0c                	jmp    c011522e <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0115222:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0115226:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011522a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c011522e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115232:	74 1a                	je     c011524e <strncmp+0x31>
c0115234:	8b 45 08             	mov    0x8(%ebp),%eax
c0115237:	0f b6 00             	movzbl (%eax),%eax
c011523a:	84 c0                	test   %al,%al
c011523c:	74 10                	je     c011524e <strncmp+0x31>
c011523e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115241:	0f b6 10             	movzbl (%eax),%edx
c0115244:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115247:	0f b6 00             	movzbl (%eax),%eax
c011524a:	38 c2                	cmp    %al,%dl
c011524c:	74 d4                	je     c0115222 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c011524e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115252:	74 18                	je     c011526c <strncmp+0x4f>
c0115254:	8b 45 08             	mov    0x8(%ebp),%eax
c0115257:	0f b6 00             	movzbl (%eax),%eax
c011525a:	0f b6 d0             	movzbl %al,%edx
c011525d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115260:	0f b6 00             	movzbl (%eax),%eax
c0115263:	0f b6 c0             	movzbl %al,%eax
c0115266:	29 c2                	sub    %eax,%edx
c0115268:	89 d0                	mov    %edx,%eax
c011526a:	eb 05                	jmp    c0115271 <strncmp+0x54>
c011526c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0115271:	5d                   	pop    %ebp
c0115272:	c3                   	ret    

c0115273 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0115273:	55                   	push   %ebp
c0115274:	89 e5                	mov    %esp,%ebp
c0115276:	83 ec 04             	sub    $0x4,%esp
c0115279:	8b 45 0c             	mov    0xc(%ebp),%eax
c011527c:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c011527f:	eb 14                	jmp    c0115295 <strchr+0x22>
        if (*s == c) {
c0115281:	8b 45 08             	mov    0x8(%ebp),%eax
c0115284:	0f b6 00             	movzbl (%eax),%eax
c0115287:	3a 45 fc             	cmp    -0x4(%ebp),%al
c011528a:	75 05                	jne    c0115291 <strchr+0x1e>
            return (char *)s;
c011528c:	8b 45 08             	mov    0x8(%ebp),%eax
c011528f:	eb 13                	jmp    c01152a4 <strchr+0x31>
        }
        s ++;
c0115291:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c0115295:	8b 45 08             	mov    0x8(%ebp),%eax
c0115298:	0f b6 00             	movzbl (%eax),%eax
c011529b:	84 c0                	test   %al,%al
c011529d:	75 e2                	jne    c0115281 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c011529f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01152a4:	c9                   	leave  
c01152a5:	c3                   	ret    

c01152a6 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c01152a6:	55                   	push   %ebp
c01152a7:	89 e5                	mov    %esp,%ebp
c01152a9:	83 ec 04             	sub    $0x4,%esp
c01152ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152af:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01152b2:	eb 11                	jmp    c01152c5 <strfind+0x1f>
        if (*s == c) {
c01152b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01152b7:	0f b6 00             	movzbl (%eax),%eax
c01152ba:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01152bd:	75 02                	jne    c01152c1 <strfind+0x1b>
            break;
c01152bf:	eb 0e                	jmp    c01152cf <strfind+0x29>
        }
        s ++;
c01152c1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c01152c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01152c8:	0f b6 00             	movzbl (%eax),%eax
c01152cb:	84 c0                	test   %al,%al
c01152cd:	75 e5                	jne    c01152b4 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c01152cf:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01152d2:	c9                   	leave  
c01152d3:	c3                   	ret    

c01152d4 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c01152d4:	55                   	push   %ebp
c01152d5:	89 e5                	mov    %esp,%ebp
c01152d7:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c01152da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c01152e1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01152e8:	eb 04                	jmp    c01152ee <strtol+0x1a>
        s ++;
c01152ea:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01152ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01152f1:	0f b6 00             	movzbl (%eax),%eax
c01152f4:	3c 20                	cmp    $0x20,%al
c01152f6:	74 f2                	je     c01152ea <strtol+0x16>
c01152f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01152fb:	0f b6 00             	movzbl (%eax),%eax
c01152fe:	3c 09                	cmp    $0x9,%al
c0115300:	74 e8                	je     c01152ea <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0115302:	8b 45 08             	mov    0x8(%ebp),%eax
c0115305:	0f b6 00             	movzbl (%eax),%eax
c0115308:	3c 2b                	cmp    $0x2b,%al
c011530a:	75 06                	jne    c0115312 <strtol+0x3e>
        s ++;
c011530c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115310:	eb 15                	jmp    c0115327 <strtol+0x53>
    }
    else if (*s == '-') {
c0115312:	8b 45 08             	mov    0x8(%ebp),%eax
c0115315:	0f b6 00             	movzbl (%eax),%eax
c0115318:	3c 2d                	cmp    $0x2d,%al
c011531a:	75 0b                	jne    c0115327 <strtol+0x53>
        s ++, neg = 1;
c011531c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115320:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c0115327:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011532b:	74 06                	je     c0115333 <strtol+0x5f>
c011532d:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0115331:	75 24                	jne    c0115357 <strtol+0x83>
c0115333:	8b 45 08             	mov    0x8(%ebp),%eax
c0115336:	0f b6 00             	movzbl (%eax),%eax
c0115339:	3c 30                	cmp    $0x30,%al
c011533b:	75 1a                	jne    c0115357 <strtol+0x83>
c011533d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115340:	83 c0 01             	add    $0x1,%eax
c0115343:	0f b6 00             	movzbl (%eax),%eax
c0115346:	3c 78                	cmp    $0x78,%al
c0115348:	75 0d                	jne    c0115357 <strtol+0x83>
        s += 2, base = 16;
c011534a:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c011534e:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0115355:	eb 2a                	jmp    c0115381 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c0115357:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011535b:	75 17                	jne    c0115374 <strtol+0xa0>
c011535d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115360:	0f b6 00             	movzbl (%eax),%eax
c0115363:	3c 30                	cmp    $0x30,%al
c0115365:	75 0d                	jne    c0115374 <strtol+0xa0>
        s ++, base = 8;
c0115367:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011536b:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0115372:	eb 0d                	jmp    c0115381 <strtol+0xad>
    }
    else if (base == 0) {
c0115374:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115378:	75 07                	jne    c0115381 <strtol+0xad>
        base = 10;
c011537a:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0115381:	8b 45 08             	mov    0x8(%ebp),%eax
c0115384:	0f b6 00             	movzbl (%eax),%eax
c0115387:	3c 2f                	cmp    $0x2f,%al
c0115389:	7e 1b                	jle    c01153a6 <strtol+0xd2>
c011538b:	8b 45 08             	mov    0x8(%ebp),%eax
c011538e:	0f b6 00             	movzbl (%eax),%eax
c0115391:	3c 39                	cmp    $0x39,%al
c0115393:	7f 11                	jg     c01153a6 <strtol+0xd2>
            dig = *s - '0';
c0115395:	8b 45 08             	mov    0x8(%ebp),%eax
c0115398:	0f b6 00             	movzbl (%eax),%eax
c011539b:	0f be c0             	movsbl %al,%eax
c011539e:	83 e8 30             	sub    $0x30,%eax
c01153a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01153a4:	eb 48                	jmp    c01153ee <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c01153a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01153a9:	0f b6 00             	movzbl (%eax),%eax
c01153ac:	3c 60                	cmp    $0x60,%al
c01153ae:	7e 1b                	jle    c01153cb <strtol+0xf7>
c01153b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01153b3:	0f b6 00             	movzbl (%eax),%eax
c01153b6:	3c 7a                	cmp    $0x7a,%al
c01153b8:	7f 11                	jg     c01153cb <strtol+0xf7>
            dig = *s - 'a' + 10;
c01153ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01153bd:	0f b6 00             	movzbl (%eax),%eax
c01153c0:	0f be c0             	movsbl %al,%eax
c01153c3:	83 e8 57             	sub    $0x57,%eax
c01153c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01153c9:	eb 23                	jmp    c01153ee <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c01153cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01153ce:	0f b6 00             	movzbl (%eax),%eax
c01153d1:	3c 40                	cmp    $0x40,%al
c01153d3:	7e 3d                	jle    c0115412 <strtol+0x13e>
c01153d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01153d8:	0f b6 00             	movzbl (%eax),%eax
c01153db:	3c 5a                	cmp    $0x5a,%al
c01153dd:	7f 33                	jg     c0115412 <strtol+0x13e>
            dig = *s - 'A' + 10;
c01153df:	8b 45 08             	mov    0x8(%ebp),%eax
c01153e2:	0f b6 00             	movzbl (%eax),%eax
c01153e5:	0f be c0             	movsbl %al,%eax
c01153e8:	83 e8 37             	sub    $0x37,%eax
c01153eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c01153ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01153f1:	3b 45 10             	cmp    0x10(%ebp),%eax
c01153f4:	7c 02                	jl     c01153f8 <strtol+0x124>
            break;
c01153f6:	eb 1a                	jmp    c0115412 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c01153f8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01153fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01153ff:	0f af 45 10          	imul   0x10(%ebp),%eax
c0115403:	89 c2                	mov    %eax,%edx
c0115405:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115408:	01 d0                	add    %edx,%eax
c011540a:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c011540d:	e9 6f ff ff ff       	jmp    c0115381 <strtol+0xad>

    if (endptr) {
c0115412:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0115416:	74 08                	je     c0115420 <strtol+0x14c>
        *endptr = (char *) s;
c0115418:	8b 45 0c             	mov    0xc(%ebp),%eax
c011541b:	8b 55 08             	mov    0x8(%ebp),%edx
c011541e:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0115420:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0115424:	74 07                	je     c011542d <strtol+0x159>
c0115426:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115429:	f7 d8                	neg    %eax
c011542b:	eb 03                	jmp    c0115430 <strtol+0x15c>
c011542d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0115430:	c9                   	leave  
c0115431:	c3                   	ret    

c0115432 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0115432:	55                   	push   %ebp
c0115433:	89 e5                	mov    %esp,%ebp
c0115435:	57                   	push   %edi
c0115436:	83 ec 24             	sub    $0x24,%esp
c0115439:	8b 45 0c             	mov    0xc(%ebp),%eax
c011543c:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c011543f:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0115443:	8b 55 08             	mov    0x8(%ebp),%edx
c0115446:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0115449:	88 45 f7             	mov    %al,-0x9(%ebp)
c011544c:	8b 45 10             	mov    0x10(%ebp),%eax
c011544f:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115452:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0115455:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0115459:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011545c:	89 d7                	mov    %edx,%edi
c011545e:	f3 aa                	rep stos %al,%es:(%edi)
c0115460:	89 fa                	mov    %edi,%edx
c0115462:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0115465:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c0115468:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c011546b:	83 c4 24             	add    $0x24,%esp
c011546e:	5f                   	pop    %edi
c011546f:	5d                   	pop    %ebp
c0115470:	c3                   	ret    

c0115471 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0115471:	55                   	push   %ebp
c0115472:	89 e5                	mov    %esp,%ebp
c0115474:	57                   	push   %edi
c0115475:	56                   	push   %esi
c0115476:	53                   	push   %ebx
c0115477:	83 ec 30             	sub    $0x30,%esp
c011547a:	8b 45 08             	mov    0x8(%ebp),%eax
c011547d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115480:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115483:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115486:	8b 45 10             	mov    0x10(%ebp),%eax
c0115489:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c011548c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011548f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0115492:	73 42                	jae    c01154d6 <memmove+0x65>
c0115494:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115497:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011549a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011549d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01154a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01154a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01154a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01154a9:	c1 e8 02             	shr    $0x2,%eax
c01154ac:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01154ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01154b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01154b4:	89 d7                	mov    %edx,%edi
c01154b6:	89 c6                	mov    %eax,%esi
c01154b8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01154ba:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01154bd:	83 e1 03             	and    $0x3,%ecx
c01154c0:	74 02                	je     c01154c4 <memmove+0x53>
c01154c2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01154c4:	89 f0                	mov    %esi,%eax
c01154c6:	89 fa                	mov    %edi,%edx
c01154c8:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c01154cb:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01154ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01154d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01154d4:	eb 36                	jmp    c011550c <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c01154d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01154d9:	8d 50 ff             	lea    -0x1(%eax),%edx
c01154dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01154df:	01 c2                	add    %eax,%edx
c01154e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01154e4:	8d 48 ff             	lea    -0x1(%eax),%ecx
c01154e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154ea:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c01154ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01154f0:	89 c1                	mov    %eax,%ecx
c01154f2:	89 d8                	mov    %ebx,%eax
c01154f4:	89 d6                	mov    %edx,%esi
c01154f6:	89 c7                	mov    %eax,%edi
c01154f8:	fd                   	std    
c01154f9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01154fb:	fc                   	cld    
c01154fc:	89 f8                	mov    %edi,%eax
c01154fe:	89 f2                	mov    %esi,%edx
c0115500:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0115503:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0115506:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0115509:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c011550c:	83 c4 30             	add    $0x30,%esp
c011550f:	5b                   	pop    %ebx
c0115510:	5e                   	pop    %esi
c0115511:	5f                   	pop    %edi
c0115512:	5d                   	pop    %ebp
c0115513:	c3                   	ret    

c0115514 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0115514:	55                   	push   %ebp
c0115515:	89 e5                	mov    %esp,%ebp
c0115517:	57                   	push   %edi
c0115518:	56                   	push   %esi
c0115519:	83 ec 20             	sub    $0x20,%esp
c011551c:	8b 45 08             	mov    0x8(%ebp),%eax
c011551f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115522:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115525:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115528:	8b 45 10             	mov    0x10(%ebp),%eax
c011552b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c011552e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115531:	c1 e8 02             	shr    $0x2,%eax
c0115534:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0115536:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115539:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011553c:	89 d7                	mov    %edx,%edi
c011553e:	89 c6                	mov    %eax,%esi
c0115540:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115542:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0115545:	83 e1 03             	and    $0x3,%ecx
c0115548:	74 02                	je     c011554c <memcpy+0x38>
c011554a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c011554c:	89 f0                	mov    %esi,%eax
c011554e:	89 fa                	mov    %edi,%edx
c0115550:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115553:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0115556:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0115559:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c011555c:	83 c4 20             	add    $0x20,%esp
c011555f:	5e                   	pop    %esi
c0115560:	5f                   	pop    %edi
c0115561:	5d                   	pop    %ebp
c0115562:	c3                   	ret    

c0115563 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0115563:	55                   	push   %ebp
c0115564:	89 e5                	mov    %esp,%ebp
c0115566:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c0115569:	8b 45 08             	mov    0x8(%ebp),%eax
c011556c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c011556f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115572:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0115575:	eb 30                	jmp    c01155a7 <memcmp+0x44>
        if (*s1 != *s2) {
c0115577:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011557a:	0f b6 10             	movzbl (%eax),%edx
c011557d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115580:	0f b6 00             	movzbl (%eax),%eax
c0115583:	38 c2                	cmp    %al,%dl
c0115585:	74 18                	je     c011559f <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115587:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011558a:	0f b6 00             	movzbl (%eax),%eax
c011558d:	0f b6 d0             	movzbl %al,%edx
c0115590:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115593:	0f b6 00             	movzbl (%eax),%eax
c0115596:	0f b6 c0             	movzbl %al,%eax
c0115599:	29 c2                	sub    %eax,%edx
c011559b:	89 d0                	mov    %edx,%eax
c011559d:	eb 1a                	jmp    c01155b9 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c011559f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01155a3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c01155a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01155aa:	8d 50 ff             	lea    -0x1(%eax),%edx
c01155ad:	89 55 10             	mov    %edx,0x10(%ebp)
c01155b0:	85 c0                	test   %eax,%eax
c01155b2:	75 c3                	jne    c0115577 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c01155b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01155b9:	c9                   	leave  
c01155ba:	c3                   	ret    
